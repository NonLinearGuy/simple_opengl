// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  read_ = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  setWindowTitle = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message

// TODO remove when SDL2 is fixed; also add the above assertion
Module['setWindowTitle'] = setWindowTitle;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 19680,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5262560,
    DYNAMIC_BASE = 5262560,
    DYNAMICTOP_PTR = 19648;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory







  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferViews();

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [function($0) { var str = UTF8ToString($0) + '\n\n' + 'Abort/Retry/Ignore/AlwaysIgnore? [ariA] :'; var reply = window.prompt(str, "i"); if (reply === null) { reply = "i"; } return allocate(intArrayFromString(reply), 'i8', ALLOC_NORMAL); }];

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}




// STATICTOP = STATIC_BASE + 19672;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 19664

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err && !errored) {
            errored = true;
            return callback(err);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        transaction.oncomplete = function(e) {
          if (!errored) {
            callback(null);
          }
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(13);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function () {
        SYSCALLS.get();
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -75;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      Module['abort']();
    }

   

   

  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return (0
        || ENVIRONMENT_IS_NODE
        || (typeof dateNow !== 'undefined')
        || (typeof performance === 'object' && performance && typeof performance['now'] === 'function')
        );
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(22);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  var _emscripten_asm_const_int=true;

  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },exitFullscreen:function () {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function (func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_async_wget(url, file, onload, onerror) {
      Module['noExitRuntime'] = true;
  
      var _url = UTF8ToString(url);
      var _file = UTF8ToString(file);
      _file = PATH_FS.resolve(_file);
      function doCallback(callback) {
        if (callback) {
          var stack = stackSave();
          dynCall_vi(callback, allocate(intArrayFromString(_file), 'i8', ALLOC_STACK));
          stackRestore(stack);
        }
      }
      var destinationDirectory = PATH.dirname(_file);
      FS.createPreloadedFile(
        destinationDirectory,
        PATH.basename(_file),
        _url, true, true,
        function() {
          doCallback(onload);
        },
        function() {
          doCallback(onerror);
        },
        false, // dontCreateFile
        false, // canOwn
        function() { // preFinish
          // if a file exists there, we overwrite it
          try {
            FS.unlink(_file);
          } catch (e) {}
          // if the destination directory does not yet exist, create it
          FS.mkdirTree(destinationDirectory);
        }
      );
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function () {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  function __fillGamepadEventData(eventStruct, e) {
      HEAPF64[((eventStruct)>>3)]=e.timestamp;
      for(var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
        }
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
        } else {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
        }
      }
      HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
      HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
      HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }function _emscripten_get_gamepad_status(index, gamepadState) {
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_num_gamepads() {
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  function _emscripten_get_preloaded_image_data(path, w, h) {
      if ((path | 0) === path) path = UTF8ToString(path);
  
      path = PATH_FS.resolve(path);
  
      var canvas = Module["preloadedImages"][path];
      if (canvas) {
        var ctx = canvas.getContext("2d");
        var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var buf = _malloc(canvas.width * canvas.height * 4);
  
        HEAPU8.set(image.data, buf);
  
        HEAP32[((w)>>2)]=canvas.width;
        HEAP32[((h)>>2)]=canvas.height;
        return buf;
      }
  
      return 0;
    }

  function _emscripten_get_preloaded_image_data_from_FILE(file, w, h) {
      var fd = Module['_fileno'](file);
      var stream = FS.getStream(fd);
      if (stream) {
        return _emscripten_get_preloaded_image_data(stream.path, w, h);
      }
  
      return 0;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for (var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for (var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for (var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for (var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.currentContext.maxVertexAttribs; ++i) {
          var cb = GL.currentContext.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, buf);
          GLctx.bufferSubData(GLctx.ARRAY_BUFFER,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          cb.vertexAttribPointerAdaptor.call(GLctx, i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, GL.buffers[GL.currArrayBuffer]);
        }
      },createContext:function (canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        return ctx ? GL.registerContext(ctx, webGLContextAttributes) : 0;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        context.maxVertexAttribs = context.GLctx.getParameter(context.GLctx.MAX_VERTEX_ATTRIBS);
        context.clientBuffers = [];
        for (var i = 0; i < context.maxVertexAttribs; i++) {
          context.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0, vertexAttribPointerAdaptor: null };
        }
  
        GL.generateTempBuffers(false, context);
  
  
  
        return handle;
      },makeContextCurrent:function (contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.timerQueriesEXT[id]);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _emscripten_glBindBuffer(target, buffer) {
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
      var ibo = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
      GL.currElementArrayBuffer = ibo ? (ibo.name | 0) : 0;
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = false;
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(first + count);
  
      GLctx.drawArrays(mode, first, count);
  
      GL.postDrawHandleClientVertexAttribBindings();
    }

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  
  var __tempFixedLengthArray=[];function _emscripten_glDrawBuffersWEBGL(n, bufs) {
  
      var bufArray = __tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
      var buf;
      if (!GL.currElementArrayBuffer) {
        var size = GL.calcBufLength(1, type, 0, count);
        buf = GL.getTempIndexBuffer(size);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, buf);
        GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER,
                                 0,
                                 HEAPU8.subarray(indices, indices + size));
        // the index is now 0
        indices = 0;
      }
  
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(count);
  
      GLctx.drawElements(mode, count, type, indices);
  
      GL.postDrawHandleClientVertexAttribBindings(count);
  
      if (!GL.currElementArrayBuffer) {
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
      }
    }

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = stringToNewUTF8(gl_exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (GL.currentContext.clientBuffers[index].enabled) {
        err("glGetVertexAttribPointer on client-side array: not supported, bad data returned");
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (GL.currentContext.clientBuffers[index].enabled) {
        err("glGetVertexAttrib*v on client-side array: not supported, bad data returned");
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArrayOES(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.timerQueriesEXT[id], target);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.currentContext.clientBuffers[index];
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        cb.vertexAttribPointerAdaptor = function(index, size, type, normalized, stride, ptr) {
          this.vertexAttribPointer(index, size, type, normalized, stride, ptr);
        };
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  
  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function __findCanvasEventTarget(target) {
      if (typeof target === 'number') target = UTF8ToString(target);
      if (!target || target === '#canvas') {
        if (typeof GL !== 'undefined' && GL.offscreenCanvases['canvas']) return GL.offscreenCanvases['canvas']; // TODO: Remove this line, target '#canvas' should refer only to Module['canvas'], not to GL.offscreenCanvases['canvas'] - but need stricter tests to be able to remove this line.
        return Module['canvas'];
      }
      if (typeof GL !== 'undefined' && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
      return __findEventTarget(target);
    }function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }

  
  function __registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(event) {
        var e = event || window.event;
  
        var gamepadEvent = JSEvents.gamepadEvent;
        __fillGamepadEventData(gamepadEvent, e.gamepad);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }


  
  
  var __emscripten_webgl_power_preferences=['default', 'low-power', 'high-performance'];function _emscripten_webgl_do_create_context(target, attributes) {
      var contextAttributes = {};
      var a = attributes >> 2;
      contextAttributes['alpha'] = !!HEAP32[a + (0>>2)];
      contextAttributes['depth'] = !!HEAP32[a + (4>>2)];
      contextAttributes['stencil'] = !!HEAP32[a + (8>>2)];
      contextAttributes['antialias'] = !!HEAP32[a + (12>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[a + (16>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[a + (20>>2)];
      var powerPreference = HEAP32[a + (24>>2)];
      contextAttributes['powerPreference'] = __emscripten_webgl_power_preferences[powerPreference];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[a + (28>>2)];
      contextAttributes.majorVersion = HEAP32[a + (32>>2)];
      contextAttributes.minorVersion = HEAP32[a + (36>>2)];
      contextAttributes.enableExtensionsByDefault = HEAP32[a + (40>>2)];
      contextAttributes.explicitSwapControl = HEAP32[a + (44>>2)];
      contextAttributes.proxyContextToMainThread = HEAP32[a + (48>>2)];
      contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52>>2)];
  
      var canvas = __findCanvasEventTarget(target);
  
  
  
      if (!canvas) {
        return 0;
      }
  
      if (contextAttributes.explicitSwapControl) {
        return 0;
      }
  
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }function _emscripten_webgl_create_context(a0,a1
  /*``*/) {
  return _emscripten_webgl_do_create_context(a0,a1);
  }

  function _emscripten_webgl_init_context_attributes(attributes) {
      var a = attributes >> 2;
      for(var i = 0; i < (56>>2); ++i) {
        HEAP32[a+i] = 0;
      }
  
      HEAP32[a + (0>>2)] =
      HEAP32[a + (4>>2)] = 
      HEAP32[a + (12>>2)] = 
      HEAP32[a + (16>>2)] = 
      HEAP32[a + (32>>2)] = 
      HEAP32[a + (40>>2)] = 1;
  
    }

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDrawElements(mode, count, type, indices) {
      var buf;
      if (!GL.currElementArrayBuffer) {
        var size = GL.calcBufLength(1, type, 0, count);
        buf = GL.getTempIndexBuffer(size);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, buf);
        GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER,
                                 0,
                                 HEAPU8.subarray(indices, indices + size));
        // the index is now 0
        indices = 0;
      }
  
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(count);
  
      GLctx.drawElements(mode, count, type, indices);
  
      GL.postDrawHandleClientVertexAttribBindings(count);
  
      if (!GL.currElementArrayBuffer) {
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
      }
    }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.currentContext.clientBuffers[index];
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.currentContext.clientBuffers[index];
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        cb.vertexAttribPointerAdaptor = function(index, size, type, normalized, stride, ptr) {
          this.vertexAttribPointer(index, size, type, normalized, stride, ptr);
        };
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = stringToNewUTF8(gl_exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = UTF8ToString(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewGetErrorString(error) {
      return GLEW.errorString(error);
    }

  function _glewInit() { return 0; }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        ___setErrNo(22);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        ___setErrNo(22);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 

  function _sigaction(signum, act, oldact) {
      //int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
      return 0;
    }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
      }
      return 0;
    }
FS.staticInit();;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
var GLctx; GL.init();
for (var i = 0; i < 32; i++) __tempFixedLengthArray.push(new Array(i));;
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "___buildEnvironment": ___buildEnvironment,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___lock": ___lock,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___unlock": ___unlock,
  "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize,
  "__embind_register_bool": __embind_register_bool,
  "__embind_register_emval": __embind_register_emval,
  "__embind_register_float": __embind_register_float,
  "__embind_register_integer": __embind_register_integer,
  "__embind_register_memory_view": __embind_register_memory_view,
  "__embind_register_std_string": __embind_register_std_string,
  "__embind_register_std_wstring": __embind_register_std_wstring,
  "__embind_register_void": __embind_register_void,
  "__emval_decref": __emval_decref,
  "__emval_register": __emval_register,
  "__fillGamepadEventData": __fillGamepadEventData,
  "__findCanvasEventTarget": __findCanvasEventTarget,
  "__findEventTarget": __findEventTarget,
  "__glGenObject": __glGenObject,
  "__registerGamepadEventCallback": __registerGamepadEventCallback,
  "_abort": _abort,
  "_clock_gettime": _clock_gettime,
  "_embind_repr": _embind_repr,
  "_emscripten_asm_const_ii": _emscripten_asm_const_ii,
  "_emscripten_async_wget": _emscripten_async_wget,
  "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_get_now": _emscripten_get_now,
  "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic,
  "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads,
  "_emscripten_get_preloaded_image_data": _emscripten_get_preloaded_image_data,
  "_emscripten_get_preloaded_image_data_from_FILE": _emscripten_get_preloaded_image_data_from_FILE,
  "_emscripten_glActiveTexture": _emscripten_glActiveTexture,
  "_emscripten_glAttachShader": _emscripten_glAttachShader,
  "_emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT,
  "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation,
  "_emscripten_glBindBuffer": _emscripten_glBindBuffer,
  "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer,
  "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer,
  "_emscripten_glBindTexture": _emscripten_glBindTexture,
  "_emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES,
  "_emscripten_glBlendColor": _emscripten_glBlendColor,
  "_emscripten_glBlendEquation": _emscripten_glBlendEquation,
  "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate,
  "_emscripten_glBlendFunc": _emscripten_glBlendFunc,
  "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate,
  "_emscripten_glBufferData": _emscripten_glBufferData,
  "_emscripten_glBufferSubData": _emscripten_glBufferSubData,
  "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus,
  "_emscripten_glClear": _emscripten_glClear,
  "_emscripten_glClearColor": _emscripten_glClearColor,
  "_emscripten_glClearDepthf": _emscripten_glClearDepthf,
  "_emscripten_glClearStencil": _emscripten_glClearStencil,
  "_emscripten_glColorMask": _emscripten_glColorMask,
  "_emscripten_glCompileShader": _emscripten_glCompileShader,
  "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D,
  "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D,
  "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D,
  "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D,
  "_emscripten_glCreateProgram": _emscripten_glCreateProgram,
  "_emscripten_glCreateShader": _emscripten_glCreateShader,
  "_emscripten_glCullFace": _emscripten_glCullFace,
  "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers,
  "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers,
  "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram,
  "_emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT,
  "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers,
  "_emscripten_glDeleteShader": _emscripten_glDeleteShader,
  "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures,
  "_emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES,
  "_emscripten_glDepthFunc": _emscripten_glDepthFunc,
  "_emscripten_glDepthMask": _emscripten_glDepthMask,
  "_emscripten_glDepthRangef": _emscripten_glDepthRangef,
  "_emscripten_glDetachShader": _emscripten_glDetachShader,
  "_emscripten_glDisable": _emscripten_glDisable,
  "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray,
  "_emscripten_glDrawArrays": _emscripten_glDrawArrays,
  "_emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE,
  "_emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL,
  "_emscripten_glDrawElements": _emscripten_glDrawElements,
  "_emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE,
  "_emscripten_glEnable": _emscripten_glEnable,
  "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray,
  "_emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT,
  "_emscripten_glFinish": _emscripten_glFinish,
  "_emscripten_glFlush": _emscripten_glFlush,
  "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer,
  "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D,
  "_emscripten_glFrontFace": _emscripten_glFrontFace,
  "_emscripten_glGenBuffers": _emscripten_glGenBuffers,
  "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers,
  "_emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT,
  "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers,
  "_emscripten_glGenTextures": _emscripten_glGenTextures,
  "_emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES,
  "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap,
  "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib,
  "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform,
  "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders,
  "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation,
  "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv,
  "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv,
  "_emscripten_glGetError": _emscripten_glGetError,
  "_emscripten_glGetFloatv": _emscripten_glGetFloatv,
  "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv,
  "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv,
  "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog,
  "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv,
  "_emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT,
  "_emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT,
  "_emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT,
  "_emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT,
  "_emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT,
  "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv,
  "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog,
  "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat,
  "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource,
  "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv,
  "_emscripten_glGetString": _emscripten_glGetString,
  "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv,
  "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv,
  "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation,
  "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv,
  "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv,
  "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv,
  "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv,
  "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv,
  "_emscripten_glHint": _emscripten_glHint,
  "_emscripten_glIsBuffer": _emscripten_glIsBuffer,
  "_emscripten_glIsEnabled": _emscripten_glIsEnabled,
  "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer,
  "_emscripten_glIsProgram": _emscripten_glIsProgram,
  "_emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT,
  "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer,
  "_emscripten_glIsShader": _emscripten_glIsShader,
  "_emscripten_glIsTexture": _emscripten_glIsTexture,
  "_emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES,
  "_emscripten_glLineWidth": _emscripten_glLineWidth,
  "_emscripten_glLinkProgram": _emscripten_glLinkProgram,
  "_emscripten_glPixelStorei": _emscripten_glPixelStorei,
  "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset,
  "_emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT,
  "_emscripten_glReadPixels": _emscripten_glReadPixels,
  "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler,
  "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage,
  "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage,
  "_emscripten_glScissor": _emscripten_glScissor,
  "_emscripten_glShaderBinary": _emscripten_glShaderBinary,
  "_emscripten_glShaderSource": _emscripten_glShaderSource,
  "_emscripten_glStencilFunc": _emscripten_glStencilFunc,
  "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate,
  "_emscripten_glStencilMask": _emscripten_glStencilMask,
  "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate,
  "_emscripten_glStencilOp": _emscripten_glStencilOp,
  "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate,
  "_emscripten_glTexImage2D": _emscripten_glTexImage2D,
  "_emscripten_glTexParameterf": _emscripten_glTexParameterf,
  "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv,
  "_emscripten_glTexParameteri": _emscripten_glTexParameteri,
  "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv,
  "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D,
  "_emscripten_glUniform1f": _emscripten_glUniform1f,
  "_emscripten_glUniform1fv": _emscripten_glUniform1fv,
  "_emscripten_glUniform1i": _emscripten_glUniform1i,
  "_emscripten_glUniform1iv": _emscripten_glUniform1iv,
  "_emscripten_glUniform2f": _emscripten_glUniform2f,
  "_emscripten_glUniform2fv": _emscripten_glUniform2fv,
  "_emscripten_glUniform2i": _emscripten_glUniform2i,
  "_emscripten_glUniform2iv": _emscripten_glUniform2iv,
  "_emscripten_glUniform3f": _emscripten_glUniform3f,
  "_emscripten_glUniform3fv": _emscripten_glUniform3fv,
  "_emscripten_glUniform3i": _emscripten_glUniform3i,
  "_emscripten_glUniform3iv": _emscripten_glUniform3iv,
  "_emscripten_glUniform4f": _emscripten_glUniform4f,
  "_emscripten_glUniform4fv": _emscripten_glUniform4fv,
  "_emscripten_glUniform4i": _emscripten_glUniform4i,
  "_emscripten_glUniform4iv": _emscripten_glUniform4iv,
  "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv,
  "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv,
  "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv,
  "_emscripten_glUseProgram": _emscripten_glUseProgram,
  "_emscripten_glValidateProgram": _emscripten_glValidateProgram,
  "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f,
  "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv,
  "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f,
  "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv,
  "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f,
  "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv,
  "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f,
  "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv,
  "_emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE,
  "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer,
  "_emscripten_glViewport": _emscripten_glViewport,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data,
  "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size,
  "_emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread,
  "_emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread,
  "_emscripten_set_main_loop": _emscripten_set_main_loop,
  "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
  "_emscripten_webgl_create_context": _emscripten_webgl_create_context,
  "_emscripten_webgl_do_create_context": _emscripten_webgl_do_create_context,
  "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes,
  "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current,
  "_getenv": _getenv,
  "_gettimeofday": _gettimeofday,
  "_glActiveTexture": _glActiveTexture,
  "_glAttachShader": _glAttachShader,
  "_glBindBuffer": _glBindBuffer,
  "_glBindTexture": _glBindTexture,
  "_glBufferData": _glBufferData,
  "_glBufferSubData": _glBufferSubData,
  "_glClear": _glClear,
  "_glClearColor": _glClearColor,
  "_glCompileShader": _glCompileShader,
  "_glCreateProgram": _glCreateProgram,
  "_glCreateShader": _glCreateShader,
  "_glDeleteProgram": _glDeleteProgram,
  "_glDeleteShader": _glDeleteShader,
  "_glDeleteTextures": _glDeleteTextures,
  "_glDrawElements": _glDrawElements,
  "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "_glGenBuffers": _glGenBuffers,
  "_glGenTextures": _glGenTextures,
  "_glGetAttribLocation": _glGetAttribLocation,
  "_glGetProgramInfoLog": _glGetProgramInfoLog,
  "_glGetProgramiv": _glGetProgramiv,
  "_glGetShaderInfoLog": _glGetShaderInfoLog,
  "_glGetShaderiv": _glGetShaderiv,
  "_glGetString": _glGetString,
  "_glGetUniformLocation": _glGetUniformLocation,
  "_glLinkProgram": _glLinkProgram,
  "_glShaderSource": _glShaderSource,
  "_glTexImage2D": _glTexImage2D,
  "_glTexParameteri": _glTexParameteri,
  "_glUniform1i": _glUniform1i,
  "_glUniformMatrix4fv": _glUniformMatrix4fv,
  "_glUseProgram": _glUseProgram,
  "_glVertexAttribPointer": _glVertexAttribPointer,
  "_glViewport": _glViewport,
  "_glewGetErrorString": _glewGetErrorString,
  "_glewInit": _glewInit,
  "_nanosleep": _nanosleep,
  "_sigaction": _sigaction,
  "_signal": _signal,
  "_usleep": _usleep,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "count_emval_handles": count_emval_handles,
  "createNamedFunction": createNamedFunction,
  "embind_init_charCodes": embind_init_charCodes,
  "emscriptenWebGLGet": emscriptenWebGLGet,
  "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
  "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform,
  "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib,
  "extendError": extendError,
  "floatReadValueFromPointer": floatReadValueFromPointer,
  "getShiftFromSize": getShiftFromSize,
  "get_first_emval": get_first_emval,
  "init_emval": init_emval,
  "integerReadValueFromPointer": integerReadValueFromPointer,
  "makeLegalFunctionName": makeLegalFunctionName,
  "readLatin1String": readLatin1String,
  "registerType": registerType,
  "simpleReadValueFromPointer": simpleReadValueFromPointer,
  "stringToNewUTF8": stringToNewUTF8,
  "throwBindingError": throwBindingError,
  "throwInternalError": throwInternalError,
  "whenDependentTypesAreResolved": whenDependentTypesAreResolved,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
};
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_atan2=global.Math.atan2,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  ___buildEnvironment=env.___buildEnvironment,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___unlock=env.___unlock,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emval_decref=env.__emval_decref,
  __emval_register=env.__emval_register,
  __fillGamepadEventData=env.__fillGamepadEventData,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __glGenObject=env.__glGenObject,
  __registerGamepadEventCallback=env.__registerGamepadEventCallback,
  _abort=env._abort,
  _clock_gettime=env._clock_gettime,
  _embind_repr=env._embind_repr,
  _emscripten_asm_const_ii=env._emscripten_asm_const_ii,
  _emscripten_async_wget=env._emscripten_async_wget,
  _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_get_now=env._emscripten_get_now,
  _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic,
  _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads,
  _emscripten_get_preloaded_image_data=env._emscripten_get_preloaded_image_data,
  _emscripten_get_preloaded_image_data_from_FILE=env._emscripten_get_preloaded_image_data_from_FILE,
  _emscripten_glActiveTexture=env._emscripten_glActiveTexture,
  _emscripten_glAttachShader=env._emscripten_glAttachShader,
  _emscripten_glBeginQueryEXT=env._emscripten_glBeginQueryEXT,
  _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation,
  _emscripten_glBindBuffer=env._emscripten_glBindBuffer,
  _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer,
  _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer,
  _emscripten_glBindTexture=env._emscripten_glBindTexture,
  _emscripten_glBindVertexArrayOES=env._emscripten_glBindVertexArrayOES,
  _emscripten_glBlendColor=env._emscripten_glBlendColor,
  _emscripten_glBlendEquation=env._emscripten_glBlendEquation,
  _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate,
  _emscripten_glBlendFunc=env._emscripten_glBlendFunc,
  _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate,
  _emscripten_glBufferData=env._emscripten_glBufferData,
  _emscripten_glBufferSubData=env._emscripten_glBufferSubData,
  _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus,
  _emscripten_glClear=env._emscripten_glClear,
  _emscripten_glClearColor=env._emscripten_glClearColor,
  _emscripten_glClearDepthf=env._emscripten_glClearDepthf,
  _emscripten_glClearStencil=env._emscripten_glClearStencil,
  _emscripten_glColorMask=env._emscripten_glColorMask,
  _emscripten_glCompileShader=env._emscripten_glCompileShader,
  _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D,
  _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D,
  _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D,
  _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D,
  _emscripten_glCreateProgram=env._emscripten_glCreateProgram,
  _emscripten_glCreateShader=env._emscripten_glCreateShader,
  _emscripten_glCullFace=env._emscripten_glCullFace,
  _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers,
  _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers,
  _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram,
  _emscripten_glDeleteQueriesEXT=env._emscripten_glDeleteQueriesEXT,
  _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers,
  _emscripten_glDeleteShader=env._emscripten_glDeleteShader,
  _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures,
  _emscripten_glDeleteVertexArraysOES=env._emscripten_glDeleteVertexArraysOES,
  _emscripten_glDepthFunc=env._emscripten_glDepthFunc,
  _emscripten_glDepthMask=env._emscripten_glDepthMask,
  _emscripten_glDepthRangef=env._emscripten_glDepthRangef,
  _emscripten_glDetachShader=env._emscripten_glDetachShader,
  _emscripten_glDisable=env._emscripten_glDisable,
  _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray,
  _emscripten_glDrawArrays=env._emscripten_glDrawArrays,
  _emscripten_glDrawArraysInstancedANGLE=env._emscripten_glDrawArraysInstancedANGLE,
  _emscripten_glDrawBuffersWEBGL=env._emscripten_glDrawBuffersWEBGL,
  _emscripten_glDrawElements=env._emscripten_glDrawElements,
  _emscripten_glDrawElementsInstancedANGLE=env._emscripten_glDrawElementsInstancedANGLE,
  _emscripten_glEnable=env._emscripten_glEnable,
  _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray,
  _emscripten_glEndQueryEXT=env._emscripten_glEndQueryEXT,
  _emscripten_glFinish=env._emscripten_glFinish,
  _emscripten_glFlush=env._emscripten_glFlush,
  _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer,
  _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D,
  _emscripten_glFrontFace=env._emscripten_glFrontFace,
  _emscripten_glGenBuffers=env._emscripten_glGenBuffers,
  _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers,
  _emscripten_glGenQueriesEXT=env._emscripten_glGenQueriesEXT,
  _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers,
  _emscripten_glGenTextures=env._emscripten_glGenTextures,
  _emscripten_glGenVertexArraysOES=env._emscripten_glGenVertexArraysOES,
  _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap,
  _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib,
  _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform,
  _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders,
  _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation,
  _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv,
  _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv,
  _emscripten_glGetError=env._emscripten_glGetError,
  _emscripten_glGetFloatv=env._emscripten_glGetFloatv,
  _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv,
  _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv,
  _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog,
  _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv,
  _emscripten_glGetQueryObjecti64vEXT=env._emscripten_glGetQueryObjecti64vEXT,
  _emscripten_glGetQueryObjectivEXT=env._emscripten_glGetQueryObjectivEXT,
  _emscripten_glGetQueryObjectui64vEXT=env._emscripten_glGetQueryObjectui64vEXT,
  _emscripten_glGetQueryObjectuivEXT=env._emscripten_glGetQueryObjectuivEXT,
  _emscripten_glGetQueryivEXT=env._emscripten_glGetQueryivEXT,
  _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv,
  _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog,
  _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat,
  _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource,
  _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv,
  _emscripten_glGetString=env._emscripten_glGetString,
  _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv,
  _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv,
  _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation,
  _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv,
  _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv,
  _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv,
  _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv,
  _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv,
  _emscripten_glHint=env._emscripten_glHint,
  _emscripten_glIsBuffer=env._emscripten_glIsBuffer,
  _emscripten_glIsEnabled=env._emscripten_glIsEnabled,
  _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer,
  _emscripten_glIsProgram=env._emscripten_glIsProgram,
  _emscripten_glIsQueryEXT=env._emscripten_glIsQueryEXT,
  _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer,
  _emscripten_glIsShader=env._emscripten_glIsShader,
  _emscripten_glIsTexture=env._emscripten_glIsTexture,
  _emscripten_glIsVertexArrayOES=env._emscripten_glIsVertexArrayOES,
  _emscripten_glLineWidth=env._emscripten_glLineWidth,
  _emscripten_glLinkProgram=env._emscripten_glLinkProgram,
  _emscripten_glPixelStorei=env._emscripten_glPixelStorei,
  _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset,
  _emscripten_glQueryCounterEXT=env._emscripten_glQueryCounterEXT,
  _emscripten_glReadPixels=env._emscripten_glReadPixels,
  _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler,
  _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage,
  _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage,
  _emscripten_glScissor=env._emscripten_glScissor,
  _emscripten_glShaderBinary=env._emscripten_glShaderBinary,
  _emscripten_glShaderSource=env._emscripten_glShaderSource,
  _emscripten_glStencilFunc=env._emscripten_glStencilFunc,
  _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate,
  _emscripten_glStencilMask=env._emscripten_glStencilMask,
  _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate,
  _emscripten_glStencilOp=env._emscripten_glStencilOp,
  _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate,
  _emscripten_glTexImage2D=env._emscripten_glTexImage2D,
  _emscripten_glTexParameterf=env._emscripten_glTexParameterf,
  _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv,
  _emscripten_glTexParameteri=env._emscripten_glTexParameteri,
  _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv,
  _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D,
  _emscripten_glUniform1f=env._emscripten_glUniform1f,
  _emscripten_glUniform1fv=env._emscripten_glUniform1fv,
  _emscripten_glUniform1i=env._emscripten_glUniform1i,
  _emscripten_glUniform1iv=env._emscripten_glUniform1iv,
  _emscripten_glUniform2f=env._emscripten_glUniform2f,
  _emscripten_glUniform2fv=env._emscripten_glUniform2fv,
  _emscripten_glUniform2i=env._emscripten_glUniform2i,
  _emscripten_glUniform2iv=env._emscripten_glUniform2iv,
  _emscripten_glUniform3f=env._emscripten_glUniform3f,
  _emscripten_glUniform3fv=env._emscripten_glUniform3fv,
  _emscripten_glUniform3i=env._emscripten_glUniform3i,
  _emscripten_glUniform3iv=env._emscripten_glUniform3iv,
  _emscripten_glUniform4f=env._emscripten_glUniform4f,
  _emscripten_glUniform4fv=env._emscripten_glUniform4fv,
  _emscripten_glUniform4i=env._emscripten_glUniform4i,
  _emscripten_glUniform4iv=env._emscripten_glUniform4iv,
  _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv,
  _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv,
  _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv,
  _emscripten_glUseProgram=env._emscripten_glUseProgram,
  _emscripten_glValidateProgram=env._emscripten_glValidateProgram,
  _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f,
  _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv,
  _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f,
  _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv,
  _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f,
  _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv,
  _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f,
  _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv,
  _emscripten_glVertexAttribDivisorANGLE=env._emscripten_glVertexAttribDivisorANGLE,
  _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer,
  _emscripten_glViewport=env._emscripten_glViewport,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_sample_gamepad_data=env._emscripten_sample_gamepad_data,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_gamepadconnected_callback_on_thread=env._emscripten_set_gamepadconnected_callback_on_thread,
  _emscripten_set_gamepaddisconnected_callback_on_thread=env._emscripten_set_gamepaddisconnected_callback_on_thread,
  _emscripten_set_main_loop=env._emscripten_set_main_loop,
  _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing,
  _emscripten_webgl_create_context=env._emscripten_webgl_create_context,
  _emscripten_webgl_do_create_context=env._emscripten_webgl_do_create_context,
  _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes,
  _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current,
  _getenv=env._getenv,
  _gettimeofday=env._gettimeofday,
  _glActiveTexture=env._glActiveTexture,
  _glAttachShader=env._glAttachShader,
  _glBindBuffer=env._glBindBuffer,
  _glBindTexture=env._glBindTexture,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glCompileShader=env._glCompileShader,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glDeleteProgram=env._glDeleteProgram,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDrawElements=env._glDrawElements,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glGenBuffers=env._glGenBuffers,
  _glGenTextures=env._glGenTextures,
  _glGetAttribLocation=env._glGetAttribLocation,
  _glGetProgramInfoLog=env._glGetProgramInfoLog,
  _glGetProgramiv=env._glGetProgramiv,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetString=env._glGetString,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glShaderSource=env._glShaderSource,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glUniform1i=env._glUniform1i,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _glewGetErrorString=env._glewGetErrorString,
  _glewInit=env._glewInit,
  _nanosleep=env._nanosleep,
  _sigaction=env._sigaction,
  _signal=env._signal,
  _usleep=env._usleep,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  count_emval_handles=env.count_emval_handles,
  createNamedFunction=env.createNamedFunction,
  embind_init_charCodes=env.embind_init_charCodes,
  emscriptenWebGLGet=env.emscriptenWebGLGet,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform,
  emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  getShiftFromSize=env.getShiftFromSize,
  get_first_emval=env.get_first_emval,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  makeLegalFunctionName=env.makeLegalFunctionName,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stringToNewUTF8=env.stringToNewUTF8,
  throwBindingError=env.throwBindingError,
  throwInternalError=env.throwInternalError,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 19680,
  STACK_MAX = 5262560,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _SDL_RLEBlit($surf_src, $srcrect, $surf_dst, $dstrect) {
 $surf_src = $surf_src | 0;
 $srcrect = $srcrect | 0;
 $surf_dst = $surf_dst | 0;
 $dstrect = $dstrect | 0;
 var $$pre848 = 0, $$pre851 = 0, $$pre854 = 0, $$pre856 = 0, $$pre858 = 0, $$pre861 = 0, $$pre864 = 0, $0 = 0, $10 = 0, $101 = 0, $102 = 0, $108 = 0, $114 = 0, $12 = 0, $127 = 0, $135 = 0, $136 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $146 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $165 = 0, $166 = 0, $167 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $18 = 0, $188 = 0, $19 = 0, $192 = 0, $196 = 0, $20 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $208 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $225 = 0, $226 = 0, $23 = 0, $232 = 0, $235 = 0, $237 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $262 = 0, $267 = 0, $271 = 0, $275 = 0, $279 = 0, $28 = 0, $288 = 0, $296 = 0, $297 = 0, $301 = 0, $302 = 0, $306 = 0, $307 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $320 = 0, $321 = 0, $322 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $331 = 0, $332 = 0, $333 = 0, $335 = 0, $336 = 0, $340 = 0, $341 = 0, $345 = 0, $346 = 0, $39 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Amask = 0, $Amask$i = 0, $Amask1041 = 0, $Amask1264$i = 0, $Amask1365 = 0, $Amask1708$i = 0, $Bloss = 0, $Bloss$i = 0, $Bloss1192$i = 0, $Bloss1293 = 0, $Bloss1636$i = 0, $Bloss969 = 0, $Bmask1086 = 0, $Bmask1195$i = 0, $Bmask1315$i = 0, $Bmask972 = 0, $Bshift = 0, $Bshift$i = 0, $Bshift1197$i = 0, $Bshift1298 = 0, $Bshift1641$i = 0, $Bshift974 = 0, $Gloss = 0, $Gloss$i = 0, $Gloss1182$i = 0, $Gloss1283 = 0, $Gloss1626$i = 0, $Gloss959 = 0, $Gmask1084 = 0, $Gmask1185$i = 0, $Gmask1313$i = 0, $Gmask962 = 0, $Gshift = 0, $Gshift$i = 0, $Gshift1187$i = 0, $Gshift1288 = 0, $Gshift1631$i = 0, $Gshift964 = 0, $Rloss = 0, $Rloss$i = 0, $Rloss1172$i = 0, $Rloss1273 = 0, $Rloss1616$i = 0, $Rloss949 = 0, $Rmask1083 = 0, $Rmask1175$i = 0, $Rmask1312$i = 0, $Rmask952 = 0, $Rshift = 0, $Rshift$i = 0, $Rshift1177$i = 0, $Rshift1278 = 0, $Rshift1621$i = 0, $Rshift954 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr100 = 0, $add$ptr1105$i = 0, $add$ptr1115 = 0, $add$ptr1179 = 0, $add$ptr1252 = 0, $add$ptr1345$i = 0, $add$ptr1352$i = 0, $add$ptr1456$i = 0, $add$ptr153 = 0, $add$ptr154$i = 0, $add$ptr1569$i = 0, $add$ptr16 = 0, $add$ptr193 = 0, $add$ptr235 = 0, $add$ptr236$i = 0, $add$ptr277 = 0, $add$ptr330$i = 0, $add$ptr337$i = 0, $add$ptr340 = 0, $add$ptr345 = 0, $add$ptr366$i = 0, $add$ptr368$i = 0, $add$ptr40 = 0, $add$ptr461 = 0, $add$ptr498$i = 0, $add$ptr550 = 0, $add$ptr558 = 0, $add$ptr6$i = 0, $add$ptr620$i = 0, $add$ptr627$i = 0, $add$ptr658$i = 0, $add$ptr661$i = 0, $add$ptr685 = 0, $add$ptr70 = 0, $add$ptr72$i = 0, $add$ptr761 = 0, $add$ptr8 = 0, $add$ptr802$i = 0, $add$ptr908 = 0, $add$ptr918$i = 0, $add1095$i = 0, $add1102$i = 0, $add1112 = 0, $add1125$i = 0, $add1176 = 0, $add1249 = 0, $add1342$i = 0, $add1349$i = 0, $add1372$i = 0, $add144$i = 0, $add1453$i = 0, $add1476$i = 0, $add150 = 0, $add151$i = 0, $add1559$i = 0, $add1566$i = 0, $add1589$i = 0, $add174$i = 0, $add190 = 0, $add20$i = 0, $add226$i = 0, $add232 = 0, $add233$i = 0, $add256$i = 0, $add274 = 0, $add327$i = 0, $add334$i = 0, $add337 = 0, $add357$i = 0, $add37 = 0, $add4$i = 0, $add458 = 0, $add495$i = 0, $add518$i = 0, $add547 = 0, $add617$i = 0, $add62$i = 0, $add624$i = 0, $add647$i = 0, $add67 = 0, $add682 = 0, $add69$i = 0, $add758 = 0, $add799$i = 0, $add822$i = 0, $add905 = 0, $add908$i = 0, $add915$i = 0, $add92$i = 0, $add938$i = 0, $add97 = 0, $and1196 = 0, $and1203 = 0, $and1499$i = 0, $and1506$i = 0, $and483 = 0, $and488 = 0, $and546$i = 0, $and551$i = 0, $and710 = 0, $and715 = 0, $and853$i = 0, $and858$i = 0, $arrayidx1162$i = 0, $arrayidx1165$i = 0, $arrayidx939 = 0, $arrayidx942 = 0, $cleanup$dest$slot$0 = 0, $cleanup$dest$slot$0$i = 0, $cleanup$dest$slot$1 = 0, $cleanup$dest$slot$10$i = 0, $cleanup$dest$slot$12$i = 0, $cleanup$dest$slot$14$i = 0, $cleanup$dest$slot$16$i = 0, $cleanup$dest$slot$18$i = 0, $cleanup$dest$slot$2 = 0, $cleanup$dest$slot$2$i = 0, $cleanup$dest$slot$20$i = 0, $cleanup$dest$slot$22$i = 0, $cleanup$dest$slot$3 = 0, $cleanup$dest$slot$4 = 0, $cleanup$dest$slot$4$i = 0, $cleanup$dest$slot$6$i = 0, $cleanup$dest$slot$8$i = 0, $conv1003$i = 0, $conv1008 = 0, $conv1013$i = 0, $conv1104$i = 0, $conv1114 = 0, $conv1178 = 0, $conv1178$i = 0, $conv1188$i = 0, $conv1198$i = 0, $conv1211$i = 0, $conv1221$i = 0, $conv1231$i = 0, $conv1251 = 0, $conv1279 = 0, $conv1289 = 0, $conv129 = 0, $conv1299 = 0, $conv1312 = 0, $conv1322 = 0, $conv1332 = 0, $conv1351$i = 0, $conv1455$i = 0, $conv15 = 0, $conv152 = 0, $conv153$i = 0, $conv1568$i = 0, $conv1622$i = 0, $conv1632$i = 0, $conv1642$i = 0, $conv1655$i = 0, $conv1665$i = 0, $conv1675$i = 0, $conv192 = 0, $conv234 = 0, $conv235$i = 0, $conv276 = 0, $conv336$i = 0, $conv339 = 0, $conv39 = 0, $conv460 = 0, $conv476 = 0, $conv478 = 0, $conv497$i = 0, $conv5$i = 0, $conv539$i = 0, $conv541$i = 0, $conv549 = 0, $conv626$i = 0, $conv684 = 0, $conv69 = 0, $conv702 = 0, $conv704 = 0, $conv71$i = 0, $conv760 = 0, $conv776 = 0, $conv777 = 0, $conv781 = 0, $conv789 = 0, $conv797 = 0, $conv801$i = 0, $conv810 = 0, $conv820 = 0, $conv830 = 0, $conv845$i = 0, $conv847$i = 0, $conv907 = 0, $conv917$i = 0, $conv955 = 0, $conv959$i = 0, $conv960$i = 0, $conv964$i = 0, $conv965 = 0, $conv972$i = 0, $conv975 = 0, $conv980$i = 0, $conv988 = 0, $conv99 = 0, $conv993$i = 0, $conv998 = 0, $dec = 0, $dec114 = 0, $dec54 = 0, $dec84 = 0, $dst$01058$i = 0, $dst$0764 = 0, $dst$1 = 0, $dst$1$i = 0, $dst$2$lcssa = 0, $dst$2$lcssa$i = 0, $dst$21062$i = 0, $dst$2768 = 0, $dst1121$0750 = 0, $dst1137$01089$i = 0, $dst1185$0754 = 0, $dst1258$0758 = 0, $dst1384$01044$i = 0, $dst1488$01048$i = 0, $dst1601$01052$i = 0, $dst466$0774 = 0, $dst529$01068$i = 0, $dst556$0778 = 0, $dst556$1 = 0, $dst556$2$lcssa = 0, $dst556$2782 = 0, $dst659$01072$i = 0, $dst659$1$i = 0, $dst659$2$lcssa$i = 0, $dst659$21076$i = 0, $dst691$0789 = 0, $dst767$0762 = 0, $dst834$01083$i = 0, $dst914$0795 = 0, $dst950$01056$i = 0, $dstbuf$0$ph = 0, $dstbuf$12$ph = 0, $dstbuf$15$ph = 0, $dstbuf$18$ph = 0, $dstbuf$21$ph = 0, $dstbuf$24$ph = 0, $dstbuf$27$ph = 0, $dstbuf$3$ph = 0, $dstbuf$30$ph = 0, $dstbuf$33$ph = 0, $dstbuf$36$ph = 0, $dstbuf$6$ph = 0, $dstbuf$9$ph = 0, $dstbuf$addr$0$i$ph = 0, $dstbuf$addr$12$i$ph = 0, $dstbuf$addr$15$i$ph = 0, $dstbuf$addr$18$i$ph = 0, $dstbuf$addr$21$i$ph = 0, $dstbuf$addr$24$i$ph = 0, $dstbuf$addr$27$i$ph = 0, $dstbuf$addr$3$i$ph = 0, $dstbuf$addr$30$i$ph = 0, $dstbuf$addr$33$i$ph = 0, $dstbuf$addr$36$i$ph = 0, $dstbuf$addr$6$i$ph = 0, $dstbuf$addr$9$i$ph = 0, $i$01070$i = 0, $i$0776 = 0, $i1119$0748 = 0, $i1133$01087$i = 0, $i1183$0752 = 0, $i1256$0756 = 0, $i1380$01042$i = 0, $i1484$01046$i = 0, $i1597$01050$i = 0, $i689$0791 = 0, $i765$0760 = 0, $i830$01085$i = 0, $i912$0793 = 0, $i946$01054$i = 0, $idxprom = 0, $idxprom$i$phi$trans$insert = 0, $idxprom1173$i = 0, $idxprom1183$i = 0, $idxprom1193$i = 0, $idxprom1274 = 0, $idxprom1284 = 0, $idxprom1294 = 0, $idxprom1617$i$phi$trans$insert = 0, $idxprom1627$i$phi$trans$insert = 0, $idxprom1637$i$phi$trans$insert = 0, $idxprom785 = 0, $idxprom793 = 0, $idxprom950 = 0, $idxprom960 = 0, $idxprom968$i$phi$trans$insert = 0, $idxprom970 = 0, $idxprom976$i$phi$trans$insert = 0, $len$0$i = 0, $len1112$0$i = 0, $len1359$0$i = 0, $len1463$0$i = 0, $len1576$0$i = 0, $len161$0$i = 0, $len243$0$i = 0, $len344$0$i = 0, $len505$0$i = 0, $len634$0$i = 0, $len79$0$i = 0, $len809$0$i = 0, $len925$0$i = 0, $linecount$0$i$ph = 0, $linecount$0$ph = 0, $linecount1088$0$i$ph = 0, $linecount1106$0$ph = 0, $linecount1170$0$ph = 0, $linecount1243$0$ph = 0, $linecount1335$0$i$ph = 0, $linecount137$0$i$ph = 0, $linecount1439$0$i$ph = 0, $linecount1552$0$i$ph = 0, $linecount184$0$ph = 0, $linecount219$0$i$ph = 0, $linecount226$0$ph = 0, $linecount268$0$ph = 0, $linecount320$0$i$ph = 0, $linecount331$0$ph = 0, $linecount452$0$ph = 0, $linecount481$0$i$ph = 0, $linecount541$0$ph = 0, $linecount55$0$i$ph = 0, $linecount610$0$i$ph = 0, $linecount676$0$ph = 0, $linecount752$0$ph = 0, $linecount785$0$i$ph = 0, $linecount899$0$ph = 0, $linecount901$0$i$ph = 0, $mul198 = 0, $mul240 = 0, $mul282 = 0, $n$01060$i = 0, $n$0766 = 0, $n$1 = 0, $n$1$i = 0, $n$2$lcssa = 0, $n$2$lcssa$i = 0, $n$21064$i = 0, $n$2770 = 0, $n554$0780 = 0, $n554$1 = 0, $n554$2$lcssa = 0, $n554$2784 = 0, $n655$01074$i = 0, $n655$1$i = 0, $n655$2$lcssa$i = 0, $n655$21078$i = 0, $ofs$0 = 0, $ofs$0$i = 0, $ofs$0$i$be = 0, $ofs$1 = 0, $ofs$1$i = 0, $ofs$10 = 0, $ofs$11 = 0, $ofs$12 = 0, $ofs$13 = 0, $ofs$14 = 0, $ofs$15 = 0, $ofs$2 = 0, $ofs$3 = 0, $ofs$4 = 0, $ofs$5 = 0, $ofs$6 = 0, $ofs$7 = 0, $ofs$8 = 0, $ofs$9 = 0, $ofs1090$0$i = 0, $ofs1090$0$i$be = 0, $ofs1090$1$i = 0, $ofs1108$0 = 0, $ofs1108$1 = 0, $ofs1172$0 = 0, $ofs1172$1 = 0, $ofs1245$0 = 0, $ofs1245$1 = 0, $ofs1337$0$i = 0, $ofs1337$0$i$be = 0, $ofs1337$1$i = 0, $ofs139$0$i = 0, $ofs139$0$i$be = 0, $ofs139$1$i = 0, $ofs1441$0$i = 0, $ofs1441$0$i$be = 0, $ofs1441$1$i = 0, $ofs146$0 = 0, $ofs146$1 = 0, $ofs1554$0$i = 0, $ofs1554$1$i = 0, $ofs186$0 = 0, $ofs186$1 = 0, $ofs221$0$i = 0, $ofs221$0$i$be = 0, $ofs221$1$i = 0, $ofs228$0 = 0, $ofs228$1 = 0, $ofs270$0 = 0, $ofs270$1 = 0, $ofs322$0$i = 0, $ofs322$0$i$be = 0, $ofs322$1$i = 0, $ofs333$0 = 0, $ofs333$1 = 0, $ofs454$0 = 0, $ofs454$1 = 0, $ofs483$0$i = 0, $ofs483$0$i$be = 0, $ofs483$1$i = 0, $ofs543$0 = 0, $ofs543$1 = 0, $ofs57$0$i = 0, $ofs57$0$i$be = 0, $ofs57$1$i = 0, $ofs612$0$i = 0, $ofs612$0$i$be = 0, $ofs612$1$i = 0, $ofs678$0 = 0, $ofs678$1 = 0, $ofs754$0 = 0, $ofs754$1 = 0, $ofs787$0$i = 0, $ofs787$0$i$be = 0, $ofs787$1$i = 0, $ofs901$0 = 0, $ofs901$1 = 0, $ofs903$0$i = 0, $ofs903$0$i$be = 0, $ofs903$1$i = 0, $or1042 = 0, $or1161$i = 0, $or1171$i = 0, $or1265$i = 0, $or303$i = 0, $or313 = 0, $or938 = 0, $or948 = 0, $pitch = 0, $retval$0 = 0, $scevgep1103$i = 0, $scevgep1107$i = 0, $scevgep840 = 0, $scevgep845 = 0, $shl1026 = 0, $shl1032 = 0, $shl1039 = 0, $shl1249$i = 0, $shl1255$i = 0, $shl1262$i = 0, $shl1350 = 0, $shl1356 = 0, $shl1363 = 0, $shl1693$i = 0, $shl1699$i = 0, $shl1706$i = 0, $shl848 = 0, $shl854 = 0, $shl861 = 0, $shr469 = 0, $shr532$i = 0, $shr695 = 0, $shr838$i = 0, $spec$select930$i = 0, $spec$select931$i = 0, $spec$select934$i = 0, $spec$select935$i = 0, $spec$select936$i = 0, $spec$select937$i = 0, $spec$select940$i = 0, $spec$select941$i = 0, $spec$select942$i = 0, $src$01059$i = 0, $src$0765 = 0, $src$1 = 0, $src$1$i = 0, $src$2$lcssa = 0, $src$2$lcssa$i = 0, $src$21063$i = 0, $src$2769 = 0, $src1120$0749 = 0, $src1134$01088$i = 0, $src1184$0753 = 0, $src1257$0757 = 0, $src1381$01043$i = 0, $src1485$01047$i = 0, $src1598$01051$i = 0, $src465$0775 = 0, $src526$01069$i = 0, $src555$0779 = 0, $src555$1 = 0, $src555$2$lcssa = 0, $src555$2783 = 0, $src656$01073$i = 0, $src656$1$i = 0, $src656$2$lcssa$i = 0, $src656$21077$i = 0, $src690$0790 = 0, $src766$0761 = 0, $src831$01084$i = 0, $src913$0794 = 0, $src947$01055$i = 0, $srcbuf$0 = 0, $srcbuf$1 = 0, $srcbuf$10 = 0, $srcbuf$11 = 0, $srcbuf$13 = 0, $srcbuf$13707 = 0, $srcbuf$14 = 0, $srcbuf$14$ph = 0, $srcbuf$15 = 0, $srcbuf$17 = 0, $srcbuf$17$ph = 0, $srcbuf$18 = 0, $srcbuf$2 = 0, $srcbuf$20 = 0, $srcbuf$20$ph = 0, $srcbuf$21 = 0, $srcbuf$23 = 0, $srcbuf$23$ph = 0, $srcbuf$24 = 0, $srcbuf$26 = 0, $srcbuf$26$ph = 0, $srcbuf$27 = 0, $srcbuf$29 = 0, $srcbuf$29$ph = 0, $srcbuf$3 = 0, $srcbuf$30 = 0, $srcbuf$32 = 0, $srcbuf$32$ph = 0, $srcbuf$33 = 0, $srcbuf$35 = 0, $srcbuf$35$ph = 0, $srcbuf$36 = 0, $srcbuf$38 = 0, $srcbuf$38$ph = 0, $srcbuf$39 = 0, $srcbuf$4 = 0, $srcbuf$41 = 0, $srcbuf$41$ph = 0, $srcbuf$42 = 0, $srcbuf$44 = 0, $srcbuf$44$ph = 0, $srcbuf$45 = 0, $srcbuf$47 = 0, $srcbuf$47$ph = 0, $srcbuf$48 = 0, $srcbuf$5 = 0, $srcbuf$50 = 0, $srcbuf$50$ph = 0, $srcbuf$51 = 0, $srcbuf$6 = 0, $srcbuf$7 = 0, $srcbuf$8 = 0, $srcbuf$9 = 0, $srcbuf$addr$0$i = 0, $srcbuf$addr$0$i$be = 0, $srcbuf$addr$0$i$ph = 0, $srcbuf$addr$1$i = 0, $srcbuf$addr$10$i = 0, $srcbuf$addr$12$i = 0, $srcbuf$addr$12$i$be = 0, $srcbuf$addr$12$i$ph = 0, $srcbuf$addr$13$i = 0, $srcbuf$addr$15$i = 0, $srcbuf$addr$15$i$be = 0, $srcbuf$addr$15$i$ph = 0, $srcbuf$addr$16$i = 0, $srcbuf$addr$18$i = 0, $srcbuf$addr$18$i$be = 0, $srcbuf$addr$18$i$ph = 0, $srcbuf$addr$19$i = 0, $srcbuf$addr$21$i = 0, $srcbuf$addr$21$i$be = 0, $srcbuf$addr$21$i$ph = 0, $srcbuf$addr$22$i = 0, $srcbuf$addr$24$i = 0, $srcbuf$addr$24$i$be = 0, $srcbuf$addr$24$i$ph = 0, $srcbuf$addr$25$i = 0, $srcbuf$addr$27$i = 0, $srcbuf$addr$27$i$be = 0, $srcbuf$addr$27$i$ph = 0, $srcbuf$addr$28$i = 0, $srcbuf$addr$3$i = 0, $srcbuf$addr$3$i$be = 0, $srcbuf$addr$3$i$ph = 0, $srcbuf$addr$30$i = 0, $srcbuf$addr$30$i$be = 0, $srcbuf$addr$30$i$ph = 0, $srcbuf$addr$31$i = 0, $srcbuf$addr$33$i = 0, $srcbuf$addr$33$i$be = 0, $srcbuf$addr$33$i$ph = 0, $srcbuf$addr$34$i = 0, $srcbuf$addr$36$i = 0, $srcbuf$addr$36$i$ph = 0, $srcbuf$addr$37$i = 0, $srcbuf$addr$4$i = 0, $srcbuf$addr$6$i = 0, $srcbuf$addr$6$i$be = 0, $srcbuf$addr$6$i$ph = 0, $srcbuf$addr$7$i = 0, $srcbuf$addr$9$i = 0, $srcbuf$addr$9$i$be = 0, $srcbuf$addr$9$i$ph = 0, $start$0$i = 0, $start1111$0$i = 0, $start1358$0$i = 0, $start1462$0$i = 0, $start1575$0$i = 0, $start160$0$i = 0, $start242$0$i = 0, $start343$0$i = 0, $start504$0$i = 0, $start633$0$i = 0, $start78$0$i = 0, $start808$0$i = 0, $start924$0$i = 0, $sub$i = 0, $sub1114$i = 0, $sub1119$i = 0, $sub1126$i = 0, $sub1361$i = 0, $sub1366$i = 0, $sub1373$i = 0, $sub1465$i = 0, $sub1470$i = 0, $sub1477$i = 0, $sub15$i = 0, $sub1578$i = 0, $sub1583$i = 0, $sub1590$i = 0, $sub163$i = 0, $sub168$i = 0, $sub175$i = 0, $sub21$i = 0, $sub245$i = 0, $sub250$i = 0, $sub257$i = 0, $sub346$i = 0, $sub351$i = 0, $sub358$i = 0, $sub507$i = 0, $sub512$i = 0, $sub519$i = 0, $sub636$i = 0, $sub641$i = 0, $sub648$i = 0, $sub81$i = 0, $sub811$i = 0, $sub816$i = 0, $sub823$i = 0, $sub86$i = 0, $sub927$i = 0, $sub93$i = 0, $sub932$i = 0, $sub939$i = 0, $vskip$0 = 0, $vskip$1 = 0, $vskip$10 = 0, $vskip$11 = 0, $vskip$2 = 0, $vskip$3 = 0, $vskip$4 = 0, $vskip$5 = 0, $vskip$6 = 0, $vskip$7 = 0, $vskip$8 = 0, $vskip$9 = 0, $w1 = 0, label = 0;
 $w1 = $surf_src + 8 | 0;
 $0 = HEAP32[$w1 >> 2] | 0;
 if (HEAP32[$surf_dst >> 2] & 2 | 0) if ((_SDL_LockSurface($surf_dst) | 0) < 0) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 $pitch = $surf_dst + 16 | 0;
 $5 = HEAP32[$pitch >> 2] | 0;
 $add$ptr = (HEAP32[$surf_dst + 20 >> 2] | 0) + (Math_imul($5, HEAP32[$dstrect + 4 >> 2] | 0) | 0) | 0;
 $6 = HEAP32[$surf_src + 4 >> 2] | 0;
 $7 = HEAP8[$6 + 9 >> 0] | 0;
 $add$ptr8 = $add$ptr + (Math_imul(HEAP32[$dstrect >> 2] | 0, $7 & 255) | 0) | 0;
 $8 = HEAP32[$surf_src + 52 >> 2] | 0;
 $9 = HEAP32[$8 + 12 >> 2] | 0;
 $10 = HEAP32[$srcrect + 4 >> 2] | 0;
 L5 : do if (!$10) {
  $srcbuf$13707 = $9;
  label = 38;
 } else {
  L7 : do switch ($7 << 24 >> 24) {
  case 1:
   {
    $ofs$0 = 0;
    $srcbuf$0 = $9;
    $vskip$0 = $10;
    while (1) {
     $add = $ofs$0 + (HEAPU8[$srcbuf$0 >> 0] | 0) | 0;
     $12 = HEAP8[$srcbuf$0 + 1 >> 0] | 0;
     $conv15 = $12 & 255;
     $add$ptr16 = $srcbuf$0 + 2 | 0;
     if (!($12 << 24 >> 24)) if (!$add) {
      $cleanup$dest$slot$0 = 5;
      $ofs$3 = 0;
      $srcbuf$2 = $add$ptr16;
      $vskip$2 = $vskip$0;
     } else {
      $ofs$1 = $add;
      $srcbuf$1 = $add$ptr16;
      label = 12;
     } else {
      $ofs$1 = $add + $conv15 | 0;
      $srcbuf$1 = $add$ptr16 + $conv15 | 0;
      label = 12;
     }
     do if ((label | 0) == 12) {
      label = 0;
      if (($ofs$1 | 0) == ($0 | 0)) {
       $dec = $vskip$0 + -1 | 0;
       if (!$dec) {
        $cleanup$dest$slot$0 = 3;
        $ofs$3 = 0;
        $srcbuf$2 = $srcbuf$1;
        $vskip$2 = 0;
        break;
       } else {
        $ofs$2 = 0;
        $vskip$1 = $dec;
       }
      } else {
       $ofs$2 = $ofs$1;
       $vskip$1 = $vskip$0;
      }
      $cleanup$dest$slot$0 = 0;
      $ofs$3 = $ofs$2;
      $srcbuf$2 = $srcbuf$1;
      $vskip$2 = $vskip$1;
     } while (0);
     switch ($cleanup$dest$slot$0 & 7) {
     case 3:
      {
       $srcbuf$13707 = $srcbuf$2;
       label = 38;
       break L5;
       break;
      }
     case 0:
      {
       $ofs$0 = $ofs$3;
       $srcbuf$0 = $srcbuf$2;
       $vskip$0 = $vskip$2;
       break;
      }
     default:
      {
       $cleanup$dest$slot$4 = $cleanup$dest$slot$0;
       $srcbuf$13 = $srcbuf$2;
       break L7;
      }
     }
    }
    break;
   }
  case 2:
   {
    $ofs$4 = 0;
    $srcbuf$3 = $9;
    $vskip$3 = $10;
    while (1) {
     $add37 = $ofs$4 + (HEAPU8[$srcbuf$3 >> 0] | 0) | 0;
     $14 = HEAP8[$srcbuf$3 + 1 >> 0] | 0;
     $conv39 = $14 & 255;
     $add$ptr40 = $srcbuf$3 + 2 | 0;
     if (!($14 << 24 >> 24)) if (!$add37) {
      $cleanup$dest$slot$1 = 5;
      $ofs$7 = 0;
      $srcbuf$5 = $add$ptr40;
      $vskip$5 = $vskip$3;
     } else {
      $ofs$5 = $add37;
      $srcbuf$4 = $add$ptr40;
      label = 19;
     } else {
      $ofs$5 = $add37 + $conv39 | 0;
      $srcbuf$4 = $add$ptr40 + ($conv39 << 1) | 0;
      label = 19;
     }
     do if ((label | 0) == 19) {
      label = 0;
      if (($ofs$5 | 0) == ($0 | 0)) {
       $dec54 = $vskip$3 + -1 | 0;
       if (!$dec54) {
        $cleanup$dest$slot$1 = 6;
        $ofs$7 = 0;
        $srcbuf$5 = $srcbuf$4;
        $vskip$5 = 0;
        break;
       } else {
        $ofs$6 = 0;
        $vskip$4 = $dec54;
       }
      } else {
       $ofs$6 = $ofs$5;
       $vskip$4 = $vskip$3;
      }
      $cleanup$dest$slot$1 = 0;
      $ofs$7 = $ofs$6;
      $srcbuf$5 = $srcbuf$4;
      $vskip$5 = $vskip$4;
     } while (0);
     switch ($cleanup$dest$slot$1 & 7) {
     case 6:
      {
       $srcbuf$13707 = $srcbuf$5;
       label = 38;
       break L5;
       break;
      }
     case 0:
      {
       $ofs$4 = $ofs$7;
       $srcbuf$3 = $srcbuf$5;
       $vskip$3 = $vskip$5;
       break;
      }
     default:
      {
       $cleanup$dest$slot$4 = $cleanup$dest$slot$1;
       $srcbuf$13 = $srcbuf$5;
       break L7;
      }
     }
    }
    break;
   }
  case 3:
   {
    $ofs$8 = 0;
    $srcbuf$6 = $9;
    $vskip$6 = $10;
    while (1) {
     $add67 = $ofs$8 + (HEAPU8[$srcbuf$6 >> 0] | 0) | 0;
     $16 = HEAP8[$srcbuf$6 + 1 >> 0] | 0;
     $conv69 = $16 & 255;
     $add$ptr70 = $srcbuf$6 + 2 | 0;
     if (!($16 << 24 >> 24)) if (!$add67) {
      $cleanup$dest$slot$2 = 5;
      $ofs$11 = 0;
      $srcbuf$8 = $add$ptr70;
      $vskip$8 = $vskip$6;
     } else {
      $ofs$9 = $add67;
      $srcbuf$7 = $add$ptr70;
      label = 26;
     } else {
      $ofs$9 = $add67 + $conv69 | 0;
      $srcbuf$7 = $add$ptr70 + ($conv69 * 3 | 0) | 0;
      label = 26;
     }
     do if ((label | 0) == 26) {
      label = 0;
      if (($ofs$9 | 0) == ($0 | 0)) {
       $dec84 = $vskip$6 + -1 | 0;
       if (!$dec84) {
        $cleanup$dest$slot$2 = 8;
        $ofs$11 = 0;
        $srcbuf$8 = $srcbuf$7;
        $vskip$8 = 0;
        break;
       } else {
        $ofs$10 = 0;
        $vskip$7 = $dec84;
       }
      } else {
       $ofs$10 = $ofs$9;
       $vskip$7 = $vskip$6;
      }
      $cleanup$dest$slot$2 = 0;
      $ofs$11 = $ofs$10;
      $srcbuf$8 = $srcbuf$7;
      $vskip$8 = $vskip$7;
     } while (0);
     switch ($cleanup$dest$slot$2 & 15) {
     case 8:
      {
       $srcbuf$13707 = $srcbuf$8;
       label = 38;
       break L5;
       break;
      }
     case 0:
      {
       $ofs$8 = $ofs$11;
       $srcbuf$6 = $srcbuf$8;
       $vskip$6 = $vskip$8;
       break;
      }
     default:
      {
       $cleanup$dest$slot$4 = $cleanup$dest$slot$2;
       $srcbuf$13 = $srcbuf$8;
       break L7;
      }
     }
    }
    break;
   }
  case 4:
   {
    $ofs$12 = 0;
    $srcbuf$9 = $9;
    $vskip$9 = $10;
    while (1) {
     $add97 = $ofs$12 + (HEAPU16[$srcbuf$9 >> 1] | 0) | 0;
     $18 = HEAP16[$srcbuf$9 + 2 >> 1] | 0;
     $conv99 = $18 & 65535;
     $add$ptr100 = $srcbuf$9 + 4 | 0;
     if (!($18 << 16 >> 16)) if (!$add97) {
      $cleanup$dest$slot$3 = 5;
      $ofs$15 = 0;
      $srcbuf$11 = $add$ptr100;
      $vskip$11 = $vskip$9;
     } else {
      $ofs$13 = $add97;
      $srcbuf$10 = $add$ptr100;
      label = 33;
     } else {
      $ofs$13 = $add97 + $conv99 | 0;
      $srcbuf$10 = $add$ptr100 + ($conv99 << 2) | 0;
      label = 33;
     }
     do if ((label | 0) == 33) {
      label = 0;
      if (($ofs$13 | 0) == ($0 | 0)) {
       $dec114 = $vskip$9 + -1 | 0;
       if (!$dec114) {
        $cleanup$dest$slot$3 = 10;
        $ofs$15 = 0;
        $srcbuf$11 = $srcbuf$10;
        $vskip$11 = 0;
        break;
       } else {
        $ofs$14 = 0;
        $vskip$10 = $dec114;
       }
      } else {
       $ofs$14 = $ofs$13;
       $vskip$10 = $vskip$9;
      }
      $cleanup$dest$slot$3 = 0;
      $ofs$15 = $ofs$14;
      $srcbuf$11 = $srcbuf$10;
      $vskip$11 = $vskip$10;
     } while (0);
     switch ($cleanup$dest$slot$3 & 15) {
     case 10:
      {
       $srcbuf$13707 = $srcbuf$11;
       label = 38;
       break L5;
       break;
      }
     case 0:
      {
       $ofs$12 = $ofs$15;
       $srcbuf$9 = $srcbuf$11;
       $vskip$9 = $vskip$11;
       break;
      }
     default:
      {
       $cleanup$dest$slot$4 = $cleanup$dest$slot$3;
       $srcbuf$13 = $srcbuf$11;
       break L7;
      }
     }
    }
    break;
   }
  default:
   {
    $srcbuf$13707 = $9;
    label = 38;
    break L5;
   }
  } while (0);
  switch ($cleanup$dest$slot$4 | 0) {
  case 0:
   {
    $srcbuf$13707 = $srcbuf$13;
    label = 38;
    break L5;
    break;
   }
  case 5:
   {
    break L5;
    break;
   }
  default:
   $retval$0 = 0;
  }
  return $retval$0 | 0;
 } while (0);
 L58 : do if ((label | 0) == 38) {
  $19 = HEAP8[$8 + 79 >> 0] | 0;
  $conv129 = $19 & 255;
  $20 = HEAP32[$srcrect >> 2] | 0;
  if (!$20) if ((HEAP32[$srcrect + 8 >> 2] | 0) == (HEAP32[$w1 >> 2] | 0)) {
   if ($19 << 24 >> 24 == -1) switch ($7 << 24 >> 24) {
   case 1:
    {
     $dstbuf$0$ph = $add$ptr8;
     $linecount$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$14$ph = $srcbuf$13707;
     while (1) {
      $ofs146$0 = 0;
      $srcbuf$14 = $srcbuf$14$ph;
      while (1) {
       $add150 = $ofs146$0 + (HEAPU8[$srcbuf$14 >> 0] | 0) | 0;
       $188 = HEAP8[$srcbuf$14 + 1 >> 0] | 0;
       $conv152 = $188 & 255;
       $add$ptr153 = $srcbuf$14 + 2 | 0;
       if (!($188 << 24 >> 24)) if (!$add150) break L58; else {
        $ofs146$1 = $add150;
        $srcbuf$15 = $add$ptr153;
       } else {
        _SDL_memcpy($dstbuf$0$ph + $add150 | 0, $add$ptr153, $conv152) | 0;
        $ofs146$1 = $add150 + $conv152 | 0;
        $srcbuf$15 = $add$ptr153 + $conv152 | 0;
       }
       if (($ofs146$1 | 0) == ($0 | 0)) break; else {
        $ofs146$0 = $ofs146$1;
        $srcbuf$14 = $srcbuf$15;
       }
      }
      $linecount$0$ph = $linecount$0$ph + -1 | 0;
      if (!$linecount$0$ph) break L58; else {
       $dstbuf$0$ph = $dstbuf$0$ph + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$14$ph = $srcbuf$15;
      }
     }
     break;
    }
   case 2:
    {
     $dstbuf$3$ph = $add$ptr8;
     $linecount184$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$17$ph = $srcbuf$13707;
     while (1) {
      $ofs186$0 = 0;
      $srcbuf$17 = $srcbuf$17$ph;
      while (1) {
       $add190 = $ofs186$0 + (HEAPU8[$srcbuf$17 >> 0] | 0) | 0;
       $192 = HEAP8[$srcbuf$17 + 1 >> 0] | 0;
       $conv192 = $192 & 255;
       $add$ptr193 = $srcbuf$17 + 2 | 0;
       if (!($192 << 24 >> 24)) if (!$add190) break L58; else {
        $ofs186$1 = $add190;
        $srcbuf$18 = $add$ptr193;
       } else {
        $mul198 = $conv192 << 1;
        _SDL_memcpy($dstbuf$3$ph + ($add190 << 1) | 0, $add$ptr193, $mul198) | 0;
        $ofs186$1 = $add190 + $conv192 | 0;
        $srcbuf$18 = $add$ptr193 + $mul198 | 0;
       }
       if (($ofs186$1 | 0) == ($0 | 0)) break; else {
        $ofs186$0 = $ofs186$1;
        $srcbuf$17 = $srcbuf$18;
       }
      }
      $linecount184$0$ph = $linecount184$0$ph + -1 | 0;
      if (!$linecount184$0$ph) break L58; else {
       $dstbuf$3$ph = $dstbuf$3$ph + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$17$ph = $srcbuf$18;
      }
     }
     break;
    }
   case 3:
    {
     $dstbuf$6$ph = $add$ptr8;
     $linecount226$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$20$ph = $srcbuf$13707;
     while (1) {
      $ofs228$0 = 0;
      $srcbuf$20 = $srcbuf$20$ph;
      while (1) {
       $add232 = $ofs228$0 + (HEAPU8[$srcbuf$20 >> 0] | 0) | 0;
       $196 = HEAP8[$srcbuf$20 + 1 >> 0] | 0;
       $conv234 = $196 & 255;
       $add$ptr235 = $srcbuf$20 + 2 | 0;
       if (!($196 << 24 >> 24)) if (!$add232) break L58; else {
        $ofs228$1 = $add232;
        $srcbuf$21 = $add$ptr235;
       } else {
        $mul240 = $conv234 * 3 | 0;
        _SDL_memcpy($dstbuf$6$ph + ($add232 * 3 | 0) | 0, $add$ptr235, $mul240) | 0;
        $ofs228$1 = $add232 + $conv234 | 0;
        $srcbuf$21 = $add$ptr235 + $mul240 | 0;
       }
       if (($ofs228$1 | 0) == ($0 | 0)) break; else {
        $ofs228$0 = $ofs228$1;
        $srcbuf$20 = $srcbuf$21;
       }
      }
      $linecount226$0$ph = $linecount226$0$ph + -1 | 0;
      if (!$linecount226$0$ph) break L58; else {
       $dstbuf$6$ph = $dstbuf$6$ph + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$20$ph = $srcbuf$21;
      }
     }
     break;
    }
   case 4:
    {
     $dstbuf$9$ph = $add$ptr8;
     $linecount268$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$23$ph = $srcbuf$13707;
     while (1) {
      $ofs270$0 = 0;
      $srcbuf$23 = $srcbuf$23$ph;
      while (1) {
       $add274 = $ofs270$0 + (HEAPU16[$srcbuf$23 >> 1] | 0) | 0;
       $200 = HEAP16[$srcbuf$23 + 2 >> 1] | 0;
       $conv276 = $200 & 65535;
       $add$ptr277 = $srcbuf$23 + 4 | 0;
       if (!($200 << 16 >> 16)) if (!$add274) break L58; else {
        $ofs270$1 = $add274;
        $srcbuf$24 = $add$ptr277;
       } else {
        $mul282 = $conv276 << 2;
        _SDL_memcpy($dstbuf$9$ph + ($add274 << 2) | 0, $add$ptr277, $mul282) | 0;
        $ofs270$1 = $add274 + $conv276 | 0;
        $srcbuf$24 = $add$ptr277 + $mul282 | 0;
       }
       if (($ofs270$1 | 0) == ($0 | 0)) break; else {
        $ofs270$0 = $ofs270$1;
        $srcbuf$23 = $srcbuf$24;
       }
      }
      $linecount268$0$ph = $linecount268$0$ph + -1 | 0;
      if (!$linecount268$0$ph) break L58; else {
       $dstbuf$9$ph = $dstbuf$9$ph + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$23$ph = $srcbuf$24;
      }
     }
     break;
    }
   default:
    break L58;
   }
   switch ($7 << 24 >> 24) {
   case 4:
    {
     $Rmask1083 = $6 + 12 | 0;
     $315 = HEAP32[$Rmask1083 >> 2] | 0;
     $Gmask1084 = $6 + 16 | 0;
     $316 = HEAP32[$Gmask1084 >> 2] | 0;
     $Bmask1086 = $6 + 20 | 0;
     $317 = HEAP32[$Bmask1086 >> 2] | 0;
     if (($316 | $315 | $317 | 0) == 16777215) if (($315 | 0) == 65280 | ($316 | 0) == 65280 | ($317 | 0) == 65280) {
      $318 = HEAP32[$srcrect + 12 >> 2] | 0;
      if ($19 << 24 >> 24 == -128) {
       $dstbuf$30$ph = $add$ptr8;
       $linecount1106$0$ph = $318;
       $srcbuf$44$ph = $srcbuf$13707;
       while (1) {
        $ofs1108$0 = 0;
        $srcbuf$44 = $srcbuf$44$ph;
        while (1) {
         $add1112 = $ofs1108$0 + (HEAPU16[$srcbuf$44 >> 1] | 0) | 0;
         $320 = HEAP16[$srcbuf$44 + 2 >> 1] | 0;
         $conv1114 = $320 & 65535;
         $add$ptr1115 = $srcbuf$44 + 4 | 0;
         if (!($320 << 16 >> 16)) if (!$add1112) break L58; else {
          $ofs1108$1 = $add1112;
          $srcbuf$45 = $add$ptr1115;
         } else {
          $dst1121$0750 = $dstbuf$30$ph + ($add1112 << 2) | 0;
          $i1119$0748 = 0;
          $src1120$0749 = $add$ptr1115;
          while (1) {
           $321 = HEAP32[$src1120$0749 >> 2] | 0;
           $322 = HEAP32[$dst1121$0750 >> 2] | 0;
           HEAP32[$dst1121$0750 >> 2] = ((($322 & 16711422) + ($321 & 16711422) | 0) >>> 1) + ($321 & 65793 & $322);
           $i1119$0748 = $i1119$0748 + 1 | 0;
           if (($i1119$0748 | 0) == ($conv1114 | 0)) break; else {
            $dst1121$0750 = $dst1121$0750 + 4 | 0;
            $src1120$0749 = $src1120$0749 + 4 | 0;
           }
          }
          $ofs1108$1 = $add1112 + $conv1114 | 0;
          $srcbuf$45 = $add$ptr1115 + ($conv1114 << 2) | 0;
         }
         if (($ofs1108$1 | 0) == ($0 | 0)) break; else {
          $ofs1108$0 = $ofs1108$1;
          $srcbuf$44 = $srcbuf$45;
         }
        }
        $linecount1106$0$ph = $linecount1106$0$ph + -1 | 0;
        if (!$linecount1106$0$ph) break L58; else {
         $dstbuf$30$ph = $dstbuf$30$ph + (HEAP32[$pitch >> 2] | 0) | 0;
         $srcbuf$44$ph = $srcbuf$45;
        }
       }
      } else {
       $dstbuf$33$ph = $add$ptr8;
       $linecount1170$0$ph = $318;
       $srcbuf$47$ph = $srcbuf$13707;
       while (1) {
        $ofs1172$0 = 0;
        $srcbuf$47 = $srcbuf$47$ph;
        while (1) {
         $add1176 = $ofs1172$0 + (HEAPU16[$srcbuf$47 >> 1] | 0) | 0;
         $325 = HEAP16[$srcbuf$47 + 2 >> 1] | 0;
         $conv1178 = $325 & 65535;
         $add$ptr1179 = $srcbuf$47 + 4 | 0;
         if (!($325 << 16 >> 16)) if (!$add1176) break L58; else {
          $ofs1172$1 = $add1176;
          $srcbuf$48 = $add$ptr1179;
         } else {
          $dst1185$0754 = $dstbuf$33$ph + ($add1176 << 2) | 0;
          $i1183$0752 = 0;
          $src1184$0753 = $add$ptr1179;
          while (1) {
           $326 = HEAP32[$src1184$0753 >> 2] | 0;
           $327 = HEAP32[$dst1185$0754 >> 2] | 0;
           $and1196 = $327 & 16711935;
           $and1203 = $327 & 65280;
           HEAP32[$dst1185$0754 >> 2] = ((Math_imul(($326 & 16711935) - $and1196 | 0, $conv129) | 0) >>> 8) + $and1196 & 16711935 | ((Math_imul(($326 & 65280) - $and1203 | 0, $conv129) | 0) >>> 8) + $and1203 & 65280;
           $i1183$0752 = $i1183$0752 + 1 | 0;
           if (($i1183$0752 | 0) == ($conv1178 | 0)) break; else {
            $dst1185$0754 = $dst1185$0754 + 4 | 0;
            $src1184$0753 = $src1184$0753 + 4 | 0;
           }
          }
          $ofs1172$1 = $add1176 + $conv1178 | 0;
          $srcbuf$48 = $add$ptr1179 + ($conv1178 << 2) | 0;
         }
         if (($ofs1172$1 | 0) == ($0 | 0)) break; else {
          $ofs1172$0 = $ofs1172$1;
          $srcbuf$47 = $srcbuf$48;
         }
        }
        $linecount1170$0$ph = $linecount1170$0$ph + -1 | 0;
        if (!$linecount1170$0$ph) break L58; else {
         $dstbuf$33$ph = $dstbuf$33$ph + (HEAP32[$pitch >> 2] | 0) | 0;
         $srcbuf$47$ph = $srcbuf$48;
        }
       }
      }
     }
     $Rloss1273 = $6 + 28 | 0;
     $Rshift1278 = $6 + 32 | 0;
     $Gloss1283 = $6 + 29 | 0;
     $Gshift1288 = $6 + 33 | 0;
     $Bloss1293 = $6 + 30 | 0;
     $Bshift1298 = $6 + 34 | 0;
     $Amask1365 = $6 + 24 | 0;
     $dstbuf$36$ph = $add$ptr8;
     $linecount1243$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$50$ph = $srcbuf$13707;
     while (1) {
      $ofs1245$0 = 0;
      $srcbuf$50 = $srcbuf$50$ph;
      while (1) {
       $add1249 = $ofs1245$0 + (HEAPU16[$srcbuf$50 >> 1] | 0) | 0;
       $331 = HEAP16[$srcbuf$50 + 2 >> 1] | 0;
       $conv1251 = $331 & 65535;
       $add$ptr1252 = $srcbuf$50 + 4 | 0;
       if (!($331 << 16 >> 16)) if (!$add1249) break L58; else {
        $ofs1245$1 = $add1249;
        $srcbuf$51 = $add$ptr1252;
       } else {
        $dst1258$0758 = $dstbuf$36$ph + ($add1249 << 2) | 0;
        $i1256$0756 = 0;
        $src1257$0757 = $add$ptr1252;
        while (1) {
         $332 = HEAP32[$src1257$0757 >> 2] | 0;
         $333 = HEAP32[$dst1258$0758 >> 2] | 0;
         $idxprom1274 = HEAPU8[$Rloss1273 >> 0] | 0;
         $335 = HEAP32[992 + ($idxprom1274 << 2) >> 2] | 0;
         $336 = HEAP32[$Rmask1083 >> 2] | 0;
         $conv1279 = HEAPU8[$Rshift1278 >> 0] | 0;
         $idxprom1284 = HEAPU8[$Gloss1283 >> 0] | 0;
         $340 = HEAP32[992 + ($idxprom1284 << 2) >> 2] | 0;
         $341 = HEAP32[$Gmask1084 >> 2] | 0;
         $conv1289 = HEAPU8[$Gshift1288 >> 0] | 0;
         $idxprom1294 = HEAPU8[$Bloss1293 >> 0] | 0;
         $345 = HEAP32[992 + ($idxprom1294 << 2) >> 2] | 0;
         $346 = HEAP32[$Bmask1086 >> 2] | 0;
         $conv1299 = HEAPU8[$Bshift1298 >> 0] | 0;
         $conv1312 = HEAPU8[$335 + (($336 & $333) >>> $conv1279) >> 0] | 0;
         $conv1322 = HEAPU8[$340 + (($341 & $333) >>> $conv1289) >> 0] | 0;
         $conv1332 = HEAPU8[$345 + (($346 & $333) >>> $conv1299) >> 0] | 0;
         $shl1350 = (((Math_imul((HEAPU8[$335 + (($336 & $332) >>> $conv1279) >> 0] | 0) - $conv1312 | 0, $conv129) | 0) >>> 8) + $conv1312 | 0) >>> $idxprom1274 << $conv1279;
         $shl1356 = (((Math_imul((HEAPU8[$340 + (($341 & $332) >>> $conv1289) >> 0] | 0) - $conv1322 | 0, $conv129) | 0) >>> 8) + $conv1322 | 0) >>> $idxprom1284 << $conv1289;
         $shl1363 = (((Math_imul((HEAPU8[$345 + (($346 & $332) >>> $conv1299) >> 0] | 0) - $conv1332 | 0, $conv129) | 0) >>> 8) + $conv1332 | 0) >>> $idxprom1294 << $conv1299;
         HEAP32[$dst1258$0758 >> 2] = $shl1350 | HEAP32[$Amask1365 >> 2] | $shl1356 | $shl1363;
         $i1256$0756 = $i1256$0756 + 1 | 0;
         if (($i1256$0756 | 0) == ($conv1251 | 0)) break; else {
          $dst1258$0758 = $dst1258$0758 + 4 | 0;
          $src1257$0757 = $src1257$0757 + 4 | 0;
         }
        }
        $ofs1245$1 = $add1249 + $conv1251 | 0;
        $srcbuf$51 = $add$ptr1252 + ($conv1251 << 2) | 0;
       }
       if (($ofs1245$1 | 0) == ($0 | 0)) break; else {
        $ofs1245$0 = $ofs1245$1;
        $srcbuf$50 = $srcbuf$51;
       }
      }
      $linecount1243$0$ph = $linecount1243$0$ph + -1 | 0;
      if (!$linecount1243$0$ph) break L58; else {
       $dstbuf$36$ph = $dstbuf$36$ph + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$50$ph = $srcbuf$51;
      }
     }
     break;
    }
   case 2:
    {
     $202 = HEAP32[$6 + 12 >> 2] | 0;
     $203 = HEAP32[$6 + 16 >> 2] | 0;
     $204 = HEAP32[$6 + 20 >> 2] | 0;
     $or313 = $203 | $202 | $204;
     L153 : do if (($or313 | 0) < 65535) {
      switch ($or313 | 0) {
      case 32767:
       break;
      default:
       break L153;
      }
      if (($202 | 0) == 992 | ($203 | 0) == 992 | ($204 | 0) == 992) {
       $235 = HEAP32[$srcrect + 12 >> 2] | 0;
       if ($19 << 24 >> 24 != -128) {
        $shr695 = $conv129 >>> 3;
        $dstbuf$21$ph = $add$ptr8;
        $linecount676$0$ph = $235;
        $srcbuf$35$ph = $srcbuf$13707;
        while (1) {
         $ofs678$0 = 0;
         $srcbuf$35 = $srcbuf$35$ph;
         while (1) {
          $add682 = $ofs678$0 + (HEAPU8[$srcbuf$35 >> 0] | 0) | 0;
          $262 = HEAP8[$srcbuf$35 + 1 >> 0] | 0;
          $conv684 = $262 & 255;
          $add$ptr685 = $srcbuf$35 + 2 | 0;
          if (!($262 << 24 >> 24)) if (!$add682) break L58; else {
           $ofs678$1 = $add682;
           $srcbuf$36 = $add$ptr685;
          } else {
           $dst691$0789 = $dstbuf$21$ph + ($add682 << 1) | 0;
           $i689$0791 = 0;
           $src690$0790 = $add$ptr685;
           while (1) {
            $conv702 = HEAPU16[$src690$0790 >> 1] | 0;
            $conv704 = HEAPU16[$dst691$0789 >> 1] | 0;
            $and710 = ($conv704 << 16 | $conv704) & 65043487;
            $and715 = ((Math_imul((($conv702 << 16 | $conv702) & 65043487) - $and710 | 0, $shr695) | 0) >>> 5) + $and710 & 65043487;
            HEAP16[$dst691$0789 >> 1] = $and715 >>> 16 | $and715;
            $i689$0791 = $i689$0791 + 1 | 0;
            if (($i689$0791 | 0) == ($conv684 | 0)) break; else {
             $dst691$0789 = $dst691$0789 + 2 | 0;
             $src690$0790 = $src690$0790 + 2 | 0;
            }
           }
           $ofs678$1 = $add682 + $conv684 | 0;
           $srcbuf$36 = $add$ptr685 + ($conv684 << 1) | 0;
          }
          if (($ofs678$1 | 0) == ($0 | 0)) break; else {
           $ofs678$0 = $ofs678$1;
           $srcbuf$35 = $srcbuf$36;
          }
         }
         $linecount676$0$ph = $linecount676$0$ph + -1 | 0;
         if (!$linecount676$0$ph) break L58; else {
          $dstbuf$21$ph = $dstbuf$21$ph + $5 | 0;
          $srcbuf$35$ph = $srcbuf$36;
         }
        }
       }
       $dstbuf$18$ph = $add$ptr8;
       $linecount541$0$ph = $235;
       $srcbuf$32$ph = $srcbuf$13707;
       while (1) {
        $ofs543$0 = 0;
        $srcbuf$32 = $srcbuf$32$ph;
        while (1) {
         $add547 = $ofs543$0 + (HEAPU8[$srcbuf$32 >> 0] | 0) | 0;
         $237 = HEAP8[$srcbuf$32 + 1 >> 0] | 0;
         $conv549 = $237 & 255;
         $add$ptr550 = $srcbuf$32 + 2 | 0;
         if (!($237 << 24 >> 24)) if (!$add547) break L58; else {
          $ofs543$1 = $add547;
          $srcbuf$33 = $add$ptr550;
         } else {
          $add$ptr558 = $dstbuf$18$ph + ($add547 << 1) | 0;
          $238 = $add$ptr550;
          do if (!(($add$ptr558 ^ $238) & 3)) {
           if (!($238 & 3)) {
            $dst556$1 = $add$ptr558;
            $n554$1 = $conv549;
            $src555$1 = $add$ptr550;
           } else {
            $245 = HEAP16[$add$ptr550 >> 1] | 0;
            $246 = HEAP16[$add$ptr558 >> 1] | 0;
            HEAP16[$add$ptr558 >> 1] = ((($246 & -1058 & 65535) + ($245 & -1058 & 65535) | 0) >>> 1) + ($245 & 1057 & $246 & 65535);
            $dst556$1 = $add$ptr558 + 2 | 0;
            $n554$1 = $conv549 + -1 | 0;
            $src555$1 = $srcbuf$32 + 4 | 0;
           }
           if ($n554$1 >>> 0 > 1) {
            $250 = $n554$1 + -2 | 0;
            $251 = $250 & -2;
            $scevgep845 = $dst556$1 + 4 + ($251 << 1) | 0;
            $dst556$2782 = $dst556$1;
            $n554$2784 = $n554$1;
            $src555$2783 = $src555$1;
            while (1) {
             $252 = HEAP32[$src555$2783 >> 2] | 0;
             $253 = HEAP32[$dst556$2782 >> 2] | 0;
             HEAP32[$dst556$2782 >> 2] = ($252 & 69272609 & $253) + ($252 >>> 1 & 2112847343) + ($253 >>> 1 & 2112847343);
             $n554$2784 = $n554$2784 + -2 | 0;
             if ($n554$2784 >>> 0 <= 1) break; else {
              $dst556$2782 = $dst556$2782 + 4 | 0;
              $src555$2783 = $src555$2783 + 4 | 0;
             }
            }
            $dst556$2$lcssa = $scevgep845;
            $n554$2$lcssa = $250 - $251 | 0;
            $src555$2$lcssa = $src555$1 + 4 + ($251 << 1) | 0;
           } else {
            $dst556$2$lcssa = $dst556$1;
            $n554$2$lcssa = $n554$1;
            $src555$2$lcssa = $src555$1;
           }
           if (!$n554$2$lcssa) break;
           $255 = HEAP16[$src555$2$lcssa >> 1] | 0;
           $256 = HEAP16[$dst556$2$lcssa >> 1] | 0;
           HEAP16[$dst556$2$lcssa >> 1] = ((($256 & -1058 & 65535) + ($255 & -1058 & 65535) | 0) >>> 1) + ($255 & 1057 & $256 & 65535);
          } else {
           $dst556$0778 = $add$ptr558;
           $n554$0780 = $conv549;
           $src555$0779 = $add$ptr550;
           while (1) {
            $n554$0780 = $n554$0780 + -1 | 0;
            $240 = HEAP16[$src555$0779 >> 1] | 0;
            $241 = HEAP16[$dst556$0778 >> 1] | 0;
            HEAP16[$dst556$0778 >> 1] = ((($241 & -1058 & 65535) + ($240 & -1058 & 65535) | 0) >>> 1) + ($240 & 1057 & $241 & 65535);
            if (!$n554$0780) break; else {
             $dst556$0778 = $dst556$0778 + 2 | 0;
             $src555$0779 = $src555$0779 + 2 | 0;
            }
           }
          } while (0);
          $ofs543$1 = $add547 + $conv549 | 0;
          $srcbuf$33 = $add$ptr550 + ($conv549 << 1) | 0;
         }
         if (($ofs543$1 | 0) == ($0 | 0)) break; else {
          $ofs543$0 = $ofs543$1;
          $srcbuf$32 = $srcbuf$33;
         }
        }
        $linecount541$0$ph = $linecount541$0$ph + -1 | 0;
        if (!$linecount541$0$ph) break L58; else {
         $dstbuf$18$ph = $dstbuf$18$ph + (HEAP32[$pitch >> 2] | 0) | 0;
         $srcbuf$32$ph = $srcbuf$33;
        }
       }
      }
     } else {
      switch ($or313 | 0) {
      case 65535:
       break;
      default:
       break L153;
      }
      if (($202 | 0) == 2016 | ($203 | 0) == 2016 | ($204 | 0) == 2016) {
       $205 = HEAP32[$srcrect + 12 >> 2] | 0;
       if ($19 << 24 >> 24 != -128) {
        $shr469 = $conv129 >>> 3;
        $dstbuf$15$ph = $add$ptr8;
        $linecount452$0$ph = $205;
        $srcbuf$29$ph = $srcbuf$13707;
        while (1) {
         $ofs454$0 = 0;
         $srcbuf$29 = $srcbuf$29$ph;
         while (1) {
          $add458 = $ofs454$0 + (HEAPU8[$srcbuf$29 >> 0] | 0) | 0;
          $232 = HEAP8[$srcbuf$29 + 1 >> 0] | 0;
          $conv460 = $232 & 255;
          $add$ptr461 = $srcbuf$29 + 2 | 0;
          if (!($232 << 24 >> 24)) if (!$add458) break L58; else {
           $ofs454$1 = $add458;
           $srcbuf$30 = $add$ptr461;
          } else {
           $dst466$0774 = $dstbuf$15$ph + ($add458 << 1) | 0;
           $i$0776 = 0;
           $src465$0775 = $add$ptr461;
           while (1) {
            $conv476 = HEAPU16[$src465$0775 >> 1] | 0;
            $conv478 = HEAPU16[$dst466$0774 >> 1] | 0;
            $and483 = ($conv478 << 16 | $conv478) & 132184095;
            $and488 = ((Math_imul((($conv476 << 16 | $conv476) & 132184095) - $and483 | 0, $shr469) | 0) >>> 5) + $and483 & 132184095;
            HEAP16[$dst466$0774 >> 1] = $and488 >>> 16 | $and488;
            $i$0776 = $i$0776 + 1 | 0;
            if (($i$0776 | 0) == ($conv460 | 0)) break; else {
             $dst466$0774 = $dst466$0774 + 2 | 0;
             $src465$0775 = $src465$0775 + 2 | 0;
            }
           }
           $ofs454$1 = $add458 + $conv460 | 0;
           $srcbuf$30 = $add$ptr461 + ($conv460 << 1) | 0;
          }
          if (($ofs454$1 | 0) == ($0 | 0)) break; else {
           $ofs454$0 = $ofs454$1;
           $srcbuf$29 = $srcbuf$30;
          }
         }
         $linecount452$0$ph = $linecount452$0$ph + -1 | 0;
         if (!$linecount452$0$ph) break L58; else {
          $dstbuf$15$ph = $dstbuf$15$ph + $5 | 0;
          $srcbuf$29$ph = $srcbuf$30;
         }
        }
       }
       $dstbuf$12$ph = $add$ptr8;
       $linecount331$0$ph = $205;
       $srcbuf$26$ph = $srcbuf$13707;
       while (1) {
        $ofs333$0 = 0;
        $srcbuf$26 = $srcbuf$26$ph;
        while (1) {
         $add337 = $ofs333$0 + (HEAPU8[$srcbuf$26 >> 0] | 0) | 0;
         $207 = HEAP8[$srcbuf$26 + 1 >> 0] | 0;
         $conv339 = $207 & 255;
         $add$ptr340 = $srcbuf$26 + 2 | 0;
         if (!($207 << 24 >> 24)) if (!$add337) break L58; else {
          $ofs333$1 = $add337;
          $srcbuf$27 = $add$ptr340;
         } else {
          $add$ptr345 = $dstbuf$12$ph + ($add337 << 1) | 0;
          $208 = $add$ptr340;
          do if (!(($add$ptr345 ^ $208) & 3)) {
           if (!($208 & 3)) {
            $dst$1 = $add$ptr345;
            $n$1 = $conv339;
            $src$1 = $add$ptr340;
           } else {
            $215 = HEAP16[$add$ptr340 >> 1] | 0;
            $216 = HEAP16[$add$ptr345 >> 1] | 0;
            HEAP16[$add$ptr345 >> 1] = ((($216 & -2082 & 65535) + ($215 & -2082 & 65535) | 0) >>> 1) + ($215 & 2081 & $216 & 65535);
            $dst$1 = $add$ptr345 + 2 | 0;
            $n$1 = $conv339 + -1 | 0;
            $src$1 = $srcbuf$26 + 4 | 0;
           }
           if ($n$1 >>> 0 > 1) {
            $220 = $n$1 + -2 | 0;
            $221 = $220 & -2;
            $scevgep840 = $dst$1 + 4 + ($221 << 1) | 0;
            $dst$2768 = $dst$1;
            $n$2770 = $n$1;
            $src$2769 = $src$1;
            while (1) {
             $222 = HEAP32[$src$2769 >> 2] | 0;
             $223 = HEAP32[$dst$2768 >> 2] | 0;
             HEAP32[$dst$2768 >> 2] = ($222 & 136382497 & $223) + ($222 >>> 1 & 2079292399) + ($223 >>> 1 & 2079292399);
             $n$2770 = $n$2770 + -2 | 0;
             if ($n$2770 >>> 0 <= 1) break; else {
              $dst$2768 = $dst$2768 + 4 | 0;
              $src$2769 = $src$2769 + 4 | 0;
             }
            }
            $dst$2$lcssa = $scevgep840;
            $n$2$lcssa = $220 - $221 | 0;
            $src$2$lcssa = $src$1 + 4 + ($221 << 1) | 0;
           } else {
            $dst$2$lcssa = $dst$1;
            $n$2$lcssa = $n$1;
            $src$2$lcssa = $src$1;
           }
           if (!$n$2$lcssa) break;
           $225 = HEAP16[$src$2$lcssa >> 1] | 0;
           $226 = HEAP16[$dst$2$lcssa >> 1] | 0;
           HEAP16[$dst$2$lcssa >> 1] = ((($226 & -2082 & 65535) + ($225 & -2082 & 65535) | 0) >>> 1) + ($225 & 2081 & $226 & 65535);
          } else {
           $dst$0764 = $add$ptr345;
           $n$0766 = $conv339;
           $src$0765 = $add$ptr340;
           while (1) {
            $n$0766 = $n$0766 + -1 | 0;
            $210 = HEAP16[$src$0765 >> 1] | 0;
            $211 = HEAP16[$dst$0764 >> 1] | 0;
            HEAP16[$dst$0764 >> 1] = ((($211 & -2082 & 65535) + ($210 & -2082 & 65535) | 0) >>> 1) + ($210 & 2081 & $211 & 65535);
            if (!$n$0766) break; else {
             $dst$0764 = $dst$0764 + 2 | 0;
             $src$0765 = $src$0765 + 2 | 0;
            }
           }
          } while (0);
          $ofs333$1 = $add337 + $conv339 | 0;
          $srcbuf$27 = $add$ptr340 + ($conv339 << 1) | 0;
         }
         if (($ofs333$1 | 0) == ($0 | 0)) break; else {
          $ofs333$0 = $ofs333$1;
          $srcbuf$26 = $srcbuf$27;
         }
        }
        $linecount331$0$ph = $linecount331$0$ph + -1 | 0;
        if (!$linecount331$0$ph) break L58; else {
         $dstbuf$12$ph = $dstbuf$12$ph + (HEAP32[$pitch >> 2] | 0) | 0;
         $srcbuf$26$ph = $srcbuf$27;
        }
       }
      }
     } while (0);
     $Rloss = $6 + 28 | 0;
     $Rshift = $6 + 32 | 0;
     $Gloss = $6 + 29 | 0;
     $Gshift = $6 + 33 | 0;
     $Bloss = $6 + 30 | 0;
     $Bshift = $6 + 34 | 0;
     $Amask = $6 + 24 | 0;
     $dstbuf$24$ph = $add$ptr8;
     $linecount752$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$38$ph = $srcbuf$13707;
     while (1) {
      $ofs754$0 = 0;
      $srcbuf$38 = $srcbuf$38$ph;
      while (1) {
       $add758 = $ofs754$0 + (HEAPU8[$srcbuf$38 >> 0] | 0) | 0;
       $267 = HEAP8[$srcbuf$38 + 1 >> 0] | 0;
       $conv760 = $267 & 255;
       $add$ptr761 = $srcbuf$38 + 2 | 0;
       if (!($267 << 24 >> 24)) if (!$add758) break L58; else {
        $ofs754$1 = $add758;
        $srcbuf$39 = $add$ptr761;
       } else {
        $dst767$0762 = $dstbuf$24$ph + ($add758 << 1) | 0;
        $i765$0760 = 0;
        $src766$0761 = $add$ptr761;
        while (1) {
         $conv776 = HEAPU16[$src766$0761 >> 1] | 0;
         $conv777 = HEAPU16[$dst767$0762 >> 1] | 0;
         $idxprom = HEAPU8[$Rloss >> 0] | 0;
         $271 = HEAP32[992 + ($idxprom << 2) >> 2] | 0;
         $conv781 = HEAPU8[$Rshift >> 0] | 0;
         $idxprom785 = HEAPU8[$Gloss >> 0] | 0;
         $275 = HEAP32[992 + ($idxprom785 << 2) >> 2] | 0;
         $conv789 = HEAPU8[$Gshift >> 0] | 0;
         $idxprom793 = HEAPU8[$Bloss >> 0] | 0;
         $279 = HEAP32[992 + ($idxprom793 << 2) >> 2] | 0;
         $conv797 = HEAPU8[$Bshift >> 0] | 0;
         $conv810 = HEAPU8[$271 + (($202 & $conv777) >>> $conv781) >> 0] | 0;
         $conv820 = HEAPU8[$275 + (($203 & $conv777) >>> $conv789) >> 0] | 0;
         $conv830 = HEAPU8[$279 + (($204 & $conv777) >>> $conv797) >> 0] | 0;
         $shl848 = (((Math_imul((HEAPU8[$271 + (($202 & $conv776) >>> $conv781) >> 0] | 0) - $conv810 | 0, $conv129) | 0) >>> 8) + $conv810 | 0) >>> $idxprom << $conv781;
         $shl854 = (((Math_imul((HEAPU8[$275 + (($203 & $conv776) >>> $conv789) >> 0] | 0) - $conv820 | 0, $conv129) | 0) >>> 8) + $conv820 | 0) >>> $idxprom785 << $conv789;
         $shl861 = (((Math_imul((HEAPU8[$279 + (($204 & $conv776) >>> $conv797) >> 0] | 0) - $conv830 | 0, $conv129) | 0) >>> 8) + $conv830 | 0) >>> $idxprom793 << $conv797;
         HEAP16[$dst767$0762 >> 1] = $shl848 | HEAP32[$Amask >> 2] | $shl854 | $shl861;
         $i765$0760 = $i765$0760 + 1 | 0;
         if (($i765$0760 | 0) == ($conv760 | 0)) break; else {
          $dst767$0762 = $dst767$0762 + 2 | 0;
          $src766$0761 = $src766$0761 + 2 | 0;
         }
        }
        $ofs754$1 = $add758 + $conv760 | 0;
        $srcbuf$39 = $add$ptr761 + ($conv760 << 1) | 0;
       }
       if (($ofs754$1 | 0) == ($0 | 0)) break; else {
        $ofs754$0 = $ofs754$1;
        $srcbuf$38 = $srcbuf$39;
       }
      }
      $linecount752$0$ph = $linecount752$0$ph + -1 | 0;
      if (!$linecount752$0$ph) break L58; else {
       $dstbuf$24$ph = $dstbuf$24$ph + $5 | 0;
       $srcbuf$38$ph = $srcbuf$39;
      }
     }
     break;
    }
   case 3:
    {
     $Rloss949 = $6 + 28 | 0;
     $Rmask952 = $6 + 12 | 0;
     $Rshift954 = $6 + 32 | 0;
     $Gloss959 = $6 + 29 | 0;
     $Gmask962 = $6 + 16 | 0;
     $Gshift964 = $6 + 33 | 0;
     $Bloss969 = $6 + 30 | 0;
     $Bmask972 = $6 + 20 | 0;
     $Bshift974 = $6 + 34 | 0;
     $Amask1041 = $6 + 24 | 0;
     $dstbuf$27$ph = $add$ptr8;
     $linecount899$0$ph = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$41$ph = $srcbuf$13707;
     while (1) {
      $ofs901$0 = 0;
      $srcbuf$41 = $srcbuf$41$ph;
      while (1) {
       $add905 = $ofs901$0 + (HEAPU8[$srcbuf$41 >> 0] | 0) | 0;
       $288 = HEAP8[$srcbuf$41 + 1 >> 0] | 0;
       $conv907 = $288 & 255;
       $add$ptr908 = $srcbuf$41 + 2 | 0;
       if (!($288 << 24 >> 24)) if (!$add905) break L58; else {
        $ofs901$1 = $add905;
        $srcbuf$42 = $add$ptr908;
       } else {
        $dst914$0795 = $dstbuf$27$ph + ($add905 * 3 | 0) | 0;
        $i912$0793 = 0;
        $src913$0794 = $add$ptr908;
        while (1) {
         $or938 = (HEAPU8[$src913$0794 + 1 >> 0] | 0) << 8 | (HEAPU8[$src913$0794 + 2 >> 0] | 0) << 16 | (HEAPU8[$src913$0794 >> 0] | 0);
         $arrayidx939 = $dst914$0795 + 2 | 0;
         $arrayidx942 = $dst914$0795 + 1 | 0;
         $or948 = (HEAPU8[$arrayidx942 >> 0] | 0) << 8 | (HEAPU8[$arrayidx939 >> 0] | 0) << 16 | (HEAPU8[$dst914$0795 >> 0] | 0);
         $idxprom950 = HEAPU8[$Rloss949 >> 0] | 0;
         $296 = HEAP32[992 + ($idxprom950 << 2) >> 2] | 0;
         $297 = HEAP32[$Rmask952 >> 2] | 0;
         $conv955 = HEAPU8[$Rshift954 >> 0] | 0;
         $idxprom960 = HEAPU8[$Gloss959 >> 0] | 0;
         $301 = HEAP32[992 + ($idxprom960 << 2) >> 2] | 0;
         $302 = HEAP32[$Gmask962 >> 2] | 0;
         $conv965 = HEAPU8[$Gshift964 >> 0] | 0;
         $idxprom970 = HEAPU8[$Bloss969 >> 0] | 0;
         $306 = HEAP32[992 + ($idxprom970 << 2) >> 2] | 0;
         $307 = HEAP32[$Bmask972 >> 2] | 0;
         $conv975 = HEAPU8[$Bshift974 >> 0] | 0;
         $conv988 = HEAPU8[$296 + (($or948 & $297) >>> $conv955) >> 0] | 0;
         $conv998 = HEAPU8[$301 + (($302 & $or948) >>> $conv965) >> 0] | 0;
         $conv1008 = HEAPU8[$306 + (($307 & $or948) >>> $conv975) >> 0] | 0;
         $shl1026 = (((Math_imul((HEAPU8[$296 + (($297 & $or938) >>> $conv955) >> 0] | 0) - $conv988 | 0, $conv129) | 0) >>> 8) + $conv988 | 0) >>> $idxprom950 << $conv955;
         $shl1032 = (((Math_imul((HEAPU8[$301 + (($302 & $or938) >>> $conv965) >> 0] | 0) - $conv998 | 0, $conv129) | 0) >>> 8) + $conv998 | 0) >>> $idxprom960 << $conv965;
         $shl1039 = (((Math_imul((HEAPU8[$306 + (($307 & $or938) >>> $conv975) >> 0] | 0) - $conv1008 | 0, $conv129) | 0) >>> 8) + $conv1008 | 0) >>> $idxprom970 << $conv975;
         $or1042 = $shl1026 | HEAP32[$Amask1041 >> 2] | $shl1032 | $shl1039;
         HEAP8[$dst914$0795 >> 0] = $or1042;
         HEAP8[$arrayidx942 >> 0] = $or1042 >>> 8;
         HEAP8[$arrayidx939 >> 0] = $or1042 >>> 16;
         $i912$0793 = $i912$0793 + 1 | 0;
         if (($i912$0793 | 0) == ($conv907 | 0)) break; else {
          $dst914$0795 = $dst914$0795 + 3 | 0;
          $src913$0794 = $src913$0794 + 3 | 0;
         }
        }
        $ofs901$1 = $add905 + $conv907 | 0;
        $srcbuf$42 = $add$ptr908 + ($conv907 * 3 | 0) | 0;
       }
       if (($ofs901$1 | 0) == ($0 | 0)) break; else {
        $ofs901$0 = $ofs901$1;
        $srcbuf$41 = $srcbuf$42;
       }
      }
      $linecount899$0$ph = $linecount899$0$ph + -1 | 0;
      if (!$linecount899$0$ph) break L58; else {
       $dstbuf$27$ph = $dstbuf$27$ph + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$41$ph = $srcbuf$42;
      }
     }
     break;
    }
   default:
    break L58;
   }
  }
  $23 = HEAP32[$surf_dst + 4 >> 2] | 0;
  $24 = HEAP8[$23 + 9 >> 0] | 0;
  if ($19 << 24 >> 24 == -1) switch ($24 << 24 >> 24) {
  case 1:
   {
    $add$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $dstbuf$addr$0$i$ph = $add$ptr8 + (0 - $20) | 0;
    $linecount$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$0$i$ph = $srcbuf$13707;
    while (1) {
     $ofs$0$i = 0;
     $srcbuf$addr$0$i = $srcbuf$addr$0$i$ph;
     while (1) {
      $add4$i = $ofs$0$i + (HEAPU8[$srcbuf$addr$0$i >> 0] | 0) | 0;
      $28 = HEAP8[$srcbuf$addr$0$i + 1 >> 0] | 0;
      $conv5$i = $28 & 255;
      $add$ptr6$i = $srcbuf$addr$0$i + 2 | 0;
      L275 : do if (!($28 << 24 >> 24)) if (!$add4$i) break L58; else {
       $ofs$1$i = $add4$i;
       $srcbuf$addr$1$i = $add$ptr6$i;
       label = 52;
      } else {
       L278 : do if (($add4$i | 0) < ($add$i | 0)) {
        $sub$i = $20 - $add4$i | 0;
        if (($sub$i | 0) > 0) {
         $sub15$i = $conv5$i - $sub$i | 0;
         if (($sub15$i | 0) < 1) $cleanup$dest$slot$0$i = 9; else {
          $len$0$i = $sub15$i;
          $start$0$i = $sub$i;
          label = 48;
         }
        } else {
         $len$0$i = $conv5$i;
         $start$0$i = 0;
         label = 48;
        }
        if ((label | 0) == 48) {
         label = 0;
         $add20$i = $start$0$i + $add4$i | 0;
         $sub21$i = $add$i - $add20$i | 0;
         _SDL_memcpy($dstbuf$addr$0$i$ph + $add20$i | 0, $add$ptr6$i + $start$0$i | 0, ($len$0$i | 0) > ($sub21$i | 0) ? $sub21$i : $len$0$i) | 0;
         $cleanup$dest$slot$0$i = 0;
        }
        switch ($cleanup$dest$slot$0$i & 15) {
        case 9:
        case 0:
         {
          break L278;
          break;
         }
        default:
         {}
        }
        if (!$cleanup$dest$slot$0$i) {
         $ofs$0$i$be = $add4$i;
         $srcbuf$addr$0$i$be = $add$ptr6$i;
         break L275;
        } else break L58;
       } while (0);
       $ofs$1$i = $add4$i + $conv5$i | 0;
       $srcbuf$addr$1$i = $add$ptr6$i + $conv5$i | 0;
       label = 52;
      } while (0);
      if ((label | 0) == 52) {
       label = 0;
       if (($ofs$1$i | 0) == ($0 | 0)) break; else {
        $ofs$0$i$be = $ofs$1$i;
        $srcbuf$addr$0$i$be = $srcbuf$addr$1$i;
       }
      }
      $ofs$0$i = $ofs$0$i$be;
      $srcbuf$addr$0$i = $srcbuf$addr$0$i$be;
     }
     $linecount$0$i$ph = $linecount$0$i$ph + -1 | 0;
     if (!$linecount$0$i$ph) break L58; else {
      $dstbuf$addr$0$i$ph = $dstbuf$addr$0$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$0$i$ph = $srcbuf$addr$1$i;
     }
    }
    break;
   }
  case 2:
   {
    $add62$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $dstbuf$addr$3$i$ph = $add$ptr8 + (0 - ($20 << 1)) | 0;
    $linecount55$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$3$i$ph = $srcbuf$13707;
    while (1) {
     $ofs57$0$i = 0;
     $srcbuf$addr$3$i = $srcbuf$addr$3$i$ph;
     while (1) {
      $add69$i = $ofs57$0$i + (HEAPU8[$srcbuf$addr$3$i >> 0] | 0) | 0;
      $33 = HEAP8[$srcbuf$addr$3$i + 1 >> 0] | 0;
      $conv71$i = $33 & 255;
      $add$ptr72$i = $srcbuf$addr$3$i + 2 | 0;
      L296 : do if (!($33 << 24 >> 24)) if (!$add69$i) break L58; else {
       $ofs57$1$i = $add69$i;
       $srcbuf$addr$4$i = $add$ptr72$i;
       label = 66;
      } else {
       L299 : do if (($add69$i | 0) < ($add62$i | 0)) {
        $sub81$i = $20 - $add69$i | 0;
        if (($sub81$i | 0) > 0) {
         $sub86$i = $conv71$i - $sub81$i | 0;
         if (($sub86$i | 0) < 1) $cleanup$dest$slot$2$i = 14; else {
          $len79$0$i = $sub86$i;
          $start78$0$i = $sub81$i;
          label = 62;
         }
        } else {
         $len79$0$i = $conv71$i;
         $start78$0$i = 0;
         label = 62;
        }
        if ((label | 0) == 62) {
         label = 0;
         $add92$i = $start78$0$i + $add69$i | 0;
         $sub93$i = $add62$i - $add92$i | 0;
         _SDL_memcpy($dstbuf$addr$3$i$ph + ($add92$i << 1) | 0, $add$ptr72$i + ($start78$0$i << 1) | 0, (($len79$0$i | 0) > ($sub93$i | 0) ? $sub93$i : $len79$0$i) << 1) | 0;
         $cleanup$dest$slot$2$i = 0;
        }
        switch ($cleanup$dest$slot$2$i & 15) {
        case 14:
        case 0:
         {
          break L299;
          break;
         }
        default:
         {}
        }
        if (!$cleanup$dest$slot$2$i) {
         $ofs57$0$i$be = $add69$i;
         $srcbuf$addr$3$i$be = $add$ptr72$i;
         break L296;
        } else break L58;
       } while (0);
       $ofs57$1$i = $add69$i + $conv71$i | 0;
       $srcbuf$addr$4$i = $add$ptr72$i + ($conv71$i << 1) | 0;
       label = 66;
      } while (0);
      if ((label | 0) == 66) {
       label = 0;
       if (($ofs57$1$i | 0) == ($0 | 0)) break; else {
        $ofs57$0$i$be = $ofs57$1$i;
        $srcbuf$addr$3$i$be = $srcbuf$addr$4$i;
       }
      }
      $ofs57$0$i = $ofs57$0$i$be;
      $srcbuf$addr$3$i = $srcbuf$addr$3$i$be;
     }
     $linecount55$0$i$ph = $linecount55$0$i$ph + -1 | 0;
     if (!$linecount55$0$i$ph) break L58; else {
      $dstbuf$addr$3$i$ph = $dstbuf$addr$3$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$3$i$ph = $srcbuf$addr$4$i;
     }
    }
    break;
   }
  case 3:
   {
    $add144$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $dstbuf$addr$6$i$ph = $add$ptr8 + (Math_imul($20, -3) | 0) | 0;
    $linecount137$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$6$i$ph = $srcbuf$13707;
    while (1) {
     $ofs139$0$i = 0;
     $srcbuf$addr$6$i = $srcbuf$addr$6$i$ph;
     while (1) {
      $add151$i = $ofs139$0$i + (HEAPU8[$srcbuf$addr$6$i >> 0] | 0) | 0;
      $39 = HEAP8[$srcbuf$addr$6$i + 1 >> 0] | 0;
      $conv153$i = $39 & 255;
      $add$ptr154$i = $srcbuf$addr$6$i + 2 | 0;
      L317 : do if (!($39 << 24 >> 24)) if (!$add151$i) break L58; else {
       $ofs139$1$i = $add151$i;
       $srcbuf$addr$7$i = $add$ptr154$i;
       label = 80;
      } else {
       L320 : do if (($add151$i | 0) < ($add144$i | 0)) {
        $sub163$i = $20 - $add151$i | 0;
        if (($sub163$i | 0) > 0) {
         $sub168$i = $conv153$i - $sub163$i | 0;
         if (($sub168$i | 0) < 1) $cleanup$dest$slot$4$i = 19; else {
          $len161$0$i = $sub168$i;
          $start160$0$i = $sub163$i;
          label = 76;
         }
        } else {
         $len161$0$i = $conv153$i;
         $start160$0$i = 0;
         label = 76;
        }
        if ((label | 0) == 76) {
         label = 0;
         $add174$i = $start160$0$i + $add151$i | 0;
         $sub175$i = $add144$i - $add174$i | 0;
         _SDL_memcpy($dstbuf$addr$6$i$ph + ($add174$i * 3 | 0) | 0, $add$ptr154$i + ($start160$0$i * 3 | 0) | 0, (($len161$0$i | 0) > ($sub175$i | 0) ? $sub175$i : $len161$0$i) * 3 | 0) | 0;
         $cleanup$dest$slot$4$i = 0;
        }
        switch ($cleanup$dest$slot$4$i & 31) {
        case 19:
        case 0:
         {
          break L320;
          break;
         }
        default:
         {}
        }
        if (!$cleanup$dest$slot$4$i) {
         $ofs139$0$i$be = $add151$i;
         $srcbuf$addr$6$i$be = $add$ptr154$i;
         break L317;
        } else break L58;
       } while (0);
       $ofs139$1$i = $add151$i + $conv153$i | 0;
       $srcbuf$addr$7$i = $add$ptr154$i + ($conv153$i * 3 | 0) | 0;
       label = 80;
      } while (0);
      if ((label | 0) == 80) {
       label = 0;
       if (($ofs139$1$i | 0) == ($0 | 0)) break; else {
        $ofs139$0$i$be = $ofs139$1$i;
        $srcbuf$addr$6$i$be = $srcbuf$addr$7$i;
       }
      }
      $ofs139$0$i = $ofs139$0$i$be;
      $srcbuf$addr$6$i = $srcbuf$addr$6$i$be;
     }
     $linecount137$0$i$ph = $linecount137$0$i$ph + -1 | 0;
     if (!$linecount137$0$i$ph) break L58; else {
      $dstbuf$addr$6$i$ph = $dstbuf$addr$6$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$6$i$ph = $srcbuf$addr$7$i;
     }
    }
    break;
   }
  case 4:
   {
    $add226$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $dstbuf$addr$9$i$ph = $add$ptr8 + (0 - ($20 << 2)) | 0;
    $linecount219$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$9$i$ph = $srcbuf$13707;
    while (1) {
     $ofs221$0$i = 0;
     $srcbuf$addr$9$i = $srcbuf$addr$9$i$ph;
     while (1) {
      $add233$i = $ofs221$0$i + (HEAPU16[$srcbuf$addr$9$i >> 1] | 0) | 0;
      $44 = HEAP16[$srcbuf$addr$9$i + 2 >> 1] | 0;
      $conv235$i = $44 & 65535;
      $add$ptr236$i = $srcbuf$addr$9$i + 4 | 0;
      L338 : do if (!($44 << 16 >> 16)) if (!$add233$i) break L58; else {
       $ofs221$1$i = $add233$i;
       $srcbuf$addr$10$i = $add$ptr236$i;
       label = 94;
      } else {
       L341 : do if (($add233$i | 0) < ($add226$i | 0)) {
        $sub245$i = $20 - $add233$i | 0;
        if (($sub245$i | 0) > 0) {
         $sub250$i = $conv235$i - $sub245$i | 0;
         if (($sub250$i | 0) < 1) $cleanup$dest$slot$6$i = 24; else {
          $len243$0$i = $sub250$i;
          $start242$0$i = $sub245$i;
          label = 90;
         }
        } else {
         $len243$0$i = $conv235$i;
         $start242$0$i = 0;
         label = 90;
        }
        if ((label | 0) == 90) {
         label = 0;
         $add256$i = $start242$0$i + $add233$i | 0;
         $sub257$i = $add226$i - $add256$i | 0;
         _SDL_memcpy($dstbuf$addr$9$i$ph + ($add256$i << 2) | 0, $add$ptr236$i + ($start242$0$i << 2) | 0, (($len243$0$i | 0) > ($sub257$i | 0) ? $sub257$i : $len243$0$i) << 2) | 0;
         $cleanup$dest$slot$6$i = 0;
        }
        switch ($cleanup$dest$slot$6$i & 31) {
        case 24:
        case 0:
         {
          break L341;
          break;
         }
        default:
         {}
        }
        if (!$cleanup$dest$slot$6$i) {
         $ofs221$0$i$be = $add233$i;
         $srcbuf$addr$9$i$be = $add$ptr236$i;
         break L338;
        } else break L58;
       } while (0);
       $ofs221$1$i = $add233$i + $conv235$i | 0;
       $srcbuf$addr$10$i = $add$ptr236$i + ($conv235$i << 2) | 0;
       label = 94;
      } while (0);
      if ((label | 0) == 94) {
       label = 0;
       if (($ofs221$1$i | 0) == ($0 | 0)) break; else {
        $ofs221$0$i$be = $ofs221$1$i;
        $srcbuf$addr$9$i$be = $srcbuf$addr$10$i;
       }
      }
      $ofs221$0$i = $ofs221$0$i$be;
      $srcbuf$addr$9$i = $srcbuf$addr$9$i$be;
     }
     $linecount219$0$i$ph = $linecount219$0$i$ph + -1 | 0;
     if (!$linecount219$0$i$ph) break L58; else {
      $dstbuf$addr$9$i$ph = $dstbuf$addr$9$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$9$i$ph = $srcbuf$addr$10$i;
     }
    }
    break;
   }
  default:
   break L58;
  }
  switch ($24 << 24 >> 24) {
  case 4:
   {
    $Rmask1312$i = $23 + 12 | 0;
    $154 = HEAP32[$Rmask1312$i >> 2] | 0;
    $Gmask1313$i = $23 + 16 | 0;
    $155 = HEAP32[$Gmask1313$i >> 2] | 0;
    $Bmask1315$i = $23 + 20 | 0;
    $156 = HEAP32[$Bmask1315$i >> 2] | 0;
    if (($155 | $154 | $156 | 0) == 16777215) if (($154 | 0) == 65280 | ($155 | 0) == 65280 | ($156 | 0) == 65280) {
     $157 = HEAP32[$srcrect + 12 >> 2] | 0;
     $add1342$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
     $add$ptr1345$i = $add$ptr8 + (0 - ($20 << 2)) | 0;
     if ($19 << 24 >> 24 == -128) {
      $dstbuf$addr$30$i$ph = $add$ptr1345$i;
      $linecount1335$0$i$ph = $157;
      $srcbuf$addr$30$i$ph = $srcbuf$13707;
      while (1) {
       $ofs1337$0$i = 0;
       $srcbuf$addr$30$i = $srcbuf$addr$30$i$ph;
       while (1) {
        $add1349$i = $ofs1337$0$i + (HEAPU16[$srcbuf$addr$30$i >> 1] | 0) | 0;
        $160 = HEAP16[$srcbuf$addr$30$i + 2 >> 1] | 0;
        $conv1351$i = $160 & 65535;
        $add$ptr1352$i = $srcbuf$addr$30$i + 4 | 0;
        L366 : do if (!($160 << 16 >> 16)) if (!$add1349$i) break L58; else {
         $ofs1337$1$i = $add1349$i;
         $srcbuf$addr$31$i = $add$ptr1352$i;
         label = 234;
        } else {
         L369 : do if (($add1349$i | 0) < ($add1342$i | 0)) {
          $sub1361$i = $20 - $add1349$i | 0;
          if (($sub1361$i | 0) > 0) {
           $sub1366$i = $conv1351$i - $sub1361$i | 0;
           if (($sub1366$i | 0) < 1) $cleanup$dest$slot$20$i = 108; else {
            $len1359$0$i = $sub1366$i;
            $start1358$0$i = $sub1361$i;
            label = 228;
           }
          } else {
           $len1359$0$i = $conv1351$i;
           $start1358$0$i = 0;
           label = 228;
          }
          if ((label | 0) == 228) {
           label = 0;
           $add1372$i = $start1358$0$i + $add1349$i | 0;
           $sub1373$i = $add1342$i - $add1372$i | 0;
           $spec$select940$i = ($len1359$0$i | 0) > ($sub1373$i | 0) ? $sub1373$i : $len1359$0$i;
           if (($spec$select940$i | 0) > 0) {
            $dst1384$01044$i = $dstbuf$addr$30$i$ph + ($add1372$i << 2) | 0;
            $i1380$01042$i = 0;
            $src1381$01043$i = $add$ptr1352$i + ($start1358$0$i << 2) | 0;
            while (1) {
             $161 = HEAP32[$src1381$01043$i >> 2] | 0;
             $162 = HEAP32[$dst1384$01044$i >> 2] | 0;
             HEAP32[$dst1384$01044$i >> 2] = ((($162 & 16711422) + ($161 & 16711422) | 0) >>> 1) + ($161 & 65793 & $162);
             $i1380$01042$i = $i1380$01042$i + 1 | 0;
             if (($i1380$01042$i | 0) >= ($spec$select940$i | 0)) {
              $cleanup$dest$slot$20$i = 0;
              break;
             } else {
              $dst1384$01044$i = $dst1384$01044$i + 4 | 0;
              $src1381$01043$i = $src1381$01043$i + 4 | 0;
             }
            }
           } else $cleanup$dest$slot$20$i = 0;
          }
          switch ($cleanup$dest$slot$20$i & 127) {
          case 108:
          case 0:
           {
            break L369;
            break;
           }
          default:
           {}
          }
          if (!$cleanup$dest$slot$20$i) {
           $ofs1337$0$i$be = $add1349$i;
           $srcbuf$addr$30$i$be = $add$ptr1352$i;
           break L366;
          } else break L58;
         } while (0);
         $ofs1337$1$i = $add1349$i + $conv1351$i | 0;
         $srcbuf$addr$31$i = $add$ptr1352$i + ($conv1351$i << 2) | 0;
         label = 234;
        } while (0);
        if ((label | 0) == 234) {
         label = 0;
         if (($ofs1337$1$i | 0) == ($0 | 0)) break; else {
          $ofs1337$0$i$be = $ofs1337$1$i;
          $srcbuf$addr$30$i$be = $srcbuf$addr$31$i;
         }
        }
        $ofs1337$0$i = $ofs1337$0$i$be;
        $srcbuf$addr$30$i = $srcbuf$addr$30$i$be;
       }
       $linecount1335$0$i$ph = $linecount1335$0$i$ph + -1 | 0;
       if (!$linecount1335$0$i$ph) break L58; else {
        $dstbuf$addr$30$i$ph = $dstbuf$addr$30$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
        $srcbuf$addr$30$i$ph = $srcbuf$addr$31$i;
       }
      }
     } else {
      $dstbuf$addr$33$i$ph = $add$ptr1345$i;
      $linecount1439$0$i$ph = $157;
      $srcbuf$addr$33$i$ph = $srcbuf$13707;
      while (1) {
       $ofs1441$0$i = 0;
       $srcbuf$addr$33$i = $srcbuf$addr$33$i$ph;
       while (1) {
        $add1453$i = $ofs1441$0$i + (HEAPU16[$srcbuf$addr$33$i >> 1] | 0) | 0;
        $165 = HEAP16[$srcbuf$addr$33$i + 2 >> 1] | 0;
        $conv1455$i = $165 & 65535;
        $add$ptr1456$i = $srcbuf$addr$33$i + 4 | 0;
        L390 : do if (!($165 << 16 >> 16)) if (!$add1453$i) break L58; else {
         $ofs1441$1$i = $add1453$i;
         $srcbuf$addr$34$i = $add$ptr1456$i;
         label = 248;
        } else {
         L393 : do if (($add1453$i | 0) < ($add1342$i | 0)) {
          $sub1465$i = $20 - $add1453$i | 0;
          if (($sub1465$i | 0) > 0) {
           $sub1470$i = $conv1455$i - $sub1465$i | 0;
           if (($sub1470$i | 0) < 1) $cleanup$dest$slot$22$i = 118; else {
            $len1463$0$i = $sub1470$i;
            $start1462$0$i = $sub1465$i;
            label = 242;
           }
          } else {
           $len1463$0$i = $conv1455$i;
           $start1462$0$i = 0;
           label = 242;
          }
          if ((label | 0) == 242) {
           label = 0;
           $add1476$i = $start1462$0$i + $add1453$i | 0;
           $sub1477$i = $add1342$i - $add1476$i | 0;
           $spec$select941$i = ($len1463$0$i | 0) > ($sub1477$i | 0) ? $sub1477$i : $len1463$0$i;
           if (($spec$select941$i | 0) > 0) {
            $dst1488$01048$i = $dstbuf$addr$33$i$ph + ($add1476$i << 2) | 0;
            $i1484$01046$i = 0;
            $src1485$01047$i = $add$ptr1456$i + ($start1462$0$i << 2) | 0;
            while (1) {
             $166 = HEAP32[$src1485$01047$i >> 2] | 0;
             $167 = HEAP32[$dst1488$01048$i >> 2] | 0;
             $and1499$i = $167 & 16711935;
             $and1506$i = $167 & 65280;
             HEAP32[$dst1488$01048$i >> 2] = ((Math_imul(($166 & 16711935) - $and1499$i | 0, $conv129) | 0) >>> 8) + $and1499$i & 16711935 | ((Math_imul(($166 & 65280) - $and1506$i | 0, $conv129) | 0) >>> 8) + $and1506$i & 65280;
             $i1484$01046$i = $i1484$01046$i + 1 | 0;
             if (($i1484$01046$i | 0) >= ($spec$select941$i | 0)) {
              $cleanup$dest$slot$22$i = 0;
              break;
             } else {
              $dst1488$01048$i = $dst1488$01048$i + 4 | 0;
              $src1485$01047$i = $src1485$01047$i + 4 | 0;
             }
            }
           } else $cleanup$dest$slot$22$i = 0;
          }
          switch ($cleanup$dest$slot$22$i & 127) {
          case 118:
          case 0:
           {
            break L393;
            break;
           }
          default:
           {}
          }
          if (!$cleanup$dest$slot$22$i) {
           $ofs1441$0$i$be = $add1453$i;
           $srcbuf$addr$33$i$be = $add$ptr1456$i;
           break L390;
          } else break L58;
         } while (0);
         $ofs1441$1$i = $add1453$i + $conv1455$i | 0;
         $srcbuf$addr$34$i = $add$ptr1456$i + ($conv1455$i << 2) | 0;
         label = 248;
        } while (0);
        if ((label | 0) == 248) {
         label = 0;
         if (($ofs1441$1$i | 0) == ($0 | 0)) break; else {
          $ofs1441$0$i$be = $ofs1441$1$i;
          $srcbuf$addr$33$i$be = $srcbuf$addr$34$i;
         }
        }
        $ofs1441$0$i = $ofs1441$0$i$be;
        $srcbuf$addr$33$i = $srcbuf$addr$33$i$be;
       }
       $linecount1439$0$i$ph = $linecount1439$0$i$ph + -1 | 0;
       if (!$linecount1439$0$i$ph) break L58; else {
        $dstbuf$addr$33$i$ph = $dstbuf$addr$33$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
        $srcbuf$addr$33$i$ph = $srcbuf$addr$34$i;
       }
      }
     }
    }
    $add1559$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $Rloss1616$i = $23 + 28 | 0;
    $Rshift1621$i = $23 + 32 | 0;
    $Gloss1626$i = $23 + 29 | 0;
    $Gshift1631$i = $23 + 33 | 0;
    $Bloss1636$i = $23 + 30 | 0;
    $Bshift1641$i = $23 + 34 | 0;
    $Amask1708$i = $23 + 24 | 0;
    $dstbuf$addr$36$i$ph = $add$ptr8 + (0 - ($20 << 2)) | 0;
    $linecount1552$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$36$i$ph = $srcbuf$13707;
    while (1) {
     $ofs1554$0$i = 0;
     $srcbuf$addr$36$i = $srcbuf$addr$36$i$ph;
     while (1) {
      $add1566$i = $ofs1554$0$i + (HEAPU16[$srcbuf$addr$36$i >> 1] | 0) | 0;
      $172 = HEAP16[$srcbuf$addr$36$i + 2 >> 1] | 0;
      $conv1568$i = $172 & 65535;
      $add$ptr1569$i = $srcbuf$addr$36$i + 4 | 0;
      if (!($172 << 16 >> 16)) if (!$add1566$i) break L58; else {
       $ofs1554$1$i = $add1566$i;
       $srcbuf$addr$37$i = $add$ptr1569$i;
      } else {
       do if (($add1566$i | 0) < ($add1559$i | 0)) {
        $sub1578$i = $20 - $add1566$i | 0;
        if (($sub1578$i | 0) > 0) {
         $sub1583$i = $conv1568$i - $sub1578$i | 0;
         if (($sub1583$i | 0) < 1) break; else {
          $len1576$0$i = $sub1583$i;
          $start1575$0$i = $sub1578$i;
         }
        } else {
         $len1576$0$i = $conv1568$i;
         $start1575$0$i = 0;
        }
        $add1589$i = $start1575$0$i + $add1566$i | 0;
        $sub1590$i = $add1559$i - $add1589$i | 0;
        $spec$select942$i = ($len1576$0$i | 0) > ($sub1590$i | 0) ? $sub1590$i : $len1576$0$i;
        if (($spec$select942$i | 0) > 0) {
         $idxprom1617$i$phi$trans$insert = HEAPU8[$Rloss1616$i >> 0] | 0;
         $$pre858 = HEAP32[992 + ($idxprom1617$i$phi$trans$insert << 2) >> 2] | 0;
         $idxprom1627$i$phi$trans$insert = HEAPU8[$Gloss1626$i >> 0] | 0;
         $$pre861 = HEAP32[992 + ($idxprom1627$i$phi$trans$insert << 2) >> 2] | 0;
         $idxprom1637$i$phi$trans$insert = HEAPU8[$Bloss1636$i >> 0] | 0;
         $$pre864 = HEAP32[992 + ($idxprom1637$i$phi$trans$insert << 2) >> 2] | 0;
         $conv1622$i = HEAPU8[$Rshift1621$i >> 0] | 0;
         $conv1632$i = HEAPU8[$Gshift1631$i >> 0] | 0;
         $conv1642$i = HEAPU8[$Bshift1641$i >> 0] | 0;
         $dst1601$01052$i = $dstbuf$addr$36$i$ph + ($add1589$i << 2) | 0;
         $i1597$01050$i = 0;
         $src1598$01051$i = $add$ptr1569$i + ($start1575$0$i << 2) | 0;
         while (1) {
          $173 = HEAP32[$src1598$01051$i >> 2] | 0;
          $174 = HEAP32[$dst1601$01052$i >> 2] | 0;
          $175 = HEAP32[$Rmask1312$i >> 2] | 0;
          $177 = HEAP32[$Gmask1313$i >> 2] | 0;
          $179 = HEAP32[$Bmask1315$i >> 2] | 0;
          $conv1655$i = HEAPU8[$$pre858 + (($175 & $174) >>> $conv1622$i) >> 0] | 0;
          $conv1665$i = HEAPU8[$$pre861 + (($177 & $174) >>> $conv1632$i) >> 0] | 0;
          $conv1675$i = HEAPU8[$$pre864 + (($179 & $174) >>> $conv1642$i) >> 0] | 0;
          $shl1693$i = (((Math_imul((HEAPU8[$$pre858 + (($175 & $173) >>> $conv1622$i) >> 0] | 0) - $conv1655$i | 0, $conv129) | 0) >>> 8) + $conv1655$i | 0) >>> $idxprom1617$i$phi$trans$insert << $conv1622$i;
          $shl1699$i = (((Math_imul((HEAPU8[$$pre861 + (($177 & $173) >>> $conv1632$i) >> 0] | 0) - $conv1665$i | 0, $conv129) | 0) >>> 8) + $conv1665$i | 0) >>> $idxprom1627$i$phi$trans$insert << $conv1632$i;
          $shl1706$i = (((Math_imul((HEAPU8[$$pre864 + (($179 & $173) >>> $conv1642$i) >> 0] | 0) - $conv1675$i | 0, $conv129) | 0) >>> 8) + $conv1675$i | 0) >>> $idxprom1637$i$phi$trans$insert << $conv1642$i;
          HEAP32[$dst1601$01052$i >> 2] = $shl1693$i | HEAP32[$Amask1708$i >> 2] | $shl1699$i | $shl1706$i;
          $i1597$01050$i = $i1597$01050$i + 1 | 0;
          if (($i1597$01050$i | 0) >= ($spec$select942$i | 0)) break; else {
           $dst1601$01052$i = $dst1601$01052$i + 4 | 0;
           $src1598$01051$i = $src1598$01051$i + 4 | 0;
          }
         }
        }
       } while (0);
       $ofs1554$1$i = $add1566$i + $conv1568$i | 0;
       $srcbuf$addr$37$i = $add$ptr1569$i + ($conv1568$i << 2) | 0;
      }
      if (($ofs1554$1$i | 0) == ($0 | 0)) break; else {
       $ofs1554$0$i = $ofs1554$1$i;
       $srcbuf$addr$36$i = $srcbuf$addr$37$i;
      }
     }
     $linecount1552$0$i$ph = $linecount1552$0$i$ph + -1 | 0;
     if (!$linecount1552$0$i$ph) break; else {
      $dstbuf$addr$36$i$ph = $dstbuf$addr$36$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$36$i$ph = $srcbuf$addr$37$i;
     }
    }
    break;
   }
  case 2:
   {
    $46 = HEAP32[$23 + 12 >> 2] | 0;
    $47 = HEAP32[$23 + 16 >> 2] | 0;
    $48 = HEAP32[$23 + 20 >> 2] | 0;
    $or303$i = $47 | $46 | $48;
    L429 : do if (($or303$i | 0) < 65535) {
     switch ($or303$i | 0) {
     case 32767:
      break;
     default:
      break L429;
     }
     if (($46 | 0) == 992 | ($47 | 0) == 992 | ($48 | 0) == 992) {
      $80 = HEAP32[$srcrect + 12 >> 2] | 0;
      $add617$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
      $add$ptr620$i = $add$ptr8 + (0 - ($20 << 1)) | 0;
      if ($19 << 24 >> 24 != -128) {
       $shr838$i = $conv129 >>> 3;
       $dstbuf$addr$21$i$ph = $add$ptr620$i;
       $linecount785$0$i$ph = $80;
       $srcbuf$addr$21$i$ph = $srcbuf$13707;
       while (1) {
        $ofs787$0$i = 0;
        $srcbuf$addr$21$i = $srcbuf$addr$21$i$ph;
        while (1) {
         $add799$i = $ofs787$0$i + (HEAPU8[$srcbuf$addr$21$i >> 0] | 0) | 0;
         $108 = HEAP8[$srcbuf$addr$21$i + 1 >> 0] | 0;
         $conv801$i = $108 & 255;
         $add$ptr802$i = $srcbuf$addr$21$i + 2 | 0;
         L439 : do if (!($108 << 24 >> 24)) if (!$add799$i) break L58; else {
          $ofs787$1$i = $add799$i;
          $srcbuf$addr$22$i = $add$ptr802$i;
          label = 182;
         } else {
          L442 : do if (($add799$i | 0) < ($add617$i | 0)) {
           $sub811$i = $20 - $add799$i | 0;
           if (($sub811$i | 0) > 0) {
            $sub816$i = $conv801$i - $sub811$i | 0;
            if (($sub816$i | 0) < 1) $cleanup$dest$slot$14$i = 78; else {
             $len809$0$i = $sub816$i;
             $start808$0$i = $sub811$i;
             label = 176;
            }
           } else {
            $len809$0$i = $conv801$i;
            $start808$0$i = 0;
            label = 176;
           }
           if ((label | 0) == 176) {
            label = 0;
            $add822$i = $start808$0$i + $add799$i | 0;
            $sub823$i = $add617$i - $add822$i | 0;
            $spec$select935$i = ($len809$0$i | 0) > ($sub823$i | 0) ? $sub823$i : $len809$0$i;
            if (($spec$select935$i | 0) > 0) {
             $dst834$01083$i = $dstbuf$addr$21$i$ph + ($add822$i << 1) | 0;
             $i830$01085$i = 0;
             $src831$01084$i = $add$ptr802$i + ($start808$0$i << 1) | 0;
             while (1) {
              $conv845$i = HEAPU16[$src831$01084$i >> 1] | 0;
              $conv847$i = HEAPU16[$dst834$01083$i >> 1] | 0;
              $and853$i = ($conv847$i << 16 | $conv847$i) & 65043487;
              $and858$i = ((Math_imul((($conv845$i << 16 | $conv845$i) & 65043487) - $and853$i | 0, $shr838$i) | 0) >>> 5) + $and853$i & 65043487;
              HEAP16[$dst834$01083$i >> 1] = $and858$i >>> 16 | $and858$i;
              $i830$01085$i = $i830$01085$i + 1 | 0;
              if (($i830$01085$i | 0) >= ($spec$select935$i | 0)) {
               $cleanup$dest$slot$14$i = 0;
               break;
              } else {
               $dst834$01083$i = $dst834$01083$i + 2 | 0;
               $src831$01084$i = $src831$01084$i + 2 | 0;
              }
             }
            } else $cleanup$dest$slot$14$i = 0;
           }
           switch ($cleanup$dest$slot$14$i & 127) {
           case 78:
           case 0:
            {
             break L442;
             break;
            }
           default:
            {}
           }
           if (!$cleanup$dest$slot$14$i) {
            $ofs787$0$i$be = $add799$i;
            $srcbuf$addr$21$i$be = $add$ptr802$i;
            break L439;
           } else break L58;
          } while (0);
          $ofs787$1$i = $add799$i + $conv801$i | 0;
          $srcbuf$addr$22$i = $add$ptr802$i + ($conv801$i << 1) | 0;
          label = 182;
         } while (0);
         if ((label | 0) == 182) {
          label = 0;
          if (($ofs787$1$i | 0) == ($0 | 0)) break; else {
           $ofs787$0$i$be = $ofs787$1$i;
           $srcbuf$addr$21$i$be = $srcbuf$addr$22$i;
          }
         }
         $ofs787$0$i = $ofs787$0$i$be;
         $srcbuf$addr$21$i = $srcbuf$addr$21$i$be;
        }
        $linecount785$0$i$ph = $linecount785$0$i$ph + -1 | 0;
        if (!$linecount785$0$i$ph) break L58; else {
         $dstbuf$addr$21$i$ph = $dstbuf$addr$21$i$ph + $5 | 0;
         $srcbuf$addr$21$i$ph = $srcbuf$addr$22$i;
        }
       }
      }
      $dstbuf$addr$18$i$ph = $add$ptr620$i;
      $linecount610$0$i$ph = $80;
      $srcbuf$addr$18$i$ph = $srcbuf$13707;
      while (1) {
       $ofs612$0$i = 0;
       $srcbuf$addr$18$i = $srcbuf$addr$18$i$ph;
       while (1) {
        $add624$i = $ofs612$0$i + (HEAPU8[$srcbuf$addr$18$i >> 0] | 0) | 0;
        $83 = HEAP8[$srcbuf$addr$18$i + 1 >> 0] | 0;
        $conv626$i = $83 & 255;
        $add$ptr627$i = $srcbuf$addr$18$i + 2 | 0;
        L463 : do if (!($83 << 24 >> 24)) if (!$add624$i) break L58; else {
         $ofs612$1$i = $add624$i;
         $srcbuf$addr$19$i = $add$ptr627$i;
         label = 166;
        } else {
         L466 : do if (($add624$i | 0) < ($add617$i | 0)) {
          $sub636$i = $20 - $add624$i | 0;
          if (($sub636$i | 0) > 0) {
           $sub641$i = $conv626$i - $sub636$i | 0;
           if (($sub641$i | 0) < 1) $cleanup$dest$slot$12$i = 60; else {
            $len634$0$i = $sub641$i;
            $start633$0$i = $sub636$i;
            label = 151;
           }
          } else {
           $len634$0$i = $conv626$i;
           $start633$0$i = 0;
           label = 151;
          }
          L470 : do if ((label | 0) == 151) {
           label = 0;
           $add647$i = $start633$0$i + $add624$i | 0;
           $sub648$i = $add617$i - $add647$i | 0;
           $spec$select934$i = ($len634$0$i | 0) > ($sub648$i | 0) ? $sub648$i : $len634$0$i;
           $add$ptr658$i = $add$ptr627$i + ($start633$0$i << 1) | 0;
           $add$ptr661$i = $dstbuf$addr$18$i$ph + ($add647$i << 1) | 0;
           $84 = $add$ptr658$i;
           if (($add$ptr661$i ^ $84) & 3 | 0) {
            if (!$spec$select934$i) {
             $cleanup$dest$slot$12$i = 0;
             break;
            }
            $dst659$01072$i = $add$ptr661$i;
            $n655$01074$i = $spec$select934$i;
            $src656$01073$i = $add$ptr658$i;
            while (1) {
             $n655$01074$i = $n655$01074$i + -1 | 0;
             $86 = HEAP16[$src656$01073$i >> 1] | 0;
             $87 = HEAP16[$dst659$01072$i >> 1] | 0;
             HEAP16[$dst659$01072$i >> 1] = ((($87 & -1058 & 65535) + ($86 & -1058 & 65535) | 0) >>> 1) + ($86 & 1057 & $87 & 65535);
             if (!$n655$01074$i) {
              $cleanup$dest$slot$12$i = 0;
              break L470;
             } else {
              $dst659$01072$i = $dst659$01072$i + 2 | 0;
              $src656$01073$i = $src656$01073$i + 2 | 0;
             }
            }
           }
           if (!($84 & 3)) {
            $dst659$1$i = $add$ptr661$i;
            $n655$1$i = $spec$select934$i;
            $src656$1$i = $add$ptr658$i;
           } else {
            $91 = HEAP16[$add$ptr658$i >> 1] | 0;
            $92 = HEAP16[$add$ptr661$i >> 1] | 0;
            HEAP16[$add$ptr661$i >> 1] = ((($92 & -1058 & 65535) + ($91 & -1058 & 65535) | 0) >>> 1) + ($91 & 1057 & $92 & 65535);
            $dst659$1$i = $add$ptr661$i + 2 | 0;
            $n655$1$i = $spec$select934$i + -1 | 0;
            $src656$1$i = $add$ptr658$i + 2 | 0;
           }
           if ($n655$1$i >>> 0 > 1) {
            $96 = $n655$1$i + -2 | 0;
            $scevgep1107$i = $dst659$1$i + 4 | 0;
            $dst659$21076$i = $dst659$1$i;
            $n655$21078$i = $n655$1$i;
            $src656$21077$i = $src656$1$i;
            while (1) {
             $97 = HEAP32[$src656$21077$i >> 2] | 0;
             $98 = HEAP32[$dst659$21076$i >> 2] | 0;
             HEAP32[$dst659$21076$i >> 2] = ($97 & 69272609 & $98) + ($97 >>> 1 & 2112847343) + ($98 >>> 1 & 2112847343);
             $n655$21078$i = $n655$21078$i + -2 | 0;
             if ($n655$21078$i >>> 0 <= 1) break; else {
              $dst659$21076$i = $dst659$21076$i + 4 | 0;
              $src656$21077$i = $src656$21077$i + 4 | 0;
             }
            }
            $99 = $96 & -2;
            $dst659$2$lcssa$i = $scevgep1107$i + ($99 << 1) | 0;
            $n655$2$lcssa$i = $96 - $99 | 0;
            $src656$2$lcssa$i = $src656$1$i + 4 + ($99 << 1) | 0;
           } else {
            $dst659$2$lcssa$i = $dst659$1$i;
            $n655$2$lcssa$i = $n655$1$i;
            $src656$2$lcssa$i = $src656$1$i;
           }
           if (!$n655$2$lcssa$i) {
            $cleanup$dest$slot$12$i = 0;
            break;
           }
           $101 = HEAP16[$src656$2$lcssa$i >> 1] | 0;
           $102 = HEAP16[$dst659$2$lcssa$i >> 1] | 0;
           HEAP16[$dst659$2$lcssa$i >> 1] = ((($102 & -1058 & 65535) + ($101 & -1058 & 65535) | 0) >>> 1) + ($101 & 1057 & $102 & 65535);
           $cleanup$dest$slot$12$i = 0;
          } while (0);
          switch ($cleanup$dest$slot$12$i & 63) {
          case 60:
          case 0:
           {
            break L466;
            break;
           }
          default:
           {}
          }
          if (!$cleanup$dest$slot$12$i) {
           $ofs612$0$i$be = $add624$i;
           $srcbuf$addr$18$i$be = $add$ptr627$i;
           break L463;
          } else break L58;
         } while (0);
         $ofs612$1$i = $add624$i + $conv626$i | 0;
         $srcbuf$addr$19$i = $add$ptr627$i + ($conv626$i << 1) | 0;
         label = 166;
        } while (0);
        if ((label | 0) == 166) {
         label = 0;
         if (($ofs612$1$i | 0) == ($0 | 0)) break; else {
          $ofs612$0$i$be = $ofs612$1$i;
          $srcbuf$addr$18$i$be = $srcbuf$addr$19$i;
         }
        }
        $ofs612$0$i = $ofs612$0$i$be;
        $srcbuf$addr$18$i = $srcbuf$addr$18$i$be;
       }
       $linecount610$0$i$ph = $linecount610$0$i$ph + -1 | 0;
       if (!$linecount610$0$i$ph) break L58; else {
        $dstbuf$addr$18$i$ph = $dstbuf$addr$18$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
        $srcbuf$addr$18$i$ph = $srcbuf$addr$19$i;
       }
      }
     }
    } else {
     switch ($or303$i | 0) {
     case 65535:
      break;
     default:
      break L429;
     }
     if (($46 | 0) == 2016 | ($47 | 0) == 2016 | ($48 | 0) == 2016) {
      $49 = HEAP32[$srcrect + 12 >> 2] | 0;
      $add327$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
      $add$ptr330$i = $add$ptr8 + (0 - ($20 << 1)) | 0;
      if ($19 << 24 >> 24 != -128) {
       $shr532$i = $conv129 >>> 3;
       $dstbuf$addr$15$i$ph = $add$ptr330$i;
       $linecount481$0$i$ph = $49;
       $srcbuf$addr$15$i$ph = $srcbuf$13707;
       while (1) {
        $ofs483$0$i = 0;
        $srcbuf$addr$15$i = $srcbuf$addr$15$i$ph;
        while (1) {
         $add495$i = $ofs483$0$i + (HEAPU8[$srcbuf$addr$15$i >> 0] | 0) | 0;
         $77 = HEAP8[$srcbuf$addr$15$i + 1 >> 0] | 0;
         $conv497$i = $77 & 255;
         $add$ptr498$i = $srcbuf$addr$15$i + 2 | 0;
         L504 : do if (!($77 << 24 >> 24)) if (!$add495$i) break L58; else {
          $ofs483$1$i = $add495$i;
          $srcbuf$addr$16$i = $add$ptr498$i;
          label = 139;
         } else {
          L507 : do if (($add495$i | 0) < ($add327$i | 0)) {
           $sub507$i = $20 - $add495$i | 0;
           if (($sub507$i | 0) > 0) {
            $sub512$i = $conv497$i - $sub507$i | 0;
            if (($sub512$i | 0) < 1) $cleanup$dest$slot$10$i = 49; else {
             $len505$0$i = $sub512$i;
             $start504$0$i = $sub507$i;
             label = 133;
            }
           } else {
            $len505$0$i = $conv497$i;
            $start504$0$i = 0;
            label = 133;
           }
           if ((label | 0) == 133) {
            label = 0;
            $add518$i = $start504$0$i + $add495$i | 0;
            $sub519$i = $add327$i - $add518$i | 0;
            $spec$select931$i = ($len505$0$i | 0) > ($sub519$i | 0) ? $sub519$i : $len505$0$i;
            if (($spec$select931$i | 0) > 0) {
             $dst529$01068$i = $dstbuf$addr$15$i$ph + ($add518$i << 1) | 0;
             $i$01070$i = 0;
             $src526$01069$i = $add$ptr498$i + ($start504$0$i << 1) | 0;
             while (1) {
              $conv539$i = HEAPU16[$src526$01069$i >> 1] | 0;
              $conv541$i = HEAPU16[$dst529$01068$i >> 1] | 0;
              $and546$i = ($conv541$i << 16 | $conv541$i) & 132184095;
              $and551$i = ((Math_imul((($conv539$i << 16 | $conv539$i) & 132184095) - $and546$i | 0, $shr532$i) | 0) >>> 5) + $and546$i & 132184095;
              HEAP16[$dst529$01068$i >> 1] = $and551$i >>> 16 | $and551$i;
              $i$01070$i = $i$01070$i + 1 | 0;
              if (($i$01070$i | 0) >= ($spec$select931$i | 0)) {
               $cleanup$dest$slot$10$i = 0;
               break;
              } else {
               $dst529$01068$i = $dst529$01068$i + 2 | 0;
               $src526$01069$i = $src526$01069$i + 2 | 0;
              }
             }
            } else $cleanup$dest$slot$10$i = 0;
           }
           switch ($cleanup$dest$slot$10$i & 63) {
           case 49:
           case 0:
            {
             break L507;
             break;
            }
           default:
            {}
           }
           if (!$cleanup$dest$slot$10$i) {
            $ofs483$0$i$be = $add495$i;
            $srcbuf$addr$15$i$be = $add$ptr498$i;
            break L504;
           } else break L58;
          } while (0);
          $ofs483$1$i = $add495$i + $conv497$i | 0;
          $srcbuf$addr$16$i = $add$ptr498$i + ($conv497$i << 1) | 0;
          label = 139;
         } while (0);
         if ((label | 0) == 139) {
          label = 0;
          if (($ofs483$1$i | 0) == ($0 | 0)) break; else {
           $ofs483$0$i$be = $ofs483$1$i;
           $srcbuf$addr$15$i$be = $srcbuf$addr$16$i;
          }
         }
         $ofs483$0$i = $ofs483$0$i$be;
         $srcbuf$addr$15$i = $srcbuf$addr$15$i$be;
        }
        $linecount481$0$i$ph = $linecount481$0$i$ph + -1 | 0;
        if (!$linecount481$0$i$ph) break L58; else {
         $dstbuf$addr$15$i$ph = $dstbuf$addr$15$i$ph + $5 | 0;
         $srcbuf$addr$15$i$ph = $srcbuf$addr$16$i;
        }
       }
      }
      $dstbuf$addr$12$i$ph = $add$ptr330$i;
      $linecount320$0$i$ph = $49;
      $srcbuf$addr$12$i$ph = $srcbuf$13707;
      while (1) {
       $ofs322$0$i = 0;
       $srcbuf$addr$12$i = $srcbuf$addr$12$i$ph;
       while (1) {
        $add334$i = $ofs322$0$i + (HEAPU8[$srcbuf$addr$12$i >> 0] | 0) | 0;
        $52 = HEAP8[$srcbuf$addr$12$i + 1 >> 0] | 0;
        $conv336$i = $52 & 255;
        $add$ptr337$i = $srcbuf$addr$12$i + 2 | 0;
        L528 : do if (!($52 << 24 >> 24)) if (!$add334$i) break L58; else {
         $ofs322$1$i = $add334$i;
         $srcbuf$addr$13$i = $add$ptr337$i;
         label = 123;
        } else {
         L531 : do if (($add334$i | 0) < ($add327$i | 0)) {
          $sub346$i = $20 - $add334$i | 0;
          if (($sub346$i | 0) > 0) {
           $sub351$i = $conv336$i - $sub346$i | 0;
           if (($sub351$i | 0) < 1) $cleanup$dest$slot$8$i = 31; else {
            $len344$0$i = $sub351$i;
            $start343$0$i = $sub346$i;
            label = 108;
           }
          } else {
           $len344$0$i = $conv336$i;
           $start343$0$i = 0;
           label = 108;
          }
          L535 : do if ((label | 0) == 108) {
           label = 0;
           $add357$i = $start343$0$i + $add334$i | 0;
           $sub358$i = $add327$i - $add357$i | 0;
           $spec$select930$i = ($len344$0$i | 0) > ($sub358$i | 0) ? $sub358$i : $len344$0$i;
           $add$ptr366$i = $add$ptr337$i + ($start343$0$i << 1) | 0;
           $add$ptr368$i = $dstbuf$addr$12$i$ph + ($add357$i << 1) | 0;
           $53 = $add$ptr366$i;
           if (($add$ptr368$i ^ $53) & 3 | 0) {
            if (!$spec$select930$i) {
             $cleanup$dest$slot$8$i = 0;
             break;
            }
            $dst$01058$i = $add$ptr368$i;
            $n$01060$i = $spec$select930$i;
            $src$01059$i = $add$ptr366$i;
            while (1) {
             $n$01060$i = $n$01060$i + -1 | 0;
             $55 = HEAP16[$src$01059$i >> 1] | 0;
             $56 = HEAP16[$dst$01058$i >> 1] | 0;
             HEAP16[$dst$01058$i >> 1] = ((($56 & -2082 & 65535) + ($55 & -2082 & 65535) | 0) >>> 1) + ($55 & 2081 & $56 & 65535);
             if (!$n$01060$i) {
              $cleanup$dest$slot$8$i = 0;
              break L535;
             } else {
              $dst$01058$i = $dst$01058$i + 2 | 0;
              $src$01059$i = $src$01059$i + 2 | 0;
             }
            }
           }
           if (!($53 & 3)) {
            $dst$1$i = $add$ptr368$i;
            $n$1$i = $spec$select930$i;
            $src$1$i = $add$ptr366$i;
           } else {
            $60 = HEAP16[$add$ptr366$i >> 1] | 0;
            $61 = HEAP16[$add$ptr368$i >> 1] | 0;
            HEAP16[$add$ptr368$i >> 1] = ((($61 & -2082 & 65535) + ($60 & -2082 & 65535) | 0) >>> 1) + ($60 & 2081 & $61 & 65535);
            $dst$1$i = $add$ptr368$i + 2 | 0;
            $n$1$i = $spec$select930$i + -1 | 0;
            $src$1$i = $add$ptr366$i + 2 | 0;
           }
           if ($n$1$i >>> 0 > 1) {
            $65 = $n$1$i + -2 | 0;
            $scevgep1103$i = $dst$1$i + 4 | 0;
            $dst$21062$i = $dst$1$i;
            $n$21064$i = $n$1$i;
            $src$21063$i = $src$1$i;
            while (1) {
             $66 = HEAP32[$src$21063$i >> 2] | 0;
             $67 = HEAP32[$dst$21062$i >> 2] | 0;
             HEAP32[$dst$21062$i >> 2] = ($66 & 136382497 & $67) + ($66 >>> 1 & 2079292399) + ($67 >>> 1 & 2079292399);
             $n$21064$i = $n$21064$i + -2 | 0;
             if ($n$21064$i >>> 0 <= 1) break; else {
              $dst$21062$i = $dst$21062$i + 4 | 0;
              $src$21063$i = $src$21063$i + 4 | 0;
             }
            }
            $68 = $65 & -2;
            $dst$2$lcssa$i = $scevgep1103$i + ($68 << 1) | 0;
            $n$2$lcssa$i = $65 - $68 | 0;
            $src$2$lcssa$i = $src$1$i + 4 + ($68 << 1) | 0;
           } else {
            $dst$2$lcssa$i = $dst$1$i;
            $n$2$lcssa$i = $n$1$i;
            $src$2$lcssa$i = $src$1$i;
           }
           if (!$n$2$lcssa$i) {
            $cleanup$dest$slot$8$i = 0;
            break;
           }
           $70 = HEAP16[$src$2$lcssa$i >> 1] | 0;
           $71 = HEAP16[$dst$2$lcssa$i >> 1] | 0;
           HEAP16[$dst$2$lcssa$i >> 1] = ((($71 & -2082 & 65535) + ($70 & -2082 & 65535) | 0) >>> 1) + ($70 & 2081 & $71 & 65535);
           $cleanup$dest$slot$8$i = 0;
          } while (0);
          switch ($cleanup$dest$slot$8$i & 31) {
          case 31:
          case 0:
           {
            break L531;
            break;
           }
          default:
           {}
          }
          if (!$cleanup$dest$slot$8$i) {
           $ofs322$0$i$be = $add334$i;
           $srcbuf$addr$12$i$be = $add$ptr337$i;
           break L528;
          } else break L58;
         } while (0);
         $ofs322$1$i = $add334$i + $conv336$i | 0;
         $srcbuf$addr$13$i = $add$ptr337$i + ($conv336$i << 1) | 0;
         label = 123;
        } while (0);
        if ((label | 0) == 123) {
         label = 0;
         if (($ofs322$1$i | 0) == ($0 | 0)) break; else {
          $ofs322$0$i$be = $ofs322$1$i;
          $srcbuf$addr$12$i$be = $srcbuf$addr$13$i;
         }
        }
        $ofs322$0$i = $ofs322$0$i$be;
        $srcbuf$addr$12$i = $srcbuf$addr$12$i$be;
       }
       $linecount320$0$i$ph = $linecount320$0$i$ph + -1 | 0;
       if (!$linecount320$0$i$ph) break L58; else {
        $dstbuf$addr$12$i$ph = $dstbuf$addr$12$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
        $srcbuf$addr$12$i$ph = $srcbuf$addr$13$i;
       }
      }
     }
    } while (0);
    $add908$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $Rloss$i = $23 + 28 | 0;
    $Rshift$i = $23 + 32 | 0;
    $Gloss$i = $23 + 29 | 0;
    $Gshift$i = $23 + 33 | 0;
    $Bloss$i = $23 + 30 | 0;
    $Bshift$i = $23 + 34 | 0;
    $Amask$i = $23 + 24 | 0;
    $dstbuf$addr$24$i$ph = $add$ptr8 + (0 - ($20 << 1)) | 0;
    $linecount901$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$24$i$ph = $srcbuf$13707;
    while (1) {
     $ofs903$0$i = 0;
     $srcbuf$addr$24$i = $srcbuf$addr$24$i$ph;
     while (1) {
      $add915$i = $ofs903$0$i + (HEAPU8[$srcbuf$addr$24$i >> 0] | 0) | 0;
      $114 = HEAP8[$srcbuf$addr$24$i + 1 >> 0] | 0;
      $conv917$i = $114 & 255;
      $add$ptr918$i = $srcbuf$addr$24$i + 2 | 0;
      L565 : do if (!($114 << 24 >> 24)) if (!$add915$i) break L58; else {
       $ofs903$1$i = $add915$i;
       $srcbuf$addr$25$i = $add$ptr918$i;
       label = 198;
      } else {
       L568 : do if (($add915$i | 0) < ($add908$i | 0)) {
        $sub927$i = $20 - $add915$i | 0;
        if (($sub927$i | 0) > 0) {
         $sub932$i = $conv917$i - $sub927$i | 0;
         if (($sub932$i | 0) < 1) $cleanup$dest$slot$16$i = 88; else {
          $len925$0$i = $sub932$i;
          $start924$0$i = $sub927$i;
          label = 192;
         }
        } else {
         $len925$0$i = $conv917$i;
         $start924$0$i = 0;
         label = 192;
        }
        if ((label | 0) == 192) {
         label = 0;
         $add938$i = $start924$0$i + $add915$i | 0;
         $sub939$i = $add908$i - $add938$i | 0;
         $spec$select936$i = ($len925$0$i | 0) > ($sub939$i | 0) ? $sub939$i : $len925$0$i;
         if (($spec$select936$i | 0) > 0) {
          $idxprom$i$phi$trans$insert = HEAPU8[$Rloss$i >> 0] | 0;
          $$pre848 = HEAP32[992 + ($idxprom$i$phi$trans$insert << 2) >> 2] | 0;
          $idxprom968$i$phi$trans$insert = HEAPU8[$Gloss$i >> 0] | 0;
          $$pre851 = HEAP32[992 + ($idxprom968$i$phi$trans$insert << 2) >> 2] | 0;
          $idxprom976$i$phi$trans$insert = HEAPU8[$Bloss$i >> 0] | 0;
          $$pre854 = HEAP32[992 + ($idxprom976$i$phi$trans$insert << 2) >> 2] | 0;
          $$pre856 = HEAP32[$Amask$i >> 2] | 0;
          $conv964$i = HEAPU8[$Rshift$i >> 0] | 0;
          $conv972$i = HEAPU8[$Gshift$i >> 0] | 0;
          $conv980$i = HEAPU8[$Bshift$i >> 0] | 0;
          $dst950$01056$i = $dstbuf$addr$24$i$ph + ($add938$i << 1) | 0;
          $i946$01054$i = 0;
          $src947$01055$i = $add$ptr918$i + ($start924$0$i << 1) | 0;
          while (1) {
           $conv959$i = HEAPU16[$src947$01055$i >> 1] | 0;
           $conv960$i = HEAPU16[$dst950$01056$i >> 1] | 0;
           $conv993$i = HEAPU8[$$pre848 + (($46 & $conv960$i) >>> $conv964$i) >> 0] | 0;
           $conv1003$i = HEAPU8[$$pre851 + (($47 & $conv960$i) >>> $conv972$i) >> 0] | 0;
           $conv1013$i = HEAPU8[$$pre854 + (($48 & $conv960$i) >>> $conv980$i) >> 0] | 0;
           HEAP16[$dst950$01056$i >> 1] = (((Math_imul((HEAPU8[$$pre848 + (($46 & $conv959$i) >>> $conv964$i) >> 0] | 0) - $conv993$i | 0, $conv129) | 0) >>> 8) + $conv993$i | 0) >>> $idxprom$i$phi$trans$insert << $conv964$i | $$pre856 | (((Math_imul((HEAPU8[$$pre851 + (($47 & $conv959$i) >>> $conv972$i) >> 0] | 0) - $conv1003$i | 0, $conv129) | 0) >>> 8) + $conv1003$i | 0) >>> $idxprom968$i$phi$trans$insert << $conv972$i | (((Math_imul((HEAPU8[$$pre854 + (($48 & $conv959$i) >>> $conv980$i) >> 0] | 0) - $conv1013$i | 0, $conv129) | 0) >>> 8) + $conv1013$i | 0) >>> $idxprom976$i$phi$trans$insert << $conv980$i;
           $i946$01054$i = $i946$01054$i + 1 | 0;
           if (($i946$01054$i | 0) >= ($spec$select936$i | 0)) {
            $cleanup$dest$slot$16$i = 0;
            break;
           } else {
            $dst950$01056$i = $dst950$01056$i + 2 | 0;
            $src947$01055$i = $src947$01055$i + 2 | 0;
           }
          }
         } else $cleanup$dest$slot$16$i = 0;
        }
        switch ($cleanup$dest$slot$16$i & 127) {
        case 88:
        case 0:
         {
          break L568;
          break;
         }
        default:
         {}
        }
        if (!$cleanup$dest$slot$16$i) {
         $ofs903$0$i$be = $add915$i;
         $srcbuf$addr$24$i$be = $add$ptr918$i;
         break L565;
        } else break L58;
       } while (0);
       $ofs903$1$i = $add915$i + $conv917$i | 0;
       $srcbuf$addr$25$i = $add$ptr918$i + ($conv917$i << 1) | 0;
       label = 198;
      } while (0);
      if ((label | 0) == 198) {
       label = 0;
       if (($ofs903$1$i | 0) == ($0 | 0)) break; else {
        $ofs903$0$i$be = $ofs903$1$i;
        $srcbuf$addr$24$i$be = $srcbuf$addr$25$i;
       }
      }
      $ofs903$0$i = $ofs903$0$i$be;
      $srcbuf$addr$24$i = $srcbuf$addr$24$i$be;
     }
     $linecount901$0$i$ph = $linecount901$0$i$ph + -1 | 0;
     if (!$linecount901$0$i$ph) break; else {
      $dstbuf$addr$24$i$ph = $dstbuf$addr$24$i$ph + $5 | 0;
      $srcbuf$addr$24$i$ph = $srcbuf$addr$25$i;
     }
    }
    break;
   }
  case 3:
   {
    $add1095$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $20 | 0;
    $Rloss1172$i = $23 + 28 | 0;
    $Rmask1175$i = $23 + 12 | 0;
    $Rshift1177$i = $23 + 32 | 0;
    $Gloss1182$i = $23 + 29 | 0;
    $Gmask1185$i = $23 + 16 | 0;
    $Gshift1187$i = $23 + 33 | 0;
    $Bloss1192$i = $23 + 30 | 0;
    $Bmask1195$i = $23 + 20 | 0;
    $Bshift1197$i = $23 + 34 | 0;
    $Amask1264$i = $23 + 24 | 0;
    $dstbuf$addr$27$i$ph = $add$ptr8 + (Math_imul($20, -3) | 0) | 0;
    $linecount1088$0$i$ph = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$27$i$ph = $srcbuf$13707;
    while (1) {
     $ofs1090$0$i = 0;
     $srcbuf$addr$27$i = $srcbuf$addr$27$i$ph;
     while (1) {
      $add1102$i = $ofs1090$0$i + (HEAPU8[$srcbuf$addr$27$i >> 0] | 0) | 0;
      $127 = HEAP8[$srcbuf$addr$27$i + 1 >> 0] | 0;
      $conv1104$i = $127 & 255;
      $add$ptr1105$i = $srcbuf$addr$27$i + 2 | 0;
      L589 : do if (!($127 << 24 >> 24)) if (!$add1102$i) break L58; else {
       $ofs1090$1$i = $add1102$i;
       $srcbuf$addr$28$i = $add$ptr1105$i;
       label = 214;
      } else {
       L592 : do if (($add1102$i | 0) < ($add1095$i | 0)) {
        $sub1114$i = $20 - $add1102$i | 0;
        if (($sub1114$i | 0) > 0) {
         $sub1119$i = $conv1104$i - $sub1114$i | 0;
         if (($sub1119$i | 0) < 1) $cleanup$dest$slot$18$i = 98; else {
          $len1112$0$i = $sub1119$i;
          $start1111$0$i = $sub1114$i;
          label = 208;
         }
        } else {
         $len1112$0$i = $conv1104$i;
         $start1111$0$i = 0;
         label = 208;
        }
        if ((label | 0) == 208) {
         label = 0;
         $add1125$i = $start1111$0$i + $add1102$i | 0;
         $sub1126$i = $add1095$i - $add1125$i | 0;
         $spec$select937$i = ($len1112$0$i | 0) > ($sub1126$i | 0) ? $sub1126$i : $len1112$0$i;
         if (($spec$select937$i | 0) > 0) {
          $dst1137$01089$i = $dstbuf$addr$27$i$ph + ($add1125$i * 3 | 0) | 0;
          $i1133$01087$i = 0;
          $src1134$01088$i = $add$ptr1105$i + ($start1111$0$i * 3 | 0) | 0;
          while (1) {
           $or1161$i = (HEAPU8[$src1134$01088$i + 1 >> 0] | 0) << 8 | (HEAPU8[$src1134$01088$i + 2 >> 0] | 0) << 16 | (HEAPU8[$src1134$01088$i >> 0] | 0);
           $arrayidx1162$i = $dst1137$01089$i + 2 | 0;
           $arrayidx1165$i = $dst1137$01089$i + 1 | 0;
           $or1171$i = (HEAPU8[$arrayidx1165$i >> 0] | 0) << 8 | (HEAPU8[$arrayidx1162$i >> 0] | 0) << 16 | (HEAPU8[$dst1137$01089$i >> 0] | 0);
           $idxprom1173$i = HEAPU8[$Rloss1172$i >> 0] | 0;
           $135 = HEAP32[992 + ($idxprom1173$i << 2) >> 2] | 0;
           $136 = HEAP32[$Rmask1175$i >> 2] | 0;
           $conv1178$i = HEAPU8[$Rshift1177$i >> 0] | 0;
           $idxprom1183$i = HEAPU8[$Gloss1182$i >> 0] | 0;
           $140 = HEAP32[992 + ($idxprom1183$i << 2) >> 2] | 0;
           $141 = HEAP32[$Gmask1185$i >> 2] | 0;
           $conv1188$i = HEAPU8[$Gshift1187$i >> 0] | 0;
           $idxprom1193$i = HEAPU8[$Bloss1192$i >> 0] | 0;
           $145 = HEAP32[992 + ($idxprom1193$i << 2) >> 2] | 0;
           $146 = HEAP32[$Bmask1195$i >> 2] | 0;
           $conv1198$i = HEAPU8[$Bshift1197$i >> 0] | 0;
           $conv1211$i = HEAPU8[$135 + (($or1171$i & $136) >>> $conv1178$i) >> 0] | 0;
           $conv1221$i = HEAPU8[$140 + (($141 & $or1171$i) >>> $conv1188$i) >> 0] | 0;
           $conv1231$i = HEAPU8[$145 + (($146 & $or1171$i) >>> $conv1198$i) >> 0] | 0;
           $shl1249$i = (((Math_imul((HEAPU8[$135 + (($136 & $or1161$i) >>> $conv1178$i) >> 0] | 0) - $conv1211$i | 0, $conv129) | 0) >>> 8) + $conv1211$i | 0) >>> $idxprom1173$i << $conv1178$i;
           $shl1255$i = (((Math_imul((HEAPU8[$140 + (($141 & $or1161$i) >>> $conv1188$i) >> 0] | 0) - $conv1221$i | 0, $conv129) | 0) >>> 8) + $conv1221$i | 0) >>> $idxprom1183$i << $conv1188$i;
           $shl1262$i = (((Math_imul((HEAPU8[$145 + (($146 & $or1161$i) >>> $conv1198$i) >> 0] | 0) - $conv1231$i | 0, $conv129) | 0) >>> 8) + $conv1231$i | 0) >>> $idxprom1193$i << $conv1198$i;
           $or1265$i = $shl1249$i | HEAP32[$Amask1264$i >> 2] | $shl1255$i | $shl1262$i;
           HEAP8[$dst1137$01089$i >> 0] = $or1265$i;
           HEAP8[$arrayidx1165$i >> 0] = $or1265$i >>> 8;
           HEAP8[$arrayidx1162$i >> 0] = $or1265$i >>> 16;
           $i1133$01087$i = $i1133$01087$i + 1 | 0;
           if (($i1133$01087$i | 0) >= ($spec$select937$i | 0)) {
            $cleanup$dest$slot$18$i = 0;
            break;
           } else {
            $dst1137$01089$i = $dst1137$01089$i + 3 | 0;
            $src1134$01088$i = $src1134$01088$i + 3 | 0;
           }
          }
         } else $cleanup$dest$slot$18$i = 0;
        }
        switch ($cleanup$dest$slot$18$i & 127) {
        case 98:
        case 0:
         {
          break L592;
          break;
         }
        default:
         {}
        }
        if (!$cleanup$dest$slot$18$i) {
         $ofs1090$0$i$be = $add1102$i;
         $srcbuf$addr$27$i$be = $add$ptr1105$i;
         break L589;
        } else break L58;
       } while (0);
       $ofs1090$1$i = $add1102$i + $conv1104$i | 0;
       $srcbuf$addr$28$i = $add$ptr1105$i + ($conv1104$i * 3 | 0) | 0;
       label = 214;
      } while (0);
      if ((label | 0) == 214) {
       label = 0;
       if (($ofs1090$1$i | 0) == ($0 | 0)) break; else {
        $ofs1090$0$i$be = $ofs1090$1$i;
        $srcbuf$addr$27$i$be = $srcbuf$addr$28$i;
       }
      }
      $ofs1090$0$i = $ofs1090$0$i$be;
      $srcbuf$addr$27$i = $srcbuf$addr$27$i$be;
     }
     $linecount1088$0$i$ph = $linecount1088$0$i$ph + -1 | 0;
     if (!$linecount1088$0$i$ph) break; else {
      $dstbuf$addr$27$i$ph = $dstbuf$addr$27$i$ph + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$27$i$ph = $srcbuf$addr$28$i;
     }
    }
    break;
   }
  default:
   break L58;
  }
 } while (0);
 if (!(HEAP32[$surf_dst >> 2] & 2)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 _SDL_UnlockSurface($surf_dst);
 $retval$0 = 0;
 return $retval$0 | 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i185Z2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$011$i$i = 0, $K305$010$i$i = 0, $K373$017$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i173 = 0, $R$1$i173$be = 0, $R$1$i173$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i177 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i172 = 0, $RP$1$i172$be = 0, $RP$1$i172$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i50$i = 0, $T$010$i$i = 0, $T$016$i = 0, $T$09$i$i = 0, $add$i$i = 0, $add$i188 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i164 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i57$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i191 = 0, $add177$i = 0, $add215$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i145 = 0, $and104$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i39$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i174 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk136$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call131$i = 0, $call132$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i20$i = 0, $cond$i56$i = 0, $cond115$i = 0, $cond13$i$i = 0, $cond5$i = 0, $fd139$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i190 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i154 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$420$i = 0, $rsize$420$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i146 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i141 = 0, $shr$i36$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0116$i = 0, $sp$1115$i = 0, $spec$select$i159 = 0, $spec$select100$i = 0, $spec$select3$i = 0, $ssize$2$ph$i = 0, $sub$i140 = 0, $sub$i189 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub112$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub260$i = 0, $sub31$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i58$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i153 = 0, $t$2$i = 0, $t$4$i = 0, $t$519$i = 0, $t$519$i$ph = 0, $tbase$799$i = 0, $tsize$2687886$i = 0, $tsize$4$i = 0, $tsize$798$i = 0, $v$0$i = 0, $v$0$i155 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i222 = 0, $v$4$lcssa$i = 0, $v$421$i = 0, $v$421$i$ph = 0, label = 0, sp = 0, $181$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[4737] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 18988 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($3 | 0) == ($arrayidx | 0)) HEAP32[4737] = $0 & ~(1 << $add8); else {
    if ((HEAP32[4741] | 0) >>> 0 > $3 >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $7 = HEAP32[4739] | 0;
  if ($cond >>> 0 > $7 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 18988 + ($add64 << 1 << 2) | 0;
    $8 = $arrayidx66 + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($10 | 0) == ($arrayidx66 | 0)) {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[4737] = $and74;
     $14 = $and74;
    } else {
     if ((HEAP32[4741] | 0) >>> 0 > $10 >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      $14 = $0;
      break;
     } else _abort();
    } while (0);
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$9 + $shl90 >> 2] = $sub91;
    if ($7 | 0) {
     $13 = HEAP32[4742] | 0;
     $shr101 = $7 >>> 3;
     $arrayidx103 = 18988 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if (!($14 & $shl105)) {
      HEAP32[4737] = $14 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     } else {
      $15 = $arrayidx103 + 8 | 0;
      $16 = HEAP32[$15 >> 2] | 0;
      if ((HEAP32[4741] | 0) >>> 0 > $16 >>> 0) _abort(); else {
       $$pre$phiZ2D = $15;
       $F104$0 = $16;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $13;
     HEAP32[$F104$0 + 12 >> 2] = $13;
     HEAP32[$13 + 8 >> 2] = $F104$0;
     HEAP32[$13 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[4739] = $sub91;
    HEAP32[4742] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $18 = HEAP32[4738] | 0;
   if (!$18) $nb$0 = $cond; else {
    $sub2$i = ($18 & 0 - $18) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $19 = HEAP32[19252 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$19 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $19;
    $v$0$i = $19;
    while (1) {
     $21 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$21) {
      $22 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$22) break; else $cond5$i = $22;
     } else $cond5$i = $21;
     $sub31$i = (HEAP32[$cond5$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond5$i;
     $v$0$i = $cmp32$i ? $cond5$i : $v$0$i;
    }
    $24 = HEAP32[4741] | 0;
    if ($24 >>> 0 > $v$0$i >>> 0) _abort();
    $add$ptr$i = $v$0$i + $cond | 0;
    if ($add$ptr$i >>> 0 <= $v$0$i >>> 0) _abort();
    $25 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $26 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($26 | 0) == ($v$0$i | 0)) {
     $arrayidx61$i = $v$0$i + 20 | 0;
     $30 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (!$30) {
      $arrayidx65$i = $v$0$i + 16 | 0;
      $31 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (!$31) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i$ph = $31;
       $RP$1$i$ph = $arrayidx65$i;
      }
     } else {
      $R$1$i$ph = $30;
      $RP$1$i$ph = $arrayidx61$i;
     }
     $R$1$i = $R$1$i$ph;
     $RP$1$i = $RP$1$i$ph;
     while (1) {
      $arrayidx71$i = $R$1$i + 20 | 0;
      $32 = HEAP32[$arrayidx71$i >> 2] | 0;
      if (!$32) {
       $arrayidx75$i = $R$1$i + 16 | 0;
       $33 = HEAP32[$arrayidx75$i >> 2] | 0;
       if (!$33) break; else {
        $R$1$i$be = $33;
        $RP$1$i$be = $arrayidx75$i;
       }
      } else {
       $R$1$i$be = $32;
       $RP$1$i$be = $arrayidx71$i;
      }
      $R$1$i = $R$1$i$be;
      $RP$1$i = $RP$1$i$be;
     }
     if ($24 >>> 0 > $RP$1$i >>> 0) _abort(); else {
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
      break;
     }
    } else {
     $27 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($24 >>> 0 > $27 >>> 0) _abort();
     $bk47$i = $27 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$i | 0)) _abort();
     $fd50$i = $26 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$bk47$i >> 2] = $26;
      HEAP32[$fd50$i >> 2] = $27;
      $R$3$i = $26;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($25 | 0) {
     $34 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $arrayidx94$i = 19252 + ($34 << 2) | 0;
     do if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[4738] = $18 & ~(1 << $34);
       break L78;
      }
     } else if ((HEAP32[4741] | 0) >>> 0 > $25 >>> 0) _abort(); else {
      $arrayidx113$i = $25 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0) ? $arrayidx113$i : $25 + 20 | 0) >> 2] = $R$3$i;
      if (!$R$3$i) break L78; else break;
     } while (0);
     $38 = HEAP32[4741] | 0;
     if ($38 >>> 0 > $R$3$i >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $25;
     $39 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($39 | 0) if ($38 >>> 0 > $39 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $39;
      HEAP32[$39 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $40 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($40 | 0) if ((HEAP32[4741] | 0) >>> 0 > $40 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $40;
      HEAP32[$40 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $add177$i = $rsize$0$i + $cond | 0;
     HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$i + $add177$i + 4 | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
     HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$i | 1;
     HEAP32[$add$ptr$i + $rsize$0$i >> 2] = $rsize$0$i;
     if ($7 | 0) {
      $43 = HEAP32[4742] | 0;
      $shr194$i = $7 >>> 3;
      $arrayidx196$i = 18988 + ($shr194$i << 1 << 2) | 0;
      $shl198$i = 1 << $shr194$i;
      if (!($shl198$i & $0)) {
       HEAP32[4737] = $shl198$i | $0;
       $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
       $F197$0$i = $arrayidx196$i;
      } else {
       $44 = $arrayidx196$i + 8 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       if ((HEAP32[4741] | 0) >>> 0 > $45 >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $44;
        $F197$0$i = $45;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $43;
      HEAP32[$F197$0$i + 12 >> 2] = $43;
      HEAP32[$43 + 8 >> 2] = $F197$0$i;
      HEAP32[$43 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[4739] = $rsize$0$i;
     HEAP32[4742] = $add$ptr$i;
    }
    $retval$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $47 = HEAP32[4738] | 0;
  if (!$47) $nb$0 = $and145; else {
   $sub$i140 = 0 - $and145 | 0;
   $shr$i141 = $add144 >>> 8;
   if (!$shr$i141) $idx$0$i = 0; else if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i145 = ($shr$i141 + 1048320 | 0) >>> 16 & 8;
    $shl$i146 = $shr$i141 << $and$i145;
    $and8$i = ($shl$i146 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i146 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i145 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   }
   $48 = HEAP32[19252 + ($idx$0$i << 2) >> 2] | 0;
   L122 : do if (!$48) {
    $rsize$3$i = $sub$i140;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 85;
   } else {
    $rsize$0$i154 = $sub$i140;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i153 = $48;
    $v$0$i155 = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i153 + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i154 >>> 0) if (!$sub33$i) {
      $rsize$420$i$ph = 0;
      $t$519$i$ph = $t$0$i153;
      $v$421$i$ph = $t$0$i153;
      label = 89;
      break L122;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i153;
     } else {
      $rsize$1$i = $rsize$0$i154;
      $v$1$i = $v$0$i155;
     }
     $50 = HEAP32[$t$0$i153 + 20 >> 2] | 0;
     $t$0$i153 = HEAP32[$t$0$i153 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($50 | 0) == 0 | ($50 | 0) == ($t$0$i153 | 0) ? $rst$0$i : $50;
     if (!$t$0$i153) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 85;
      break;
     } else {
      $rsize$0$i154 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i155 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = ($shl60$i | 0 - $shl60$i) & $47;
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$i = HEAP32[19252 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$3$i222 = 0;
    } else {
     $t$4$i = $t$2$i;
     $v$3$i222 = $v$3$i;
    }
    if (!$t$4$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i222;
    } else {
     $rsize$420$i$ph = $rsize$3$i;
     $t$519$i$ph = $t$4$i;
     $v$421$i$ph = $v$3$i222;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $rsize$420$i = $rsize$420$i$ph;
    $t$519$i = $t$519$i$ph;
    $v$421$i = $v$421$i$ph;
    while (1) {
     $sub101$i = (HEAP32[$t$519$i + 4 >> 2] & -8) - $and145 | 0;
     $cmp102$i = $sub101$i >>> 0 < $rsize$420$i >>> 0;
     $spec$select$i159 = $cmp102$i ? $sub101$i : $rsize$420$i;
     $spec$select3$i = $cmp102$i ? $t$519$i : $v$421$i;
     $54 = HEAP32[$t$519$i + 16 >> 2] | 0;
     if (!$54) $cond115$i = HEAP32[$t$519$i + 20 >> 2] | 0; else $cond115$i = $54;
     if (!$cond115$i) {
      $rsize$4$lcssa$i = $spec$select$i159;
      $v$4$lcssa$i = $spec$select3$i;
      break;
     } else {
      $rsize$420$i = $spec$select$i159;
      $t$519$i = $cond115$i;
      $v$421$i = $spec$select3$i;
     }
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $and145; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[4739] | 0) - $and145 | 0) >>> 0) {
    $57 = HEAP32[4741] | 0;
    if ($57 >>> 0 > $v$4$lcssa$i >>> 0) _abort();
    $add$ptr$i164 = $v$4$lcssa$i + $and145 | 0;
    if ($add$ptr$i164 >>> 0 <= $v$4$lcssa$i >>> 0) _abort();
    $58 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $59 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($59 | 0) == ($v$4$lcssa$i | 0)) {
     $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
     $63 = HEAP32[$arrayidx151$i >> 2] | 0;
     if (!$63) {
      $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
      $64 = HEAP32[$arrayidx155$i >> 2] | 0;
      if (!$64) {
       $R$3$i177 = 0;
       break;
      } else {
       $R$1$i173$ph = $64;
       $RP$1$i172$ph = $arrayidx155$i;
      }
     } else {
      $R$1$i173$ph = $63;
      $RP$1$i172$ph = $arrayidx151$i;
     }
     $R$1$i173 = $R$1$i173$ph;
     $RP$1$i172 = $RP$1$i172$ph;
     while (1) {
      $arrayidx161$i = $R$1$i173 + 20 | 0;
      $65 = HEAP32[$arrayidx161$i >> 2] | 0;
      if (!$65) {
       $arrayidx165$i174 = $R$1$i173 + 16 | 0;
       $66 = HEAP32[$arrayidx165$i174 >> 2] | 0;
       if (!$66) break; else {
        $R$1$i173$be = $66;
        $RP$1$i172$be = $arrayidx165$i174;
       }
      } else {
       $R$1$i173$be = $65;
       $RP$1$i172$be = $arrayidx161$i;
      }
      $R$1$i173 = $R$1$i173$be;
      $RP$1$i172 = $RP$1$i172$be;
     }
     if ($57 >>> 0 > $RP$1$i172 >>> 0) _abort(); else {
      HEAP32[$RP$1$i172 >> 2] = 0;
      $R$3$i177 = $R$1$i173;
      break;
     }
    } else {
     $60 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($57 >>> 0 > $60 >>> 0) _abort();
     $bk136$i = $60 + 12 | 0;
     if ((HEAP32[$bk136$i >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $fd139$i = $59 + 8 | 0;
     if ((HEAP32[$fd139$i >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$bk136$i >> 2] = $59;
      HEAP32[$fd139$i >> 2] = $60;
      $R$3$i177 = $59;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$58) $80 = $47; else {
     $67 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $arrayidx184$i = 19252 + ($67 << 2) | 0;
     do if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
      HEAP32[$arrayidx184$i >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $and194$i = $47 & ~(1 << $67);
       HEAP32[4738] = $and194$i;
       $80 = $and194$i;
       break L176;
      }
     } else if ((HEAP32[4741] | 0) >>> 0 > $58 >>> 0) _abort(); else {
      $arrayidx204$i = $58 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx204$i >> 2] | 0) == ($v$4$lcssa$i | 0) ? $arrayidx204$i : $58 + 20 | 0) >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $80 = $47;
       break L176;
      } else break;
     } while (0);
     $71 = HEAP32[4741] | 0;
     if ($71 >>> 0 > $R$3$i177 >>> 0) _abort();
     HEAP32[$R$3$i177 + 24 >> 2] = $58;
     $72 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($72 | 0) if ($71 >>> 0 > $72 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 16 >> 2] = $72;
      HEAP32[$72 + 24 >> 2] = $R$3$i177;
      break;
     } while (0);
     $73 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if (!$73) $80 = $47; else if ((HEAP32[4741] | 0) >>> 0 > $73 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 20 >> 2] = $73;
      HEAP32[$73 + 24 >> 2] = $R$3$i177;
      $80 = $47;
      break;
     }
    } while (0);
    L200 : do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $add268$i = $rsize$4$lcssa$i + $and145 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
     $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
     HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
     HEAP32[$add$ptr$i164 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$add$ptr$i164 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $shr283$i = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $arrayidx289$i = 18988 + ($shr283$i << 1 << 2) | 0;
      $76 = HEAP32[4737] | 0;
      $shl291$i = 1 << $shr283$i;
      if (!($76 & $shl291$i)) {
       HEAP32[4737] = $76 | $shl291$i;
       $$pre$phi$i185Z2D = $arrayidx289$i + 8 | 0;
       $F290$0$i = $arrayidx289$i;
      } else {
       $77 = $arrayidx289$i + 8 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       if ((HEAP32[4741] | 0) >>> 0 > $78 >>> 0) _abort(); else {
        $$pre$phi$i185Z2D = $77;
        $F290$0$i = $78;
       }
      }
      HEAP32[$$pre$phi$i185Z2D >> 2] = $add$ptr$i164;
      HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $F290$0$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $arrayidx289$i;
      break;
     }
     $shr318$i = $rsize$4$lcssa$i >>> 8;
     if (!$shr318$i) $I316$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
      $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
      $shl333$i = $shr318$i << $and331$i;
      $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
      $shl338$i = $shl333$i << $and336$i;
      $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
      $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
      $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
     }
     $arrayidx355$i = 19252 + ($I316$0$i << 2) | 0;
     HEAP32[$add$ptr$i164 + 28 >> 2] = $I316$0$i;
     $child357$i = $add$ptr$i164 + 16 | 0;
     HEAP32[$child357$i + 4 >> 2] = 0;
     HEAP32[$child357$i >> 2] = 0;
     $shl362$i = 1 << $I316$0$i;
     if (!($80 & $shl362$i)) {
      HEAP32[4738] = $80 | $shl362$i;
      HEAP32[$arrayidx355$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 24 >> 2] = $arrayidx355$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
      break;
     }
     $81 = HEAP32[$arrayidx355$i >> 2] | 0;
     L218 : do if ((HEAP32[$81 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) $T$0$lcssa$i = $81; else {
      $K373$017$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
      $T$016$i = $81;
      while (1) {
       $arrayidx394$i = $T$016$i + 16 + ($K373$017$i >>> 31 << 2) | 0;
       $83 = HEAP32[$arrayidx394$i >> 2] | 0;
       if (!$83) break;
       if ((HEAP32[$83 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
        $T$0$lcssa$i = $83;
        break L218;
       } else {
        $K373$017$i = $K373$017$i << 1;
        $T$016$i = $83;
       }
      }
      if ((HEAP32[4741] | 0) >>> 0 > $arrayidx394$i >>> 0) _abort(); else {
       HEAP32[$arrayidx394$i >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 24 >> 2] = $T$016$i;
       HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
       break L200;
      }
     } while (0);
     $fd416$i = $T$0$lcssa$i + 8 | 0;
     $86 = HEAP32[$fd416$i >> 2] | 0;
     $87 = HEAP32[4741] | 0;
     if ($87 >>> 0 <= $86 >>> 0 & $87 >>> 0 <= $T$0$lcssa$i >>> 0) {
      HEAP32[$86 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$fd416$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $86;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $T$0$lcssa$i;
      HEAP32[$add$ptr$i164 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $and145;
  }
 } while (0);
 $89 = HEAP32[4739] | 0;
 if ($89 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $89 - $nb$0 | 0;
  $90 = HEAP32[4742] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $90 + $nb$0 | 0;
   HEAP32[4742] = $add$ptr166;
   HEAP32[4739] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$90 + $89 >> 2] = $sub160;
   HEAP32[$90 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[4739] = 0;
   HEAP32[4742] = 0;
   HEAP32[$90 + 4 >> 2] = $89 | 3;
   $head179 = $90 + $89 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $90 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $92 = HEAP32[4740] | 0;
 if ($92 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $92 - $nb$0 | 0;
  HEAP32[4740] = $sub190;
  $93 = HEAP32[4743] | 0;
  $add$ptr193 = $93 + $nb$0 | 0;
  HEAP32[4743] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$93 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $93 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[4855] | 0)) {
  HEAP32[4857] = 4096;
  HEAP32[4856] = 4096;
  HEAP32[4858] = -1;
  HEAP32[4859] = -1;
  HEAP32[4860] = 0;
  HEAP32[4848] = 0;
  HEAP32[4855] = $magic$i$i & -16 ^ 1431655768;
  $96 = 4096;
 } else $96 = HEAP32[4857] | 0;
 $add$i188 = $nb$0 + 48 | 0;
 $sub$i189 = $nb$0 + 47 | 0;
 $add9$i = $96 + $sub$i189 | 0;
 $neg$i190 = 0 - $96 | 0;
 $and11$i = $add9$i & $neg$i190;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $97 = HEAP32[4847] | 0;
 if ($97 | 0) {
  $98 = HEAP32[4845] | 0;
  $add17$i191 = $98 + $and11$i | 0;
  if ($add17$i191 >>> 0 <= $98 >>> 0 | $add17$i191 >>> 0 > $97 >>> 0) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[4848] & 4)) {
  $100 = HEAP32[4743] | 0;
  L259 : do if (!$100) label = 173; else {
   $sp$0$i$i = 19396;
   while (1) {
    $101 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($101 >>> 0 <= $100 >>> 0) if (($101 + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $100 >>> 0) break;
    $103 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$103) {
     label = 173;
     break L259;
    } else $sp$0$i$i = $103;
   }
   $and80$i = $add9$i - $92 & $neg$i190;
   if ($and80$i >>> 0 < 2147483647) {
    $call83$i = _sbrk($and80$i | 0) | 0;
    if (($call83$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0)) if (($call83$i | 0) == (-1 | 0)) $tsize$2687886$i = $and80$i; else {
     $tbase$799$i = $call83$i;
     $tsize$798$i = $and80$i;
     label = 190;
     break L257;
    } else {
     $br$2$ph$i = $call83$i;
     $ssize$2$ph$i = $and80$i;
     label = 181;
    }
   } else $tsize$2687886$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $call37$i = _sbrk(0) | 0;
   if (($call37$i | 0) == (-1 | 0)) $tsize$2687886$i = 0; else {
    $104 = $call37$i;
    $105 = HEAP32[4856] | 0;
    $sub41$i = $105 + -1 | 0;
    $spec$select100$i = (($sub41$i & $104 | 0) == 0 ? 0 : ($sub41$i + $104 & 0 - $105) - $104 | 0) + $and11$i | 0;
    $106 = HEAP32[4845] | 0;
    $add54$i = $spec$select100$i + $106 | 0;
    if ($spec$select100$i >>> 0 > $nb$0 >>> 0 & $spec$select100$i >>> 0 < 2147483647) {
     $107 = HEAP32[4847] | 0;
     if ($107 | 0) if ($add54$i >>> 0 <= $106 >>> 0 | $add54$i >>> 0 > $107 >>> 0) {
      $tsize$2687886$i = 0;
      break;
     }
     $call68$i = _sbrk($spec$select100$i | 0) | 0;
     if (($call68$i | 0) == ($call37$i | 0)) {
      $tbase$799$i = $call37$i;
      $tsize$798$i = $spec$select100$i;
      label = 190;
      break L257;
     } else {
      $br$2$ph$i = $call68$i;
      $ssize$2$ph$i = $spec$select100$i;
      label = 181;
     }
    } else $tsize$2687886$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $sub112$i = 0 - $ssize$2$ph$i | 0;
   if (!($add$i188 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   $110 = HEAP32[4857] | 0;
   $and104$i = $sub$i189 - $ssize$2$ph$i + $110 & 0 - $110;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($and104$i | 0) | 0) == (-1 | 0)) {
    _sbrk($sub112$i | 0) | 0;
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $and104$i + $ssize$2$ph$i | 0;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[4848] = HEAP32[4848] | 4;
  $tsize$4$i = $tsize$2687886$i;
  label = 188;
 } else {
  $tsize$4$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($and11$i >>> 0 < 2147483647) {
  $call131$i = _sbrk($and11$i | 0) | 0;
  $call132$i = _sbrk(0) | 0;
  $sub$ptr$sub$i = $call132$i - $call131$i | 0;
  $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
  if (!(($call131$i | 0) == (-1 | 0) | $cmp141$i ^ 1 | $call131$i >>> 0 < $call132$i >>> 0 & (($call131$i | 0) != (-1 | 0) & ($call132$i | 0) != (-1 | 0)) ^ 1)) {
   $tbase$799$i = $call131$i;
   $tsize$798$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $add150$i = (HEAP32[4845] | 0) + $tsize$798$i | 0;
  HEAP32[4845] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[4846] | 0) >>> 0) HEAP32[4846] = $add150$i;
  $114 = HEAP32[4743] | 0;
  L294 : do if (!$114) {
   $115 = HEAP32[4741] | 0;
   if (($115 | 0) == 0 | $tbase$799$i >>> 0 < $115 >>> 0) HEAP32[4741] = $tbase$799$i;
   HEAP32[4849] = $tbase$799$i;
   HEAP32[4850] = $tsize$798$i;
   HEAP32[4852] = 0;
   HEAP32[4746] = HEAP32[4855];
   HEAP32[4745] = -1;
   HEAP32[4750] = 18988;
   HEAP32[4749] = 18988;
   HEAP32[4752] = 18996;
   HEAP32[4751] = 18996;
   HEAP32[4754] = 19004;
   HEAP32[4753] = 19004;
   HEAP32[4756] = 19012;
   HEAP32[4755] = 19012;
   HEAP32[4758] = 19020;
   HEAP32[4757] = 19020;
   HEAP32[4760] = 19028;
   HEAP32[4759] = 19028;
   HEAP32[4762] = 19036;
   HEAP32[4761] = 19036;
   HEAP32[4764] = 19044;
   HEAP32[4763] = 19044;
   HEAP32[4766] = 19052;
   HEAP32[4765] = 19052;
   HEAP32[4768] = 19060;
   HEAP32[4767] = 19060;
   HEAP32[4770] = 19068;
   HEAP32[4769] = 19068;
   HEAP32[4772] = 19076;
   HEAP32[4771] = 19076;
   HEAP32[4774] = 19084;
   HEAP32[4773] = 19084;
   HEAP32[4776] = 19092;
   HEAP32[4775] = 19092;
   HEAP32[4778] = 19100;
   HEAP32[4777] = 19100;
   HEAP32[4780] = 19108;
   HEAP32[4779] = 19108;
   HEAP32[4782] = 19116;
   HEAP32[4781] = 19116;
   HEAP32[4784] = 19124;
   HEAP32[4783] = 19124;
   HEAP32[4786] = 19132;
   HEAP32[4785] = 19132;
   HEAP32[4788] = 19140;
   HEAP32[4787] = 19140;
   HEAP32[4790] = 19148;
   HEAP32[4789] = 19148;
   HEAP32[4792] = 19156;
   HEAP32[4791] = 19156;
   HEAP32[4794] = 19164;
   HEAP32[4793] = 19164;
   HEAP32[4796] = 19172;
   HEAP32[4795] = 19172;
   HEAP32[4798] = 19180;
   HEAP32[4797] = 19180;
   HEAP32[4800] = 19188;
   HEAP32[4799] = 19188;
   HEAP32[4802] = 19196;
   HEAP32[4801] = 19196;
   HEAP32[4804] = 19204;
   HEAP32[4803] = 19204;
   HEAP32[4806] = 19212;
   HEAP32[4805] = 19212;
   HEAP32[4808] = 19220;
   HEAP32[4807] = 19220;
   HEAP32[4810] = 19228;
   HEAP32[4809] = 19228;
   HEAP32[4812] = 19236;
   HEAP32[4811] = 19236;
   $sub172$i = $tsize$798$i + -40 | 0;
   $117 = $tbase$799$i + 8 | 0;
   $cond$i20$i = ($117 & 7 | 0) == 0 ? 0 : 0 - $117 & 7;
   $add$ptr4$i$i = $tbase$799$i + $cond$i20$i | 0;
   $sub5$i$i = $sub172$i - $cond$i20$i | 0;
   HEAP32[4743] = $add$ptr4$i$i;
   HEAP32[4740] = $sub5$i$i;
   HEAP32[$add$ptr4$i$i + 4 >> 2] = $sub5$i$i | 1;
   HEAP32[$tbase$799$i + $sub172$i + 4 >> 2] = 40;
   HEAP32[4744] = HEAP32[4859];
  } else {
   $sp$0116$i = 19396;
   while (1) {
    $119 = HEAP32[$sp$0116$i >> 2] | 0;
    $120 = HEAP32[$sp$0116$i + 4 >> 2] | 0;
    if (($tbase$799$i | 0) == ($119 + $120 | 0)) {
     label = 199;
     break;
    }
    $121 = HEAP32[$sp$0116$i + 8 >> 2] | 0;
    if (!$121) break; else $sp$0116$i = $121;
   }
   if ((label | 0) == 199) {
    $size188$i$le = $sp$0116$i + 4 | 0;
    if (!(HEAP32[$sp$0116$i + 12 >> 2] & 8)) if ($tbase$799$i >>> 0 > $114 >>> 0 & $119 >>> 0 <= $114 >>> 0) {
     HEAP32[$size188$i$le >> 2] = $120 + $tsize$798$i;
     $add215$i = (HEAP32[4740] | 0) + $tsize$798$i | 0;
     $124 = $114 + 8 | 0;
     $cond$i56$i = ($124 & 7 | 0) == 0 ? 0 : 0 - $124 & 7;
     $add$ptr4$i57$i = $114 + $cond$i56$i | 0;
     $sub5$i58$i = $add215$i - $cond$i56$i | 0;
     HEAP32[4743] = $add$ptr4$i57$i;
     HEAP32[4740] = $sub5$i58$i;
     HEAP32[$add$ptr4$i57$i + 4 >> 2] = $sub5$i58$i | 1;
     HEAP32[$114 + $add215$i + 4 >> 2] = 40;
     HEAP32[4744] = HEAP32[4859];
     break;
    }
   }
   $126 = HEAP32[4741] | 0;
   if ($tbase$799$i >>> 0 < $126 >>> 0) {
    HEAP32[4741] = $tbase$799$i;
    $139 = $tbase$799$i;
   } else $139 = $126;
   $add$ptr227$i = $tbase$799$i + $tsize$798$i | 0;
   $sp$1115$i = 19396;
   while (1) {
    if ((HEAP32[$sp$1115$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 207;
     break;
    }
    $128 = HEAP32[$sp$1115$i + 8 >> 2] | 0;
    if (!$128) break; else $sp$1115$i = $128;
   }
   if ((label | 0) == 207) if (!(HEAP32[$sp$1115$i + 12 >> 2] & 8)) {
    HEAP32[$sp$1115$i >> 2] = $tbase$799$i;
    $size245$i = $sp$1115$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$798$i;
    $131 = $tbase$799$i + 8 | 0;
    $add$ptr4$i28$i = $tbase$799$i + (($131 & 7 | 0) == 0 ? 0 : 0 - $131 & 7) | 0;
    $132 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($132 & 7 | 0) == 0 ? 0 : 0 - $132 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i28$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i28$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i28$i + 4 >> 2] = $nb$0 | 3;
    L317 : do if (($114 | 0) == ($add$ptr16$i$i | 0)) {
     $add$i$i = (HEAP32[4740] | 0) + $sub18$i$i | 0;
     HEAP32[4740] = $add$i$i;
     HEAP32[4743] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } else {
     if ((HEAP32[4742] | 0) == ($add$ptr16$i$i | 0)) {
      $add26$i$i = (HEAP32[4739] | 0) + $sub18$i$i | 0;
      HEAP32[4739] = $add26$i$i;
      HEAP32[4742] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $136 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($136 & 3 | 0) == 1) {
      $and37$i$i = $136 & -8;
      $shr$i36$i = $136 >>> 3;
      L325 : do if ($136 >>> 0 < 256) {
       $137 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $138 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       $arrayidx$i39$i = 18988 + ($shr$i36$i << 1 << 2) | 0;
       do if (($137 | 0) != ($arrayidx$i39$i | 0)) {
        if ($139 >>> 0 > $137 >>> 0) _abort();
        if ((HEAP32[$137 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($138 | 0) == ($137 | 0)) {
        HEAP32[4737] = HEAP32[4737] & ~(1 << $shr$i36$i);
        break;
       }
       do if (($138 | 0) == ($arrayidx$i39$i | 0)) $fd68$pre$phi$i$iZ2D = $138 + 8 | 0; else {
        if ($139 >>> 0 > $138 >>> 0) _abort();
        $fd59$i$i = $138 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$137 + 12 >> 2] = $138;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $137;
      } else {
       $143 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $144 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($144 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $148 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$148) {
         $149 = HEAP32[$child$i$i >> 2] | 0;
         if (!$149) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i$ph = $149;
          $RP$1$i$i$ph = $child$i$i;
         }
        } else {
         $R$1$i$i$ph = $148;
         $RP$1$i$i$ph = $arrayidx96$i$i;
        }
        $R$1$i$i = $R$1$i$i$ph;
        $RP$1$i$i = $RP$1$i$i$ph;
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $150 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (!$150) {
          $arrayidx107$i$i = $R$1$i$i + 16 | 0;
          $151 = HEAP32[$arrayidx107$i$i >> 2] | 0;
          if (!$151) break; else {
           $R$1$i$i$be = $151;
           $RP$1$i$i$be = $arrayidx107$i$i;
          }
         } else {
          $R$1$i$i$be = $150;
          $RP$1$i$i$be = $arrayidx103$i$i;
         }
         $R$1$i$i = $R$1$i$i$be;
         $RP$1$i$i = $RP$1$i$i$be;
        }
        if ($139 >>> 0 > $RP$1$i$i >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i >> 2] = 0;
         $R$3$i$i = $R$1$i$i;
         break;
        }
       } else {
        $145 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        if ($139 >>> 0 > $145 >>> 0) _abort();
        $bk82$i$i = $145 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $144 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $144;
         HEAP32[$fd85$i$i >> 2] = $145;
         $R$3$i$i = $144;
         break;
        } else _abort();
       } while (0);
       if (!$143) break;
       $152 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 19252 + ($152 << 2) | 0;
       do if ((HEAP32[$arrayidx123$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[4738] = HEAP32[4738] & ~(1 << $152);
        break L325;
       } else if ((HEAP32[4741] | 0) >>> 0 > $143 >>> 0) _abort(); else {
        $arrayidx143$i$i = $143 + 16 | 0;
        HEAP32[((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0) ? $arrayidx143$i$i : $143 + 20 | 0) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L325; else break;
       } while (0);
       $157 = HEAP32[4741] | 0;
       if ($157 >>> 0 > $R$3$i$i >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $143;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $158 = HEAP32[$child166$i$i >> 2] | 0;
       do if ($158 | 0) if ($157 >>> 0 > $158 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $158;
        HEAP32[$158 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $159 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$159) break;
       if ((HEAP32[4741] | 0) >>> 0 > $159 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $159;
        HEAP32[$159 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 18988 + ($shr214$i$i << 1 << 2) | 0;
      $162 = HEAP32[4737] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (!($162 & $shl226$i$i)) {
       HEAP32[4737] = $162 | $shl226$i$i;
       $$pre$phi$i48$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $163 = $arrayidx223$i$i + 8 | 0;
       $164 = HEAP32[$163 >> 2] | 0;
       if ((HEAP32[4741] | 0) >>> 0 <= $164 >>> 0) {
        $$pre$phi$i48$iZ2D = $163;
        $F224$0$i$i = $164;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i48$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 19252 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $166 = HEAP32[4738] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($166 & $shl294$i$i)) {
      HEAP32[4738] = $166 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $167 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     L410 : do if ((HEAP32[$167 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i50$i = $167; else {
      $K305$010$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
      $T$09$i$i = $167;
      while (1) {
       $arrayidx325$i$i = $T$09$i$i + 16 + ($K305$010$i$i >>> 31 << 2) | 0;
       $169 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (!$169) break;
       if ((HEAP32[$169 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i50$i = $169;
        break L410;
       } else {
        $K305$010$i$i = $K305$010$i$i << 1;
        $T$09$i$i = $169;
       }
      }
      if ((HEAP32[4741] | 0) >>> 0 > $arrayidx325$i$i >>> 0) _abort(); else {
       HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$09$i$i;
       HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
       break L317;
      }
     } while (0);
     $fd344$i$i = $T$0$lcssa$i50$i + 8 | 0;
     $172 = HEAP32[$fd344$i$i >> 2] | 0;
     $173 = HEAP32[4741] | 0;
     if ($173 >>> 0 <= $172 >>> 0 & $173 >>> 0 <= $T$0$lcssa$i50$i >>> 0) {
      HEAP32[$172 + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $172;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$lcssa$i50$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $add$ptr4$i28$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 19396;
   while (1) {
    $175 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($175 >>> 0 <= $114 >>> 0) {
     $add$ptr$i$i$i = $175 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($add$ptr$i$i$i >>> 0 > $114 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $178 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($178 & 7 | 0) == 0 ? 0 : 0 - $178 & 7) | 0;
   $add$ptr81$i$i = $114 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $114 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $sub16$i$i = $tsize$798$i + -40 | 0;
   $179 = $tbase$799$i + 8 | 0;
   $cond$i$i$i = ($179 & 7 | 0) == 0 ? 0 : 0 - $179 & 7;
   $add$ptr4$i$i$i = $tbase$799$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
   HEAP32[4743] = $add$ptr4$i$i$i;
   HEAP32[4740] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$799$i + $sub16$i$i + 4 >> 2] = 40;
   HEAP32[4744] = HEAP32[4859];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[4849];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[4850];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[4851];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[4852];
   HEAP32[4849] = $tbase$799$i;
   HEAP32[4850] = $tsize$798$i;
   HEAP32[4852] = 0;
   HEAP32[4851] = $add$ptr14$i$i;
   $181 = $cond13$i$i + 24 | 0;
   do {
    $181$looptemp = $181;
    $181 = $181 + 4 | 0;
    HEAP32[$181 >> 2] = 7;
   } while (($181$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($114 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $114 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$114 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 18988 + ($shr$i$i << 1 << 2) | 0;
     $183 = HEAP32[4737] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if (!($183 & $shl39$i$i)) {
      HEAP32[4737] = $183 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     } else {
      $184 = $arrayidx$i$i + 8 | 0;
      $185 = HEAP32[$184 >> 2] | 0;
      if ((HEAP32[4741] | 0) >>> 0 > $185 >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $184;
       $F$0$i$i = $185;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $114;
     HEAP32[$F$0$i$i + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $F$0$i$i;
     HEAP32[$114 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (!$shr58$i$i) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 19252 + ($I57$0$i$i << 2) | 0;
    HEAP32[$114 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$114 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $187 = HEAP32[4738] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($187 & $shl95$i$i)) {
     HEAP32[4738] = $187 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $114;
     HEAP32[$114 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$114 + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $114;
     break;
    }
    $188 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    L451 : do if ((HEAP32[$188 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) $T$0$lcssa$i$i = $188; else {
     $K105$011$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
     $T$010$i$i = $188;
     while (1) {
      $arrayidx126$i$i = $T$010$i$i + 16 + ($K105$011$i$i >>> 31 << 2) | 0;
      $190 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (!$190) break;
      if ((HEAP32[$190 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $190;
       break L451;
      } else {
       $K105$011$i$i = $K105$011$i$i << 1;
       $T$010$i$i = $190;
      }
     }
     if ((HEAP32[4741] | 0) >>> 0 > $arrayidx126$i$i >>> 0) _abort(); else {
      HEAP32[$arrayidx126$i$i >> 2] = $114;
      HEAP32[$114 + 24 >> 2] = $T$010$i$i;
      HEAP32[$114 + 12 >> 2] = $114;
      HEAP32[$114 + 8 >> 2] = $114;
      break L294;
     }
    } while (0);
    $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
    $193 = HEAP32[$fd148$i$i >> 2] | 0;
    $194 = HEAP32[4741] | 0;
    if ($194 >>> 0 <= $193 >>> 0 & $194 >>> 0 <= $T$0$lcssa$i$i >>> 0) {
     HEAP32[$193 + 12 >> 2] = $114;
     HEAP32[$fd148$i$i >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $193;
     HEAP32[$114 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$114 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $196 = HEAP32[4740] | 0;
  if ($196 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $196 - $nb$0 | 0;
   HEAP32[4740] = $sub260$i;
   $197 = HEAP32[4743] | 0;
   $add$ptr262$i = $197 + $nb$0 | 0;
   HEAP32[4743] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$197 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $197 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_RLEAlphaBlit($surf_src, $srcrect, $surf_dst, $dstrect) {
 $surf_src = $surf_src | 0;
 $srcrect = $srcrect | 0;
 $surf_dst = $surf_dst | 0;
 $dstrect = $dstrect | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $29 = 0, $32 = 0, $33 = 0, $39 = 0, $42 = 0, $43 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr121 = 0, $add$ptr14$i = 0, $add$ptr142$i = 0, $add$ptr152 = 0, $add$ptr195$i = 0, $add$ptr207 = 0, $add$ptr21 = 0, $add$ptr217$i = 0, $add$ptr220$i = 0, $add$ptr238 = 0, $add$ptr300$i = 0, $add$ptr309 = 0, $add$ptr338 = 0, $add$ptr351$i = 0, $add$ptr373$i = 0, $add$ptr376$i = 0, $add$ptr54$i = 0, $add$ptr62 = 0, $add$ptr75$i = 0, $add$ptr77$i = 0, $add$ptr8 = 0, $add$ptr9 = 0, $add11$i = 0, $add118 = 0, $add129$i = 0, $add139$i = 0, $add149 = 0, $add192$i = 0, $add204 = 0, $add235 = 0, $add287$i = 0, $add297$i = 0, $add306 = 0, $add335 = 0, $add348$i = 0, $add51$i = 0, $add59 = 0, $and163 = 0, $and167 = 0, $and238$i = 0, $and243$i = 0, $and259 = 0, $and264 = 0, $and355 = 0, $and362 = 0, $and390$i = 0, $and397$i = 0, $and86$i = 0, $and91$i = 0, $arrayidx230$i = 0, $arrayidx386$i = 0, $arrayidx82$i = 0, $cmp148$i = 0, $cmp16$i = 0, $cmp201$i = 0, $cmp306$i = 0, $cmp357$i = 0, $cmp60$i = 0, $conv120 = 0, $conv13$i = 0, $conv141$i = 0, $conv151 = 0, $conv159 = 0, $conv194$i = 0, $conv20 = 0, $conv206 = 0, $conv231$i = 0, $conv237 = 0, $conv252 = 0, $conv299$i = 0, $conv308 = 0, $conv337 = 0, $conv350$i = 0, $conv41 = 0, $conv53$i = 0, $conv61 = 0, $conv83$i = 0, $crun$1$i = 0, $crun146$1$i = 0, $crun199$1$i = 0, $crun304$1$i = 0, $crun355$1$i = 0, $crun58$1$i = 0, $dst$0287 = 0, $dst241$0290 = 0, $dst341$0295 = 0, $dstbuf$0 = 0, $dstbuf$2 = 0, $dstbuf$4 = 0, $dstbuf$addr$0$i = 0, $dstbuf$addr$2$i = 0, $dstbuf$addr$4$i = 0, $format = 0, $i$0286 = 0, $i$0333$i = 0, $i221$0335$i = 0, $i243$0291 = 0, $i343$0296 = 0, $i377$0337$i = 0, $linecount$0 = 0, $linecount$0$i = 0, $linecount123$0$i = 0, $linecount196$0 = 0, $linecount281$0$i = 0, $linecount298$0 = 0, $mul126 = 0, $mul212 = 0, $mul314 = 0, $ofs$0 = 0, $ofs$0$i = 0, $ofs$1 = 0, $ofs$1$i = 0, $ofs$3 = 0, $ofs$3$i = 0, $ofs$4 = 0, $ofs$4$i = 0, $ofs$5 = 0, $ofs113$0 = 0, $ofs113$1 = 0, $ofs113$3 = 0, $ofs113$4 = 0, $ofs134$0$i = 0, $ofs134$1$i = 0, $ofs134$3$i = 0, $ofs134$4$i = 0, $ofs199$0 = 0, $ofs199$1 = 0, $ofs199$3 = 0, $ofs199$4 = 0, $ofs292$0$i = 0, $ofs292$1$i = 0, $ofs292$3$i = 0, $ofs292$4$i = 0, $ofs301$0 = 0, $ofs301$1 = 0, $ofs301$3 = 0, $ofs301$4 = 0, $pitch = 0, $retval$0 = 0, $shr353 = 0, $shr388$i = 0, $spec$select$i = 0, $spec$select298$i = 0, $spec$select299$i = 0, $spec$select300$i = 0, $spec$select301$i = 0, $spec$select302$i = 0, $spec$select303$i = 0, $spec$select304$i = 0, $spec$select305$i = 0, $spec$select306$i = 0, $spec$select307$i = 0, $spec$select308$i = 0, $srcbuf$0 = 0, $srcbuf$1 = 0, $srcbuf$12$ph = 0, $srcbuf$13 = 0, $srcbuf$14 = 0, $srcbuf$15 = 0, $srcbuf$17 = 0, $srcbuf$18288 = 0, $srcbuf$19 = 0, $srcbuf$2 = 0, $srcbuf$21 = 0, $srcbuf$22 = 0, $srcbuf$23 = 0, $srcbuf$25 = 0, $srcbuf$26292 = 0, $srcbuf$27 = 0, $srcbuf$29 = 0, $srcbuf$30 = 0, $srcbuf$31 = 0, $srcbuf$33 = 0, $srcbuf$34297 = 0, $srcbuf$35 = 0, $srcbuf$4 = 0, $srcbuf$5 = 0, $srcbuf$6 = 0, $srcbuf$7 = 0, $srcbuf$addr$0$i = 0, $srcbuf$addr$1$i = 0, $srcbuf$addr$11$i = 0, $srcbuf$addr$12$i = 0, $srcbuf$addr$14$i = 0, $srcbuf$addr$15$i = 0, $srcbuf$addr$16$i = 0, $srcbuf$addr$18$i = 0, $srcbuf$addr$19$i = 0, $srcbuf$addr$2$i = 0, $srcbuf$addr$4$i = 0, $srcbuf$addr$5$i = 0, $srcbuf$addr$7$i = 0, $srcbuf$addr$8$i = 0, $srcbuf$addr$9$i = 0, $sub$i = 0, $sub147$i = 0, $sub154$i = 0, $sub200$i = 0, $sub207$i = 0, $sub21$i = 0, $sub305$i = 0, $sub312$i = 0, $sub356$i = 0, $sub363$i = 0, $sub59$i = 0, $sub66$i = 0, $vskip$0 = 0, $vskip$1 = 0, $w1 = 0, label = 0, $srcbuf$4$looptemp = 0;
 $w1 = $surf_src + 8 | 0;
 $0 = HEAP32[$w1 >> 2] | 0;
 $format = $surf_dst + 4 | 0;
 $1 = HEAP32[$format >> 2] | 0;
 if (HEAP32[$surf_dst >> 2] & 2 | 0) if ((_SDL_LockSurface($surf_dst) | 0) < 0) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 $pitch = $surf_dst + 16 | 0;
 $add$ptr = (HEAP32[$surf_dst + 20 >> 2] | 0) + (Math_imul(HEAP32[$pitch >> 2] | 0, HEAP32[$dstrect + 4 >> 2] | 0) | 0) | 0;
 $7 = HEAP8[$1 + 9 >> 0] | 0;
 $add$ptr8 = $add$ptr + (Math_imul(HEAP32[$dstrect >> 2] | 0, $7 & 255) | 0) | 0;
 $add$ptr9 = (HEAP32[(HEAP32[$surf_src + 52 >> 2] | 0) + 12 >> 2] | 0) + 28 | 0;
 $10 = HEAP32[$srcrect + 4 >> 2] | 0;
 L5 : do if (!$10) {
  $srcbuf$12$ph = $add$ptr9;
  label = 21;
 } else {
  if ($7 << 24 >> 24 != 2) {
   $srcbuf$5 = $add$ptr9;
   $vskip$1 = $10 << 1;
   while (1) {
    $ofs$4 = 0;
    $srcbuf$6 = $srcbuf$5;
    while (1) {
     $add59 = $ofs$4 + (HEAPU16[$srcbuf$6 >> 1] | 0) | 0;
     $17 = HEAP16[$srcbuf$6 + 2 >> 1] | 0;
     $conv61 = $17 & 65535;
     $add$ptr62 = $srcbuf$6 + 4 | 0;
     if (!($17 << 16 >> 16)) if (!$add59) break L5; else {
      $ofs$5 = $add59;
      $srcbuf$7 = $add$ptr62;
     } else {
      $ofs$5 = $add59 + $conv61 | 0;
      $srcbuf$7 = $add$ptr62 + ($conv61 << 2) | 0;
     }
     if (($ofs$5 | 0) < ($0 | 0)) {
      $ofs$4 = $ofs$5;
      $srcbuf$6 = $srcbuf$7;
     } else break;
    }
    $vskip$1 = $vskip$1 + -1 | 0;
    if (!$vskip$1) {
     $srcbuf$12$ph = $srcbuf$7;
     label = 21;
     break L5;
    } else $srcbuf$5 = $srcbuf$7;
   }
  }
  $srcbuf$0 = $add$ptr9;
  $vskip$0 = $10;
  while (1) {
   $ofs$0 = 0;
   $srcbuf$1 = $srcbuf$0;
   while (1) {
    $add = $ofs$0 + (HEAPU8[$srcbuf$1 >> 0] | 0) | 0;
    $12 = HEAP8[$srcbuf$1 + 1 >> 0] | 0;
    $conv20 = $12 & 255;
    $add$ptr21 = $srcbuf$1 + 2 | 0;
    if (!($12 << 24 >> 24)) if (!$add) break L5; else {
     $ofs$1 = $add;
     $srcbuf$2 = $add$ptr21;
    } else {
     $ofs$1 = $add + $conv20 | 0;
     $srcbuf$2 = $add$ptr21 + ($conv20 << 1) | 0;
    }
    if (($ofs$1 | 0) < ($0 | 0)) {
     $ofs$0 = $ofs$1;
     $srcbuf$1 = $srcbuf$2;
    } else break;
   }
   $ofs$3 = 0;
   $srcbuf$4 = $srcbuf$2 + ($srcbuf$2 & 2) | 0;
   do {
    $conv41 = HEAPU16[$srcbuf$4 + 2 >> 1] | 0;
    $srcbuf$4$looptemp = $srcbuf$4;
    $srcbuf$4 = $srcbuf$4 + (($conv41 << 2) + 4) | 0;
    $ofs$3 = $ofs$3 + (HEAPU16[$srcbuf$4$looptemp >> 1] | 0) + $conv41 | 0;
   } while (($ofs$3 | 0) < ($0 | 0));
   $vskip$0 = $vskip$0 + -1 | 0;
   if (!$vskip$0) {
    $srcbuf$12$ph = $srcbuf$4;
    label = 21;
    break;
   } else $srcbuf$0 = $srcbuf$4;
  }
 } while (0);
 L31 : do if ((label | 0) == 21) {
  $18 = HEAP32[$srcrect >> 2] | 0;
  if (!$18) if ((HEAP32[$srcrect + 8 >> 2] | 0) == (HEAP32[$w1 >> 2] | 0)) {
   switch ($7 << 24 >> 24) {
   case 2:
    break;
   case 4:
    {
     $dstbuf$4 = $add$ptr8;
     $linecount298$0 = HEAP32[$srcrect + 12 >> 2] | 0;
     $srcbuf$29 = $srcbuf$12$ph;
     while (1) {
      $ofs301$0 = 0;
      $srcbuf$30 = $srcbuf$29;
      while (1) {
       $add306 = $ofs301$0 + (HEAPU16[$srcbuf$30 >> 1] | 0) | 0;
       $80 = HEAP16[$srcbuf$30 + 2 >> 1] | 0;
       $conv308 = $80 & 65535;
       $add$ptr309 = $srcbuf$30 + 4 | 0;
       if (!($80 << 16 >> 16)) if (!$add306) break L31; else {
        $ofs301$1 = $add306;
        $srcbuf$31 = $add$ptr309;
       } else {
        $mul314 = $conv308 << 2;
        _SDL_memcpy($dstbuf$4 + ($add306 << 2) | 0, $add$ptr309, $mul314) | 0;
        $ofs301$1 = $add306 + $conv308 | 0;
        $srcbuf$31 = $add$ptr309 + $mul314 | 0;
       }
       if (($ofs301$1 | 0) < ($0 | 0)) {
        $ofs301$0 = $ofs301$1;
        $srcbuf$30 = $srcbuf$31;
       } else break;
      }
      $ofs301$3 = 0;
      $srcbuf$33 = $srcbuf$31;
      while (1) {
       $add335 = $ofs301$3 + (HEAPU16[$srcbuf$33 >> 1] | 0) | 0;
       $82 = HEAP16[$srcbuf$33 + 2 >> 1] | 0;
       $conv337 = $82 & 65535;
       $add$ptr338 = $srcbuf$33 + 4 | 0;
       if (!($82 << 16 >> 16)) {
        $ofs301$4 = $add335;
        $srcbuf$35 = $add$ptr338;
       } else {
        $83 = $conv337 << 2;
        $dst341$0295 = $dstbuf$4 + ($add335 << 2) | 0;
        $i343$0296 = 0;
        $srcbuf$34297 = $add$ptr338;
        while (1) {
         $84 = HEAP32[$srcbuf$34297 >> 2] | 0;
         $85 = HEAP32[$dst341$0295 >> 2] | 0;
         $shr353 = $84 >>> 24;
         $and355 = $85 & 16711935;
         $and362 = $85 & 65280;
         HEAP32[$dst341$0295 >> 2] = ((Math_imul(($84 & 65280) - $and362 | 0, $shr353) | 0) >>> 8) + $and362 & 65280 | ((Math_imul(($84 & 16711935) - $and355 | 0, $shr353) | 0) >>> 8) + $and355 & 16711935 | -16777216;
         $i343$0296 = $i343$0296 + 1 | 0;
         if (($i343$0296 | 0) == ($conv337 | 0)) break; else {
          $dst341$0295 = $dst341$0295 + 4 | 0;
          $srcbuf$34297 = $srcbuf$34297 + 4 | 0;
         }
        }
        $ofs301$4 = $add335 + $conv337 | 0;
        $srcbuf$35 = $add$ptr338 + $83 | 0;
       }
       if (($ofs301$4 | 0) < ($0 | 0)) {
        $ofs301$3 = $ofs301$4;
        $srcbuf$33 = $srcbuf$35;
       } else break;
      }
      $linecount298$0 = $linecount298$0 + -1 | 0;
      if (!$linecount298$0) break L31; else {
       $dstbuf$4 = $dstbuf$4 + (HEAP32[$pitch >> 2] | 0) | 0;
       $srcbuf$29 = $srcbuf$35;
      }
     }
     break;
    }
   default:
    break L31;
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != 2016) if ((HEAP32[$1 + 12 >> 2] | 0) != 2016) if ((HEAP32[$1 + 20 >> 2] | 0) != 2016) {
    $dstbuf$2 = $add$ptr8;
    $linecount196$0 = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$21 = $srcbuf$12$ph;
    while (1) {
     $ofs199$0 = 0;
     $srcbuf$22 = $srcbuf$21;
     while (1) {
      $add204 = $ofs199$0 + (HEAPU8[$srcbuf$22 >> 0] | 0) | 0;
      $70 = HEAP8[$srcbuf$22 + 1 >> 0] | 0;
      $conv206 = $70 & 255;
      $add$ptr207 = $srcbuf$22 + 2 | 0;
      if (!($70 << 24 >> 24)) if (!$add204) break L31; else {
       $ofs199$1 = $add204;
       $srcbuf$23 = $add$ptr207;
      } else {
       $mul212 = $conv206 << 1;
       _SDL_memcpy($dstbuf$2 + ($add204 << 1) | 0, $add$ptr207, $mul212) | 0;
       $ofs199$1 = $add204 + $conv206 | 0;
       $srcbuf$23 = $add$ptr207 + $mul212 | 0;
      }
      if (($ofs199$1 | 0) < ($0 | 0)) {
       $ofs199$0 = $ofs199$1;
       $srcbuf$22 = $srcbuf$23;
      } else break;
     }
     $ofs199$3 = 0;
     $srcbuf$25 = $srcbuf$23 + ($srcbuf$23 & 2) | 0;
     while (1) {
      $add235 = $ofs199$3 + (HEAPU16[$srcbuf$25 >> 1] | 0) | 0;
      $73 = HEAP16[$srcbuf$25 + 2 >> 1] | 0;
      $conv237 = $73 & 65535;
      $add$ptr238 = $srcbuf$25 + 4 | 0;
      if (!($73 << 16 >> 16)) {
       $ofs199$4 = $add235;
       $srcbuf$27 = $add$ptr238;
      } else {
       $74 = $conv237 << 2;
       $dst241$0290 = $dstbuf$2 + ($add235 << 1) | 0;
       $i243$0291 = 0;
       $srcbuf$26292 = $add$ptr238;
       while (1) {
        $75 = HEAP32[$srcbuf$26292 >> 2] | 0;
        $conv252 = HEAPU16[$dst241$0290 >> 1] | 0;
        $and259 = ($conv252 << 16 | $conv252) & 65043487;
        $and264 = ((Math_imul(($75 & 65043487) - $and259 | 0, $75 >>> 5 & 31) | 0) >>> 5) + $and259 & 65043487;
        HEAP16[$dst241$0290 >> 1] = $and264 >>> 16 | $and264;
        $i243$0291 = $i243$0291 + 1 | 0;
        if (($i243$0291 | 0) == ($conv237 | 0)) break; else {
         $dst241$0290 = $dst241$0290 + 2 | 0;
         $srcbuf$26292 = $srcbuf$26292 + 4 | 0;
        }
       }
       $ofs199$4 = $add235 + $conv237 | 0;
       $srcbuf$27 = $add$ptr238 + $74 | 0;
      }
      if (($ofs199$4 | 0) < ($0 | 0)) {
       $ofs199$3 = $ofs199$4;
       $srcbuf$25 = $srcbuf$27;
      } else break;
     }
     $linecount196$0 = $linecount196$0 + -1 | 0;
     if (!$linecount196$0) break L31; else {
      $dstbuf$2 = $dstbuf$2 + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$21 = $srcbuf$27;
     }
    }
   }
   $dstbuf$0 = $add$ptr8;
   $linecount$0 = HEAP32[$srcrect + 12 >> 2] | 0;
   $srcbuf$13 = $srcbuf$12$ph;
   while (1) {
    $ofs113$0 = 0;
    $srcbuf$14 = $srcbuf$13;
    while (1) {
     $add118 = $ofs113$0 + (HEAPU8[$srcbuf$14 >> 0] | 0) | 0;
     $60 = HEAP8[$srcbuf$14 + 1 >> 0] | 0;
     $conv120 = $60 & 255;
     $add$ptr121 = $srcbuf$14 + 2 | 0;
     if (!($60 << 24 >> 24)) if (!$add118) break L31; else {
      $ofs113$1 = $add118;
      $srcbuf$15 = $add$ptr121;
     } else {
      $mul126 = $conv120 << 1;
      _SDL_memcpy($dstbuf$0 + ($add118 << 1) | 0, $add$ptr121, $mul126) | 0;
      $ofs113$1 = $add118 + $conv120 | 0;
      $srcbuf$15 = $add$ptr121 + $mul126 | 0;
     }
     if (($ofs113$1 | 0) < ($0 | 0)) {
      $ofs113$0 = $ofs113$1;
      $srcbuf$14 = $srcbuf$15;
     } else break;
    }
    $ofs113$3 = 0;
    $srcbuf$17 = $srcbuf$15 + ($srcbuf$15 & 2) | 0;
    while (1) {
     $add149 = $ofs113$3 + (HEAPU16[$srcbuf$17 >> 1] | 0) | 0;
     $63 = HEAP16[$srcbuf$17 + 2 >> 1] | 0;
     $conv151 = $63 & 65535;
     $add$ptr152 = $srcbuf$17 + 4 | 0;
     if (!($63 << 16 >> 16)) {
      $ofs113$4 = $add149;
      $srcbuf$19 = $add$ptr152;
     } else {
      $64 = $conv151 << 2;
      $dst$0287 = $dstbuf$0 + ($add149 << 1) | 0;
      $i$0286 = 0;
      $srcbuf$18288 = $add$ptr152;
      while (1) {
       $65 = HEAP32[$srcbuf$18288 >> 2] | 0;
       $conv159 = HEAPU16[$dst$0287 >> 1] | 0;
       $and163 = ($conv159 << 16 | $conv159) & 132184095;
       $and167 = ((Math_imul(($65 & 132184095) - $and163 | 0, $65 >>> 5 & 31) | 0) >>> 5) + $and163 & 132184095;
       HEAP16[$dst$0287 >> 1] = $and167 >>> 16 | $and167;
       $i$0286 = $i$0286 + 1 | 0;
       if (($i$0286 | 0) == ($conv151 | 0)) break; else {
        $dst$0287 = $dst$0287 + 2 | 0;
        $srcbuf$18288 = $srcbuf$18288 + 4 | 0;
       }
      }
      $ofs113$4 = $add149 + $conv151 | 0;
      $srcbuf$19 = $add$ptr152 + $64 | 0;
     }
     if (($ofs113$4 | 0) < ($0 | 0)) {
      $ofs113$3 = $ofs113$4;
      $srcbuf$17 = $srcbuf$19;
     } else break;
    }
    $linecount$0 = $linecount$0 + -1 | 0;
    if (!$linecount$0) break L31; else {
     $dstbuf$0 = $dstbuf$0 + (HEAP32[$pitch >> 2] | 0) | 0;
     $srcbuf$13 = $srcbuf$19;
    }
   }
  }
  $21 = HEAP32[$format >> 2] | 0;
  switch (HEAP8[$21 + 9 >> 0] | 0) {
  case 2:
   break;
  case 4:
   {
    $add287$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $18 | 0;
    $dstbuf$addr$4$i = $add$ptr8 + (0 - ($18 << 2)) | 0;
    $linecount281$0$i = HEAP32[$srcrect + 12 >> 2] | 0;
    $srcbuf$addr$14$i = $srcbuf$12$ph;
    while (1) {
     $ofs292$0$i = 0;
     $srcbuf$addr$15$i = $srcbuf$addr$14$i;
     while (1) {
      $add297$i = $ofs292$0$i + (HEAPU16[$srcbuf$addr$15$i >> 1] | 0) | 0;
      $49 = HEAP16[$srcbuf$addr$15$i + 2 >> 1] | 0;
      $conv299$i = $49 & 65535;
      $add$ptr300$i = $srcbuf$addr$15$i + 4 | 0;
      if (!($49 << 16 >> 16)) if (!$add297$i) break L31; else {
       $ofs292$1$i = $add297$i;
       $srcbuf$addr$16$i = $add$ptr300$i;
      } else {
       $sub305$i = $18 - $add297$i | 0;
       $cmp306$i = ($sub305$i | 0) > 0;
       $spec$select305$i = $cmp306$i ? $18 : $add297$i;
       $spec$select306$i = $conv299$i - ($cmp306$i ? $sub305$i : 0) | 0;
       $sub312$i = $add287$i - $spec$select305$i | 0;
       $crun304$1$i = ($spec$select306$i | 0) > ($sub312$i | 0) ? $sub312$i : $spec$select306$i;
       if (($crun304$1$i | 0) > 0) _SDL_memcpy($dstbuf$addr$4$i + ($spec$select305$i << 2) | 0, $add$ptr300$i + ($spec$select305$i - $add297$i << 2) | 0, $crun304$1$i << 2) | 0;
       $ofs292$1$i = $add297$i + $conv299$i | 0;
       $srcbuf$addr$16$i = $add$ptr300$i + ($conv299$i << 2) | 0;
      }
      if (($ofs292$1$i | 0) < ($0 | 0)) {
       $ofs292$0$i = $ofs292$1$i;
       $srcbuf$addr$15$i = $srcbuf$addr$16$i;
      } else break;
     }
     $ofs292$3$i = 0;
     $srcbuf$addr$18$i = $srcbuf$addr$16$i;
     while (1) {
      $add348$i = $ofs292$3$i + (HEAPU16[$srcbuf$addr$18$i >> 1] | 0) | 0;
      $51 = HEAP16[$srcbuf$addr$18$i + 2 >> 1] | 0;
      $conv350$i = $51 & 65535;
      $add$ptr351$i = $srcbuf$addr$18$i + 4 | 0;
      if (!($51 << 16 >> 16)) {
       $ofs292$4$i = $add348$i;
       $srcbuf$addr$19$i = $add$ptr351$i;
      } else {
       $sub356$i = $18 - $add348$i | 0;
       $cmp357$i = ($sub356$i | 0) > 0;
       $spec$select307$i = $cmp357$i ? $18 : $add348$i;
       $spec$select308$i = $conv350$i - ($cmp357$i ? $sub356$i : 0) | 0;
       $sub363$i = $add287$i - $spec$select307$i | 0;
       $crun355$1$i = ($spec$select308$i | 0) > ($sub363$i | 0) ? $sub363$i : $spec$select308$i;
       if (($crun355$1$i | 0) > 0) {
        $add$ptr373$i = $dstbuf$addr$4$i + ($spec$select307$i << 2) | 0;
        $add$ptr376$i = $add$ptr351$i + ($spec$select307$i - $add348$i << 2) | 0;
        $i377$0337$i = 0;
        do {
         $52 = HEAP32[$add$ptr376$i + ($i377$0337$i << 2) >> 2] | 0;
         $arrayidx386$i = $add$ptr373$i + ($i377$0337$i << 2) | 0;
         $53 = HEAP32[$arrayidx386$i >> 2] | 0;
         $shr388$i = $52 >>> 24;
         $and390$i = $53 & 16711935;
         $and397$i = $53 & 65280;
         HEAP32[$arrayidx386$i >> 2] = ((Math_imul(($52 & 16711935) - $and390$i | 0, $shr388$i) | 0) >>> 8) + $and390$i & 16711935 | ((Math_imul(($52 & 65280) - $and397$i | 0, $shr388$i) | 0) >>> 8) + $and397$i & 65280 | -16777216;
         $i377$0337$i = $i377$0337$i + 1 | 0;
        } while (($i377$0337$i | 0) < ($crun355$1$i | 0));
       }
       $ofs292$4$i = $add348$i + $conv350$i | 0;
       $srcbuf$addr$19$i = $add$ptr351$i + ($conv350$i << 2) | 0;
      }
      if (($ofs292$4$i | 0) < ($0 | 0)) {
       $ofs292$3$i = $ofs292$4$i;
       $srcbuf$addr$18$i = $srcbuf$addr$19$i;
      } else break;
     }
     $linecount281$0$i = $linecount281$0$i + -1 | 0;
     if (!$linecount281$0$i) break L31; else {
      $dstbuf$addr$4$i = $dstbuf$addr$4$i + (HEAP32[$pitch >> 2] | 0) | 0;
      $srcbuf$addr$14$i = $srcbuf$addr$19$i;
     }
    }
    break;
   }
  default:
   break L31;
  }
  if ((HEAP32[$21 + 16 >> 2] | 0) != 2016) if ((HEAP32[$21 + 12 >> 2] | 0) != 2016) if ((HEAP32[$21 + 20 >> 2] | 0) != 2016) {
   $add129$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $18 | 0;
   $dstbuf$addr$2$i = $add$ptr8 + (0 - ($18 << 1)) | 0;
   $linecount123$0$i = HEAP32[$srcrect + 12 >> 2] | 0;
   $srcbuf$addr$7$i = $srcbuf$12$ph;
   while (1) {
    $ofs134$0$i = 0;
    $srcbuf$addr$8$i = $srcbuf$addr$7$i;
    while (1) {
     $add139$i = $ofs134$0$i + (HEAPU8[$srcbuf$addr$8$i >> 0] | 0) | 0;
     $39 = HEAP8[$srcbuf$addr$8$i + 1 >> 0] | 0;
     $conv141$i = $39 & 255;
     $add$ptr142$i = $srcbuf$addr$8$i + 2 | 0;
     if (!($39 << 24 >> 24)) if (!$add139$i) break L31; else {
      $ofs134$1$i = $add139$i;
      $srcbuf$addr$9$i = $add$ptr142$i;
     } else {
      $sub147$i = $18 - $add139$i | 0;
      $cmp148$i = ($sub147$i | 0) > 0;
      $spec$select301$i = $conv141$i - ($cmp148$i ? $sub147$i : 0) | 0;
      $spec$select302$i = $cmp148$i ? $18 : $add139$i;
      $sub154$i = $add129$i - $spec$select302$i | 0;
      $crun146$1$i = ($spec$select301$i | 0) > ($sub154$i | 0) ? $sub154$i : $spec$select301$i;
      if (($crun146$1$i | 0) > 0) _SDL_memcpy($dstbuf$addr$2$i + ($spec$select302$i << 1) | 0, $add$ptr142$i + ($spec$select302$i - $add139$i << 1) | 0, $crun146$1$i << 1) | 0;
      $ofs134$1$i = $add139$i + $conv141$i | 0;
      $srcbuf$addr$9$i = $add$ptr142$i + ($conv141$i << 1) | 0;
     }
     if (($ofs134$1$i | 0) < ($0 | 0)) {
      $ofs134$0$i = $ofs134$1$i;
      $srcbuf$addr$8$i = $srcbuf$addr$9$i;
     } else break;
    }
    $ofs134$3$i = 0;
    $srcbuf$addr$11$i = $srcbuf$addr$9$i + ($srcbuf$addr$9$i & 2) | 0;
    while (1) {
     $add192$i = $ofs134$3$i + (HEAPU16[$srcbuf$addr$11$i >> 1] | 0) | 0;
     $42 = HEAP16[$srcbuf$addr$11$i + 2 >> 1] | 0;
     $conv194$i = $42 & 65535;
     $add$ptr195$i = $srcbuf$addr$11$i + 4 | 0;
     if (!($42 << 16 >> 16)) {
      $ofs134$4$i = $add192$i;
      $srcbuf$addr$12$i = $add$ptr195$i;
     } else {
      $sub200$i = $18 - $add192$i | 0;
      $cmp201$i = ($sub200$i | 0) > 0;
      $spec$select303$i = $conv194$i - ($cmp201$i ? $sub200$i : 0) | 0;
      $spec$select304$i = $cmp201$i ? $18 : $add192$i;
      $sub207$i = $add129$i - $spec$select304$i | 0;
      $crun199$1$i = ($spec$select303$i | 0) > ($sub207$i | 0) ? $sub207$i : $spec$select303$i;
      if (($crun199$1$i | 0) > 0) {
       $add$ptr217$i = $dstbuf$addr$2$i + ($spec$select304$i << 1) | 0;
       $add$ptr220$i = $add$ptr195$i + ($spec$select304$i - $add192$i << 2) | 0;
       $i221$0335$i = 0;
       do {
        $43 = HEAP32[$add$ptr220$i + ($i221$0335$i << 2) >> 2] | 0;
        $arrayidx230$i = $add$ptr217$i + ($i221$0335$i << 1) | 0;
        $conv231$i = HEAPU16[$arrayidx230$i >> 1] | 0;
        $and238$i = ($conv231$i << 16 | $conv231$i) & 65043487;
        $and243$i = ((Math_imul(($43 & 65043487) - $and238$i | 0, $43 >>> 5 & 31) | 0) >>> 5) + $and238$i & 65043487;
        HEAP16[$arrayidx230$i >> 1] = $and243$i >>> 16 | $and243$i;
        $i221$0335$i = $i221$0335$i + 1 | 0;
       } while (($i221$0335$i | 0) < ($crun199$1$i | 0));
      }
      $ofs134$4$i = $add192$i + $conv194$i | 0;
      $srcbuf$addr$12$i = $add$ptr195$i + ($conv194$i << 2) | 0;
     }
     if (($ofs134$4$i | 0) < ($0 | 0)) {
      $ofs134$3$i = $ofs134$4$i;
      $srcbuf$addr$11$i = $srcbuf$addr$12$i;
     } else break;
    }
    $linecount123$0$i = $linecount123$0$i + -1 | 0;
    if (!$linecount123$0$i) break L31; else {
     $dstbuf$addr$2$i = $dstbuf$addr$2$i + (HEAP32[$pitch >> 2] | 0) | 0;
     $srcbuf$addr$7$i = $srcbuf$addr$12$i;
    }
   }
  }
  $add$i = (HEAP32[$srcrect + 8 >> 2] | 0) + $18 | 0;
  $dstbuf$addr$0$i = $add$ptr8 + (0 - ($18 << 1)) | 0;
  $linecount$0$i = HEAP32[$srcrect + 12 >> 2] | 0;
  $srcbuf$addr$0$i = $srcbuf$12$ph;
  while (1) {
   $ofs$0$i = 0;
   $srcbuf$addr$1$i = $srcbuf$addr$0$i;
   while (1) {
    $add11$i = $ofs$0$i + (HEAPU8[$srcbuf$addr$1$i >> 0] | 0) | 0;
    $29 = HEAP8[$srcbuf$addr$1$i + 1 >> 0] | 0;
    $conv13$i = $29 & 255;
    $add$ptr14$i = $srcbuf$addr$1$i + 2 | 0;
    if (!($29 << 24 >> 24)) if (!$add11$i) break L31; else {
     $ofs$1$i = $add11$i;
     $srcbuf$addr$2$i = $add$ptr14$i;
    } else {
     $sub$i = $18 - $add11$i | 0;
     $cmp16$i = ($sub$i | 0) > 0;
     $spec$select$i = $conv13$i - ($cmp16$i ? $sub$i : 0) | 0;
     $spec$select298$i = $cmp16$i ? $18 : $add11$i;
     $sub21$i = $add$i - $spec$select298$i | 0;
     $crun$1$i = ($spec$select$i | 0) > ($sub21$i | 0) ? $sub21$i : $spec$select$i;
     if (($crun$1$i | 0) > 0) _SDL_memcpy($dstbuf$addr$0$i + ($spec$select298$i << 1) | 0, $add$ptr14$i + ($spec$select298$i - $add11$i << 1) | 0, $crun$1$i << 1) | 0;
     $ofs$1$i = $add11$i + $conv13$i | 0;
     $srcbuf$addr$2$i = $add$ptr14$i + ($conv13$i << 1) | 0;
    }
    if (($ofs$1$i | 0) < ($0 | 0)) {
     $ofs$0$i = $ofs$1$i;
     $srcbuf$addr$1$i = $srcbuf$addr$2$i;
    } else break;
   }
   $ofs$3$i = 0;
   $srcbuf$addr$4$i = $srcbuf$addr$2$i + ($srcbuf$addr$2$i & 2) | 0;
   while (1) {
    $add51$i = $ofs$3$i + (HEAPU16[$srcbuf$addr$4$i >> 1] | 0) | 0;
    $32 = HEAP16[$srcbuf$addr$4$i + 2 >> 1] | 0;
    $conv53$i = $32 & 65535;
    $add$ptr54$i = $srcbuf$addr$4$i + 4 | 0;
    if (!($32 << 16 >> 16)) {
     $ofs$4$i = $add51$i;
     $srcbuf$addr$5$i = $add$ptr54$i;
    } else {
     $sub59$i = $18 - $add51$i | 0;
     $cmp60$i = ($sub59$i | 0) > 0;
     $spec$select299$i = $conv53$i - ($cmp60$i ? $sub59$i : 0) | 0;
     $spec$select300$i = $cmp60$i ? $18 : $add51$i;
     $sub66$i = $add$i - $spec$select300$i | 0;
     $crun58$1$i = ($spec$select299$i | 0) > ($sub66$i | 0) ? $sub66$i : $spec$select299$i;
     if (($crun58$1$i | 0) > 0) {
      $add$ptr75$i = $dstbuf$addr$0$i + ($spec$select300$i << 1) | 0;
      $add$ptr77$i = $add$ptr54$i + ($spec$select300$i - $add51$i << 2) | 0;
      $i$0333$i = 0;
      do {
       $33 = HEAP32[$add$ptr77$i + ($i$0333$i << 2) >> 2] | 0;
       $arrayidx82$i = $add$ptr75$i + ($i$0333$i << 1) | 0;
       $conv83$i = HEAPU16[$arrayidx82$i >> 1] | 0;
       $and86$i = ($conv83$i << 16 | $conv83$i) & 132184095;
       $and91$i = ((Math_imul(($33 & 132184095) - $and86$i | 0, $33 >>> 5 & 31) | 0) >>> 5) + $and86$i & 132184095;
       HEAP16[$arrayidx82$i >> 1] = $and91$i >>> 16 | $and91$i;
       $i$0333$i = $i$0333$i + 1 | 0;
      } while (($i$0333$i | 0) < ($crun58$1$i | 0));
     }
     $ofs$4$i = $add51$i + $conv53$i | 0;
     $srcbuf$addr$5$i = $add$ptr54$i + ($conv53$i << 2) | 0;
    }
    if (($ofs$4$i | 0) < ($0 | 0)) {
     $ofs$3$i = $ofs$4$i;
     $srcbuf$addr$4$i = $srcbuf$addr$5$i;
    } else break;
   }
   $linecount$0$i = $linecount$0$i + -1 | 0;
   if (!$linecount$0$i) break; else {
    $dstbuf$addr$0$i = $dstbuf$addr$0$i + (HEAP32[$pitch >> 2] | 0) | 0;
    $srcbuf$addr$0$i = $srcbuf$addr$5$i;
   }
  }
 } while (0);
 if (!(HEAP32[$surf_dst >> 2] & 2)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 _SDL_UnlockSurface($surf_dst);
 $retval$0 = 0;
 return $retval$0 | 0;
}

function _SDL_RLESurface($surface) {
 $surface = $surface | 0;
 var $$sink = 0, $$sink100 = 0, $$sink101 = 0, $$sink102 = 0, $$sink104 = 0, $$sink107 = 0, $$sink96 = 0, $$sink97 = 0, $$sink98 = 0, $$sink99 = 0, $1 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $79 = 0, $82 = 0, $86 = 0, $89 = 0, $Amask84$i = 0, $Ashift85$i = 0, $Bmask$i = 0, $BytesPerPixel$i34 = 0, $Gmask$i = 0, $Rmask$i = 0, $SDL_RLEAlphaBlit$sink = 0, $add$ptr$i = 0, $add$ptr$i40 = 0, $add$ptr104$i = 0, $add$ptr121$us$i = 0, $add$ptr126$i = 0, $add$ptr127$i = 0, $add$ptr133$i = 0, $add$ptr133$us$i = 0, $add$ptr148$i = 0, $add$ptr152$i = 0, $add$ptr177$i = 0, $add$ptr181$i = 0, $add$ptr240$i = 0, $add$ptr253$i = 0, $add$ptr256$i = 0, $add$ptr271$i = 0, $add$ptr274$i = 0, $add$ptr48$i = 0, $add$ptr73$us$i = 0, $add$ptr77$i = 0, $add$ptr97$i = 0, $add106$i = 0, $add24$i$sink = 0, $and$i = 0, $blankline$0$i = 0, $blankline$0$i47 = 0, $blankline$2$i = 0, $call$i = 0, $call$i38 = 0, $call161$i = 0, $call307$i = 0, $cmp212$lcssa$i = 0, $cmp29$i = 0, $cmp44$lcssa$i = 0, $cmp90$lcssa$i = 0, $cond$i = 0, $cond$i62 = 0, $cond114$i = 0, $cond114$us$i = 0, $cond163$i = 0, $cond248$i = 0, $cond267$i = 0, $cond83$i = 0, $conv$i = 0, $conv201$i = 0, $conv219$i = 0, $conv70$i = 0, $conv86$i = 0, $conv97$i = 0, $copy_opaque$1$i = 0, $copy_transl$0$i = 0, $copy_transl$1$i = 0, $dst$0166$i = 0, $dst$0289$i = 0, $dst$1$i = 0, $dst$1$i45 = 0, $dst$2$lcssa$i = 0, $dst$2$lcssa$i60 = 0, $dst$2152$i = 0, $dst$2152$us$i = 0, $dst$2258$i = 0, $dst$5$lcssa$i = 0, $dst$5$lcssa$i66 = 0, $dst$5158$i = 0, $dst$5158$us$i = 0, $dst$5263$i = 0, $dst$7$i68 = 0, $dst$8$lcssa$i = 0, $dst$8279$i = 0, $dst$9$lcssa$i = 0, $dst$9284$i = 0, $flags57 = 0, $format = 0, $inc$i = 0, $inc$i53 = 0, $inc103$i = 0, $inc209$i = 0, $inc226$i = 0, $inc55$i = 0, $lastline$0$lcssa$i = 0, $lastline$0$lcssa$i71 = 0, $lastline$0163$i = 0, $lastline$0292$i = 0, $lastline$1$i = 0, $lastline$1$i69 = 0, $map = 0, $maxsize$0$i37 = 0, $mul101$i = 0, $mul130$i = 0, $mul130$us$i = 0, $neg$i = 0, $or6$i = 0, $pitch$i = 0, $pitch$i42 = 0, $pixels = 0, $retval$0 = 0, $run$0159$i = 0, $run$0159$us$i = 0, $run$0265$i = 0, $run190$0286$i = 0, $runstart$0160$i = 0, $runstart$0160$us$i = 0, $runstart$0264$i = 0, $runstart$1285$i = 0, $skip$0$lcssa$i = 0, $skip$0$lcssa$i61 = 0, $skip$0153$i = 0, $skip$0153$us$i = 0, $skip$0259$i = 0, $skip191$0$lcssa$i = 0, $skip191$0280$i = 0, $src$0291$i = 0, $srcbuf$0164$i = 0, $sub$i58 = 0, $sub105$i = 0, $sub109$i = 0, $sub129$i = 0, $sub154$i = 0, $sub228$i = 0, $sub232$i = 0, $sub241$i = 0, $sub258$i = 0, $sub57$i = 0, $sub62$i = 0, $sub79$i = 0, $sub79$us$i = 0, $x$0$i = 0, $x$0$i46 = 0, $x$1$lcssa$i = 0, $x$1$lcssa$i55 = 0, $x$1142$i = 0, $x$1248$i = 0, $x$2$lcssa$i = 0, $x$2$lcssa$i57 = 0, $x$2145$i = 0, $x$2251$i = 0, $x$3$i = 0, $x$4$lcssa$i = 0, $x$4268$i = 0, $x$5$lcssa$i = 0, $x$5272$i = 0, $y$0165$i = 0, $y$0290$i = 0;
 if (HEAP32[$surface >> 2] & 2 | 0) _SDL_UnRLESurface($surface, 1);
 $format = $surface + 4 | 0;
 $1 = HEAP32[$format >> 2] | 0;
 $2 = HEAP8[$1 + 8 >> 0] | 0;
 if (($2 & 255) < 8) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 $pixels = $surface + 20 | 0;
 if (!(HEAP32[$pixels >> 2] | 0)) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 $map = $surface + 52 | 0;
 $4 = HEAP32[$map >> 2] | 0;
 $5 = HEAP32[$4 + 68 >> 2] | 0;
 if (!(($5 & 272 | 0) != 0 & ($5 & 1 | 0) == 0)) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 do if (!($5 & 2)) if (!($5 & 608)) {
  $12 = HEAP32[$1 + 24 >> 2] | 0;
  break;
 } else {
  $retval$0 = -1;
  return $retval$0 | 0;
 } else {
  $6 = HEAP32[$1 + 24 >> 2] | 0;
  if (!($5 & 608 | $6)) $12 = $6; else {
   $retval$0 = -1;
   return $retval$0 | 0;
  }
 } while (0);
 do if (($5 & 16 | 0) == 0 | ($12 | 0) == 0) {
  if (!(HEAP32[$4 + 4 >> 2] | 0)) {
   $retval$0 = -1;
   return $retval$0 | 0;
  }
  $14 = HEAP8[$1 + 9 >> 0] | 0;
  $conv$i = $14 & 255;
  switch ($14 << 24 >> 24) {
  case 1:
   {
    $$sink = 2;
    $$sink96 = ((HEAP32[$surface + 8 >> 2] | 0) / 2 | 0) + 1 | 0;
    $add24$i$sink = (HEAP32[$surface + 12 >> 2] | 0) * 3 | 0;
    break;
   }
  case 3:
  case 2:
   {
    $18 = HEAP32[$surface + 8 >> 2] | 0;
    $$sink = 2;
    $$sink96 = HEAP32[$surface + 12 >> 2] | 0;
    $add24$i$sink = (Math_imul($18, $conv$i) | 0) + 2 + ((($18 | 0) / 255 | 0) << 1) | 0;
    break;
   }
  case 4:
   {
    $20 = HEAP32[$surface + 8 >> 2] | 0;
    $$sink = 4;
    $$sink96 = HEAP32[$surface + 12 >> 2] | 0;
    $add24$i$sink = ((($20 | 0) / 65535 | 0) + $20 << 2) + 4 | 0;
    break;
   }
  default:
   {
    $retval$0 = -1;
    return $retval$0 | 0;
   }
  }
  $call$i = _SDL_malloc((Math_imul($add24$i$sink, $$sink96) | 0) + $$sink | 0) | 0;
  if (!$call$i) if ((_SDL_Error(0) | 0) < 0) {
   $retval$0 = -1;
   return $retval$0 | 0;
  } else {
   $$sink104 = 8192;
   $$sink107 = HEAP32[$map >> 2] | 0;
   $SDL_RLEAlphaBlit$sink = 3;
   break;
  }
  $cmp29$i = $14 << 24 >> 24 == 4;
  $cond$i = $cmp29$i ? 65535 : 255;
  $neg$i = ~HEAP32[(HEAP32[$format >> 2] | 0) + 24 >> 2];
  $and$i = HEAP32[(HEAP32[$map >> 2] | 0) + 72 >> 2] & $neg$i;
  $25 = HEAP32[1536 + ($conv$i + -1 << 2) >> 2] | 0;
  $26 = HEAP32[$surface + 8 >> 2] | 0;
  $27 = HEAP32[$surface + 12 >> 2] | 0;
  if (($27 | 0) > 0) {
   $conv70$i = $cond$i & 65535;
   $pitch$i = $surface + 16 | 0;
   $dst$0166$i = $call$i;
   $lastline$0163$i = $call$i;
   $srcbuf$0164$i = HEAP32[$pixels >> 2] | 0;
   $y$0165$i = 0;
   while (1) {
    $blankline$0$i = 0;
    $dst$1$i = $dst$0166$i;
    $lastline$1$i = $lastline$0163$i;
    $x$0$i = 0;
    while (1) {
     L44 : do if (($x$0$i | 0) < ($26 | 0)) {
      $x$1142$i = $x$0$i;
      while (1) {
       $add$ptr$i = $srcbuf$0164$i + (Math_imul($x$1142$i, $conv$i) | 0) | 0;
       if (((FUNCTION_TABLE_ii[$25 & 63]($add$ptr$i) | 0) & $neg$i | 0) != ($and$i | 0)) {
        $x$1$lcssa$i = $x$1142$i;
        break L44;
       }
       $inc$i = $x$1142$i + 1 | 0;
       if (($inc$i | 0) < ($26 | 0)) $x$1142$i = $inc$i; else {
        $x$1$lcssa$i = $inc$i;
        break;
       }
      }
     } else $x$1$lcssa$i = $x$0$i; while (0);
     L50 : do if (($x$1$lcssa$i | 0) < ($26 | 0)) {
      $x$2145$i = $x$1$lcssa$i;
      while (1) {
       $add$ptr48$i = $srcbuf$0164$i + (Math_imul($x$2145$i, $conv$i) | 0) | 0;
       if (((FUNCTION_TABLE_ii[$25 & 63]($add$ptr48$i) | 0) & $neg$i | 0) == ($and$i | 0)) {
        $cmp44$lcssa$i = 1;
        $x$2$lcssa$i = $x$2145$i;
        break L50;
       }
       $inc55$i = $x$2145$i + 1 | 0;
       if (($inc55$i | 0) < ($26 | 0)) $x$2145$i = $inc55$i; else {
        $cmp44$lcssa$i = 0;
        $x$2$lcssa$i = $inc55$i;
        break;
       }
      }
     } else {
      $cmp44$lcssa$i = 0;
      $x$2$lcssa$i = $x$1$lcssa$i;
     } while (0);
     $sub57$i = $x$1$lcssa$i - $x$0$i | 0;
     $blankline$0$i = ($sub57$i | 0) == ($26 | 0) ? 1 : $blankline$0$i;
     $sub62$i = $x$2$lcssa$i - $x$1$lcssa$i | 0;
     if (($sub57$i | 0) > ($cond$i | 0)) if ($cmp29$i) {
      $dst$2152$us$i = $dst$1$i;
      $skip$0153$us$i = $sub57$i;
      while (1) {
       HEAP16[$dst$2152$us$i >> 1] = $conv70$i;
       HEAP16[$dst$2152$us$i + 2 >> 1] = 0;
       $add$ptr73$us$i = $dst$2152$us$i + 4 | 0;
       $sub79$us$i = $skip$0153$us$i - $cond$i | 0;
       if (($sub79$us$i | 0) > ($cond$i | 0)) {
        $dst$2152$us$i = $add$ptr73$us$i;
        $skip$0153$us$i = $sub79$us$i;
       } else {
        $dst$2$lcssa$i = $add$ptr73$us$i;
        $skip$0$lcssa$i = $sub79$us$i;
        break;
       }
      }
     } else {
      $dst$2152$i = $dst$1$i;
      $skip$0153$i = $sub57$i;
      while (1) {
       HEAP8[$dst$2152$i >> 0] = -1;
       HEAP8[$dst$2152$i + 1 >> 0] = 0;
       $add$ptr77$i = $dst$2152$i + 2 | 0;
       $sub79$i = $skip$0153$i - $cond$i | 0;
       if (($sub79$i | 0) > ($cond$i | 0)) {
        $dst$2152$i = $add$ptr77$i;
        $skip$0153$i = $sub79$i;
       } else {
        $dst$2$lcssa$i = $add$ptr77$i;
        $skip$0$lcssa$i = $sub79$i;
        break;
       }
      }
     } else {
      $dst$2$lcssa$i = $dst$1$i;
      $skip$0$lcssa$i = $sub57$i;
     }
     $cond83$i = ($sub62$i | 0) < ($cond$i | 0) ? $sub62$i : $cond$i;
     if ($cmp29$i) {
      HEAP16[$dst$2$lcssa$i >> 1] = $skip$0$lcssa$i;
      HEAP16[$dst$2$lcssa$i + 2 >> 1] = $cond83$i;
      $$sink97 = 4;
     } else {
      HEAP8[$dst$2$lcssa$i >> 0] = $skip$0$lcssa$i;
      HEAP8[$dst$2$lcssa$i + 1 >> 0] = $cond83$i;
      $$sink97 = 2;
     }
     $add$ptr97$i = $dst$2$lcssa$i + $$sink97 | 0;
     $mul101$i = Math_imul($cond83$i, $conv$i) | 0;
     _SDL_memcpy($add$ptr97$i, $srcbuf$0164$i + (Math_imul($x$1$lcssa$i, $conv$i) | 0) | 0, $mul101$i) | 0;
     $add$ptr104$i = $add$ptr97$i + $mul101$i | 0;
     $sub105$i = $sub62$i - $cond83$i | 0;
     $add106$i = $cond83$i + $x$1$lcssa$i | 0;
     if (!$sub105$i) $dst$5$lcssa$i = $add$ptr104$i; else if ($cmp29$i) {
      $dst$5158$us$i = $add$ptr104$i;
      $run$0159$us$i = $sub105$i;
      $runstart$0160$us$i = $add106$i;
      while (1) {
       $cond114$us$i = ($run$0159$us$i | 0) < ($cond$i | 0) ? $run$0159$us$i : $cond$i;
       HEAP16[$dst$5158$us$i >> 1] = 0;
       HEAP16[$dst$5158$us$i + 2 >> 1] = $cond114$us$i;
       $add$ptr121$us$i = $dst$5158$us$i + 4 | 0;
       $mul130$us$i = Math_imul($cond114$us$i, $conv$i) | 0;
       _SDL_memcpy($add$ptr121$us$i, $srcbuf$0164$i + (Math_imul($runstart$0160$us$i, $conv$i) | 0) | 0, $mul130$us$i) | 0;
       $add$ptr133$us$i = $add$ptr121$us$i + $mul130$us$i | 0;
       $run$0159$us$i = $run$0159$us$i - $cond114$us$i | 0;
       if (!$run$0159$us$i) {
        $dst$5$lcssa$i = $add$ptr133$us$i;
        break;
       } else {
        $dst$5158$us$i = $add$ptr133$us$i;
        $runstart$0160$us$i = $cond114$us$i + $runstart$0160$us$i | 0;
       }
      }
     } else {
      $dst$5158$i = $add$ptr104$i;
      $run$0159$i = $sub105$i;
      $runstart$0160$i = $add106$i;
      while (1) {
       $cond114$i = ($run$0159$i | 0) < ($cond$i | 0) ? $run$0159$i : $cond$i;
       HEAP8[$dst$5158$i >> 0] = 0;
       HEAP8[$dst$5158$i + 1 >> 0] = $cond114$i;
       $add$ptr126$i = $dst$5158$i + 2 | 0;
       $mul130$i = Math_imul($cond114$i, $conv$i) | 0;
       _SDL_memcpy($add$ptr126$i, $srcbuf$0164$i + (Math_imul($runstart$0160$i, $conv$i) | 0) | 0, $mul130$i) | 0;
       $add$ptr133$i = $add$ptr126$i + $mul130$i | 0;
       $run$0159$i = $run$0159$i - $cond114$i | 0;
       if (!$run$0159$i) {
        $dst$5$lcssa$i = $add$ptr133$i;
        break;
       } else {
        $dst$5158$i = $add$ptr133$i;
        $runstart$0160$i = $cond114$i + $runstart$0160$i | 0;
       }
      }
     }
     $lastline$1$i = ($blankline$0$i | 0) == 0 ? $dst$5$lcssa$i : $lastline$1$i;
     if (!$cmp44$lcssa$i) break; else {
      $dst$1$i = $dst$5$lcssa$i;
      $x$0$i = $x$2$lcssa$i;
     }
    }
    $y$0165$i = $y$0165$i + 1 | 0;
    if (($y$0165$i | 0) == ($27 | 0)) {
     $lastline$0$lcssa$i = $lastline$1$i;
     break;
    } else {
     $dst$0166$i = $dst$5$lcssa$i;
     $lastline$0163$i = $lastline$1$i;
     $srcbuf$0164$i = $srcbuf$0164$i + (HEAP32[$pitch$i >> 2] | 0) | 0;
    }
   }
  } else $lastline$0$lcssa$i = $call$i;
  if ($cmp29$i) {
   HEAP16[$lastline$0$lcssa$i >> 1] = 0;
   HEAP16[$lastline$0$lcssa$i + 2 >> 1] = 0;
   $$sink98 = 4;
  } else {
   HEAP8[$lastline$0$lcssa$i >> 0] = 0;
   HEAP8[$lastline$0$lcssa$i + 1 >> 0] = 0;
   $$sink98 = 2;
  }
  if (!(HEAP32[$surface >> 2] & 1)) {
   _SDL_free(HEAP32[$pixels >> 2] | 0);
   HEAP32[$pixels >> 2] = 0;
  }
  $call161$i = _SDL_realloc($call$i, $lastline$0$lcssa$i + $$sink98 - $call$i | 0) | 0;
  $32 = HEAP32[$map >> 2] | 0;
  HEAP32[$32 + 12 >> 2] = ($call161$i | 0) == 0 ? $call$i : $call161$i;
  $$sink104 = 8192;
  $$sink107 = $32;
  $SDL_RLEAlphaBlit$sink = 3;
 } else {
  $33 = HEAP32[$4 >> 2] | 0;
  if (!$33) {
   $retval$0 = -1;
   return $retval$0 | 0;
  }
  $34 = HEAP32[$33 + 4 >> 2] | 0;
  if ($2 << 24 >> 24 != 32) {
   $retval$0 = -1;
   return $retval$0 | 0;
  }
  $Rmask$i = $34 + 12 | 0;
  $35 = HEAP32[$Rmask$i >> 2] | 0;
  $Gmask$i = $34 + 16 | 0;
  $36 = HEAP32[$Gmask$i >> 2] | 0;
  $Bmask$i = $34 + 20 | 0;
  $37 = HEAP32[$Bmask$i >> 2] | 0;
  $or6$i = $36 | $35 | $37;
  $BytesPerPixel$i34 = $34 + 9 | 0;
  L96 : do switch (HEAP8[$BytesPerPixel$i34 >> 0] | 0) {
  case 2:
   {
    if (($or6$i | 0) < 65535) {
     switch ($or6$i | 0) {
     case 32767:
      break;
     default:
      {
       $retval$0 = -1;
       return $retval$0 | 0;
      }
     }
     if (($35 | 0) == 992 | ($36 | 0) == 992 | ($37 | 0) == 992) $copy_transl$0$i = 5; else {
      $retval$0 = -1;
      return $retval$0 | 0;
     }
    } else {
     switch ($or6$i | 0) {
     case 65535:
      break;
     default:
      {
       $retval$0 = -1;
       return $retval$0 | 0;
      }
     }
     if (($35 | 0) == 2016 | ($36 | 0) == 2016 | ($37 | 0) == 2016) $copy_transl$0$i = 4; else {
      $retval$0 = -1;
      return $retval$0 | 0;
     }
    }
    $copy_opaque$1$i = 6;
    $copy_transl$1$i = $copy_transl$0$i;
    $maxsize$0$i37 = (Math_imul(((HEAP32[$surface + 8 >> 2] | 0) * 6 | 0) + 8 | 0, HEAP32[$surface + 12 >> 2] | 0) | 0) + 2 | 0;
    break;
   }
  case 4:
   {
    if (($or6$i | 0) == 16777215) {
     $copy_opaque$1$i = 7;
     $copy_transl$1$i = 7;
     $maxsize$0$i37 = Math_imul(HEAP32[$surface + 12 >> 2] << 3, (HEAP32[$surface + 8 >> 2] | 0) + 1 | 0) | 0 | 4;
     break L96;
    } else {
     $retval$0 = -1;
     return $retval$0 | 0;
    }
    break;
   }
  default:
   {
    $retval$0 = -1;
    return $retval$0 | 0;
   }
  } while (0);
  $call$i38 = _SDL_malloc($maxsize$0$i37 + 28 | 0) | 0;
  if (!$call$i38) if ((_SDL_Error(0) | 0) < 0) {
   $retval$0 = -1;
   return $retval$0 | 0;
  } else {
   $$sink104 = 16384;
   $$sink107 = HEAP32[$map >> 2] | 0;
   $SDL_RLEAlphaBlit$sink = 4;
   break;
  }
  $44 = HEAP8[$BytesPerPixel$i34 >> 0] | 0;
  HEAP8[$call$i38 >> 0] = $44;
  HEAP32[$call$i38 + 4 >> 2] = HEAP32[$Rmask$i >> 2];
  HEAP32[$call$i38 + 8 >> 2] = HEAP32[$Gmask$i >> 2];
  HEAP32[$call$i38 + 12 >> 2] = HEAP32[$Bmask$i >> 2];
  HEAP32[$call$i38 + 16 >> 2] = HEAP32[$34 + 24 >> 2];
  HEAP8[$call$i38 + 20 >> 0] = HEAP8[$34 + 28 >> 0] | 0;
  HEAP8[$call$i38 + 21 >> 0] = HEAP8[$34 + 29 >> 0] | 0;
  HEAP8[$call$i38 + 22 >> 0] = HEAP8[$34 + 30 >> 0] | 0;
  HEAP8[$call$i38 + 23 >> 0] = HEAP8[$34 + 31 >> 0] | 0;
  HEAP8[$call$i38 + 24 >> 0] = HEAP8[$34 + 32 >> 0] | 0;
  HEAP8[$call$i38 + 25 >> 0] = HEAP8[$34 + 33 >> 0] | 0;
  HEAP8[$call$i38 + 26 >> 0] = HEAP8[$34 + 34 >> 0] | 0;
  HEAP8[$call$i38 + 27 >> 0] = HEAP8[$34 + 35 >> 0] | 0;
  $add$ptr$i40 = $call$i38 + 28 | 0;
  $65 = HEAP32[$surface + 12 >> 2] | 0;
  $66 = HEAP32[$surface + 8 >> 2] | 0;
  $67 = HEAP32[$format >> 2] | 0;
  if (($65 | 0) > 0) {
   $Amask84$i = $67 + 24 | 0;
   $Ashift85$i = $67 + 35 | 0;
   $pitch$i42 = $surface + 16 | 0;
   $dst$0289$i = $add$ptr$i40;
   $lastline$0292$i = $add$ptr$i40;
   $src$0291$i = HEAP32[$pixels >> 2] | 0;
   $y$0290$i = 0;
   while (1) {
    $blankline$0$i47 = 0;
    $dst$1$i45 = $dst$0289$i;
    $x$0$i46 = 0;
    while (1) {
     L128 : do if (($x$0$i46 | 0) < ($66 | 0)) {
      $69 = HEAP32[$Amask84$i >> 2] | 0;
      $conv86$i = HEAPU8[$Ashift85$i >> 0] | 0;
      $x$1248$i = $x$0$i46;
      while (1) {
       if (((HEAP32[$src$0291$i + ($x$1248$i << 2) >> 2] & $69) >>> $conv86$i | 0) == 255) {
        $x$1$lcssa$i55 = $x$1248$i;
        break L128;
       }
       $inc$i53 = $x$1248$i + 1 | 0;
       if (($inc$i53 | 0) < ($66 | 0)) $x$1248$i = $inc$i53; else {
        $x$1$lcssa$i55 = $inc$i53;
        break;
       }
      }
     } else $x$1$lcssa$i55 = $x$0$i46; while (0);
     L134 : do if (($x$1$lcssa$i55 | 0) < ($66 | 0)) {
      $72 = HEAP32[$Amask84$i >> 2] | 0;
      $conv97$i = HEAPU8[$Ashift85$i >> 0] | 0;
      $x$2251$i = $x$1$lcssa$i55;
      while (1) {
       if (((HEAP32[$src$0291$i + ($x$2251$i << 2) >> 2] & $72) >>> $conv97$i | 0) != 255) {
        $cmp90$lcssa$i = 1;
        $x$2$lcssa$i57 = $x$2251$i;
        break L134;
       }
       $inc103$i = $x$2251$i + 1 | 0;
       if (($inc103$i | 0) < ($66 | 0)) $x$2251$i = $inc103$i; else {
        $cmp90$lcssa$i = 0;
        $x$2$lcssa$i57 = $inc103$i;
        break;
       }
      }
     } else {
      $cmp90$lcssa$i = 0;
      $x$2$lcssa$i57 = $x$1$lcssa$i55;
     } while (0);
     $sub$i58 = $x$1$lcssa$i55 - $x$0$i46 | 0;
     $blankline$0$i47 = ($sub$i58 | 0) == ($66 | 0) ? 1 : $blankline$0$i47;
     $sub109$i = $x$2$lcssa$i57 - $x$1$lcssa$i55 | 0;
     if (($sub$i58 | 0) > 255) {
      $dst$2258$i = $dst$1$i45;
      $skip$0259$i = $sub$i58;
      while (1) {
       if ((HEAP8[$BytesPerPixel$i34 >> 0] | 0) == 4) {
        HEAP16[$dst$2258$i >> 1] = 255;
        HEAP16[$dst$2258$i + 2 >> 1] = 0;
        $$sink99 = 4;
       } else {
        HEAP8[$dst$2258$i >> 0] = -1;
        HEAP8[$dst$2258$i + 1 >> 0] = 0;
        $$sink99 = 2;
       }
       $add$ptr127$i = $dst$2258$i + $$sink99 | 0;
       $sub129$i = $skip$0259$i + -255 | 0;
       if (($skip$0259$i | 0) > 510) {
        $dst$2258$i = $add$ptr127$i;
        $skip$0259$i = $sub129$i;
       } else {
        $dst$2$lcssa$i60 = $add$ptr127$i;
        $skip$0$lcssa$i61 = $sub129$i;
        break;
       }
      }
     } else {
      $dst$2$lcssa$i60 = $dst$1$i45;
      $skip$0$lcssa$i61 = $sub$i58;
     }
     $cond$i62 = ($sub109$i | 0) < 255 ? $sub109$i : 255;
     if ((HEAP8[$BytesPerPixel$i34 >> 0] | 0) == 4) {
      HEAP16[$dst$2$lcssa$i60 >> 1] = $skip$0$lcssa$i61;
      HEAP16[$dst$2$lcssa$i60 + 2 >> 1] = $cond$i62;
      $$sink100 = 4;
     } else {
      HEAP8[$dst$2$lcssa$i60 >> 0] = $skip$0$lcssa$i61;
      HEAP8[$dst$2$lcssa$i60 + 1 >> 0] = $cond$i62;
      $$sink100 = 2;
     }
     $add$ptr148$i = $dst$2$lcssa$i60 + $$sink100 | 0;
     $add$ptr152$i = $add$ptr148$i + (FUNCTION_TABLE_iiiiii[$copy_opaque$1$i & 7]($add$ptr148$i, $src$0291$i + ($x$1$lcssa$i55 << 2) | 0, $cond$i62, $67, $34) | 0) | 0;
     $sub154$i = $sub109$i - $cond$i62 | 0;
     if (!$sub154$i) $dst$5$lcssa$i66 = $add$ptr152$i; else {
      $dst$5263$i = $add$ptr152$i;
      $run$0265$i = $sub154$i;
      $runstart$0264$i = $cond$i62 + $x$1$lcssa$i55 | 0;
      while (1) {
       $cond163$i = ($run$0265$i | 0) < 255 ? $run$0265$i : 255;
       if ((HEAP8[$BytesPerPixel$i34 >> 0] | 0) == 4) {
        HEAP16[$dst$5263$i >> 1] = 0;
        HEAP16[$dst$5263$i + 2 >> 1] = $cond163$i;
        $$sink101 = 4;
       } else {
        HEAP8[$dst$5263$i >> 0] = 0;
        HEAP8[$dst$5263$i + 1 >> 0] = $cond163$i;
        $$sink101 = 2;
       }
       $add$ptr177$i = $dst$5263$i + $$sink101 | 0;
       $add$ptr181$i = $add$ptr177$i + (FUNCTION_TABLE_iiiiii[$copy_opaque$1$i & 7]($add$ptr177$i, $src$0291$i + ($runstart$0264$i << 2) | 0, $cond163$i, $67, $34) | 0) | 0;
       $run$0265$i = $run$0265$i - $cond163$i | 0;
       if (!$run$0265$i) {
        $dst$5$lcssa$i66 = $add$ptr181$i;
        break;
       } else {
        $dst$5263$i = $add$ptr181$i;
        $runstart$0264$i = $cond163$i + $runstart$0264$i | 0;
       }
      }
     }
     if (!$cmp90$lcssa$i) break; else {
      $dst$1$i45 = $dst$5$lcssa$i66;
      $x$0$i46 = $x$2$lcssa$i57;
     }
    }
    $blankline$2$i = $blankline$0$i47;
    $dst$7$i68 = $dst$5$lcssa$i66 + ($dst$5$lcssa$i66 & 2) | 0;
    $lastline$1$i69 = $lastline$0292$i;
    $x$3$i = 0;
    while (1) {
     L165 : do if (($x$3$i | 0) < ($66 | 0)) {
      $79 = HEAP32[$Amask84$i >> 2] | 0;
      $conv201$i = HEAPU8[$Ashift85$i >> 0] | 0;
      $x$4268$i = $x$3$i;
      while (1) {
       if ((((HEAP32[$src$0291$i + ($x$4268$i << 2) >> 2] & $79) >>> $conv201$i) + -1 | 0) >>> 0 <= 253) {
        $x$4$lcssa$i = $x$4268$i;
        break L165;
       }
       $inc209$i = $x$4268$i + 1 | 0;
       if (($inc209$i | 0) < ($66 | 0)) $x$4268$i = $inc209$i; else {
        $x$4$lcssa$i = $inc209$i;
        break;
       }
      }
     } else $x$4$lcssa$i = $x$3$i; while (0);
     L171 : do if (($x$4$lcssa$i | 0) < ($66 | 0)) {
      $82 = HEAP32[$Amask84$i >> 2] | 0;
      $conv219$i = HEAPU8[$Ashift85$i >> 0] | 0;
      $x$5272$i = $x$4$lcssa$i;
      while (1) {
       if ((((HEAP32[$src$0291$i + ($x$5272$i << 2) >> 2] & $82) >>> $conv219$i) + -1 | 0) >>> 0 >= 254) {
        $cmp212$lcssa$i = 1;
        $x$5$lcssa$i = $x$5272$i;
        break L171;
       }
       $inc226$i = $x$5272$i + 1 | 0;
       if (($inc226$i | 0) < ($66 | 0)) $x$5272$i = $inc226$i; else {
        $cmp212$lcssa$i = 0;
        $x$5$lcssa$i = $inc226$i;
        break;
       }
      }
     } else {
      $cmp212$lcssa$i = 0;
      $x$5$lcssa$i = $x$4$lcssa$i;
     } while (0);
     $sub228$i = $x$4$lcssa$i - $x$3$i | 0;
     $blankline$2$i = $blankline$2$i & ($sub228$i | 0) == ($66 | 0);
     $sub232$i = $x$5$lcssa$i - $x$4$lcssa$i | 0;
     if (($sub228$i | 0) > 65535) {
      $dst$8279$i = $dst$7$i68;
      $skip191$0280$i = $sub228$i;
      while (1) {
       HEAP16[$dst$8279$i >> 1] = -1;
       HEAP16[$dst$8279$i + 2 >> 1] = 0;
       $add$ptr240$i = $dst$8279$i + 4 | 0;
       $sub241$i = $skip191$0280$i + -65535 | 0;
       if (($skip191$0280$i | 0) > 131070) {
        $dst$8279$i = $add$ptr240$i;
        $skip191$0280$i = $sub241$i;
       } else {
        $dst$8$lcssa$i = $add$ptr240$i;
        $skip191$0$lcssa$i = $sub241$i;
        break;
       }
      }
     } else {
      $dst$8$lcssa$i = $dst$7$i68;
      $skip191$0$lcssa$i = $sub228$i;
     }
     $cond248$i = ($sub232$i | 0) < 65535 ? $sub232$i : 65535;
     HEAP16[$dst$8$lcssa$i >> 1] = $skip191$0$lcssa$i;
     HEAP16[$dst$8$lcssa$i + 2 >> 1] = $cond248$i;
     $add$ptr253$i = $dst$8$lcssa$i + 4 | 0;
     $add$ptr256$i = $add$ptr253$i + (FUNCTION_TABLE_iiiiii[$copy_transl$1$i & 7]($add$ptr253$i, $src$0291$i + ($x$4$lcssa$i << 2) | 0, $cond248$i, $67, $34) | 0) | 0;
     $sub258$i = $sub232$i - $cond248$i | 0;
     if (!$sub258$i) $dst$9$lcssa$i = $add$ptr256$i; else {
      $dst$9284$i = $add$ptr256$i;
      $run190$0286$i = $sub258$i;
      $runstart$1285$i = $cond248$i + $x$4$lcssa$i | 0;
      while (1) {
       $cond267$i = ($run190$0286$i | 0) < 65535 ? $run190$0286$i : 65535;
       HEAP16[$dst$9284$i >> 1] = 0;
       HEAP16[$dst$9284$i + 2 >> 1] = $cond267$i;
       $add$ptr271$i = $dst$9284$i + 4 | 0;
       $add$ptr274$i = $add$ptr271$i + (FUNCTION_TABLE_iiiiii[$copy_transl$1$i & 7]($add$ptr271$i, $src$0291$i + ($runstart$1285$i << 2) | 0, $cond267$i, $67, $34) | 0) | 0;
       $run190$0286$i = $run190$0286$i - $cond267$i | 0;
       if (!$run190$0286$i) {
        $dst$9$lcssa$i = $add$ptr274$i;
        break;
       } else {
        $dst$9284$i = $add$ptr274$i;
        $runstart$1285$i = $cond267$i + $runstart$1285$i | 0;
       }
      }
     }
     $lastline$1$i69 = ($blankline$2$i | 0) == 0 ? $dst$9$lcssa$i : $lastline$1$i69;
     if (!$cmp212$lcssa$i) break; else {
      $dst$7$i68 = $dst$9$lcssa$i;
      $x$3$i = $x$5$lcssa$i;
     }
    }
    $y$0290$i = $y$0290$i + 1 | 0;
    if (($y$0290$i | 0) == ($65 | 0)) break; else {
     $dst$0289$i = $dst$9$lcssa$i;
     $lastline$0292$i = $lastline$1$i69;
     $src$0291$i = $src$0291$i + (HEAP32[$pitch$i42 >> 2] >> 2 << 2) | 0;
    }
   }
   $86 = HEAP8[$BytesPerPixel$i34 >> 0] | 0;
   $lastline$0$lcssa$i71 = $lastline$1$i69;
  } else {
   $86 = $44;
   $lastline$0$lcssa$i71 = $add$ptr$i40;
  }
  if ($86 << 24 >> 24 == 4) {
   HEAP16[$lastline$0$lcssa$i71 >> 1] = 0;
   HEAP16[$lastline$0$lcssa$i71 + 2 >> 1] = 0;
   $$sink102 = 4;
  } else {
   HEAP8[$lastline$0$lcssa$i71 >> 0] = 0;
   HEAP8[$lastline$0$lcssa$i71 + 1 >> 0] = 0;
   $$sink102 = 2;
  }
  if (!(HEAP32[$surface >> 2] & 1)) {
   _SDL_free(HEAP32[$pixels >> 2] | 0);
   HEAP32[$pixels >> 2] = 0;
  }
  $call307$i = _SDL_realloc($call$i38, $lastline$0$lcssa$i71 + $$sink102 - $call$i38 | 0) | 0;
  $89 = HEAP32[$map >> 2] | 0;
  HEAP32[$89 + 12 >> 2] = ($call307$i | 0) == 0 ? $call$i38 : $call307$i;
  $$sink104 = 16384;
  $$sink107 = $89;
  $SDL_RLEAlphaBlit$sink = 4;
 } while (0);
 HEAP32[$$sink107 + 8 >> 2] = $SDL_RLEAlphaBlit$sink;
 $flags57 = $$sink107 + 68 | 0;
 HEAP32[$flags57 >> 2] = HEAP32[$flags57 >> 2] | $$sink104;
 HEAP32[$surface >> 2] = HEAP32[$surface >> 2] | 2;
 $retval$0 = 0;
 return $retval$0 | 0;
}

function _IMG_LoadBMP_RW($src) {
 $src = $src | 0;
 var $$sink = 0, $1 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $23 = 0, $31 = 0, $32 = 0, $33 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $51 = 0, $57 = 0, $65 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $87 = 0, $9 = 0, $91 = 0, $94 = 0, $Amask$0$i = 0, $Bmask$0$i = 0, $ExpandBMP$0$i = 0, $Gmask$0$i = 0, $Rmask$0$i = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$ptr$i$i = 0, $add$ptr1$ptr$i$i = 0, $alpha$05$i$i = 0, $alpha$13$i$i = 0, $arrayidx$i$i = 0, $arrayidx115$i$i = 0, $arrayidx131$i$i = 0, $arrayidx21$i$i = 0, $arrayidx34$i$i = 0, $arrayidx86$i$i = 0, $biBitCount$0$i = 0, $biBitCount$1$i = 0, $biCompression$0$i = 0, $biHeight$0$i = 0, $biHeight$1$i = 0, $biWidth$0$i = 0, $bits$013$i$i = 0, $bits$1$i$i = 0, $bits$142$i = 0, $bits$142$us$i = 0, $bits$142$us$i$us = 0, $call15$i = 0, $call16$i = 0, $call24$i = 0, $call242$i = 0, $call25$i = 0, $call27$i = 0, $call28$i = 0, $call70$i = 0, $call71$i = 0, $call74$i = 0, $call75$i = 0, $call76$i = 0, $call82$i = 0, $call82$idx11$val$i = 0, $call82$idx12$val$i = 0, $call82$idx8$val$i = 0, $call82$idx9$val$i = 0, $ch$i$i = 0, $cmp10343$i = 0, $cmp161$i = 0, $cmp17$i = 0, $cmp25337$i = 0, $cmp42$i = 0, $colors$i = 0, $colors123$i = 0, $conv$i = 0, $conv21$i = 0, $conv53$i$i = 0, $conv81$i = 0, $correctAlpha$0$i = 0, $dec$i$i = 0, $dec126$i$i = 0, $dec142$i$i = 0, $dec29$i$i = 0, $dec42$i$i = 0, $dec98$i$i = 0, $div$i = 0, $div$us$i = 0, $div$us$i$us = 0, $h$i = 0, $i$044$i = 0, $i$146$i = 0, $i$236$i = 0, $i$236$us$i = 0, $i$236$us$i$us = 0, $i$338$i = 0, $i$338$us$i = 0, $idx$neg$i$i = 0, $inc$i$i = 0, $inc114$i$i = 0, $inc20$i$i = 0, $inc33$i$i = 0, $inc85$i$i = 0, $magic$i = 0, $mul$i13$i = 0, $needsPad$0$in$in$i$i = 0, $ofs$012$i$i = 0, $ofs$1$i$i = 0, $ofs$10$i$i = 0, $ofs$11$i$i = 0, $ofs$2$i$i = 0, $ofs$5$ph$i$i = 0, $ofs$6$i$i = 0, $ofs$88$i$i = 0, $pitch$i = 0, $pixel$i$i = 0, $pixels$i = 0, $read$i = 0, $rem191$i = 0, $retval$0$i = 0, $seek$i = 0, $shl$i = 0, $spec$select26$i = 0, $spec$select5$i = 0, $sub212$i = 0, $tobool250$i = 0, $trunc$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $w$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ch$i$i = sp + 23 | 0;
 $pixel$i$i = sp + 22 | 0;
 $magic$i = sp + 20 | 0;
 if (!$src) {
  $retval$0$i = 0;
  STACKTOP = sp;
  return $retval$0$i | 0;
 }
 $seek$i = $src + 4 | 0;
 $1 = FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, 0, 0, 1) | 0;
 $2 = getTempRet0() | 0;
 _SDL_ClearError();
 $read$i = $src + 8 | 0;
 do if ((FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $magic$i, 1, 2) | 0) == 2) {
  if (_SDL_strncmp($magic$i, 4136, 2) | 0) {
   _SDL_SetError(4187, $vararg_buffer) | 0;
   break;
  }
  _SDL_ReadLE32($src) | 0;
  _SDL_ReadLE16($src) | 0;
  _SDL_ReadLE16($src) | 0;
  $call15$i = _SDL_ReadLE32($src) | 0;
  $call16$i = _SDL_ReadLE32($src) | 0;
  $cmp17$i = ($call16$i | 0) == 12;
  if ($cmp17$i) {
   $conv$i = (_SDL_ReadLE16($src) | 0) & 65535;
   $conv21$i = (_SDL_ReadLE16($src) | 0) & 65535;
   _SDL_ReadLE16($src) | 0;
   $biBitCount$0$i = _SDL_ReadLE16($src) | 0;
   $biCompression$0$i = 0;
   $biHeight$0$i = $conv21$i;
   $biWidth$0$i = $conv$i;
  } else {
   $call24$i = _SDL_ReadLE32($src) | 0;
   $call25$i = _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE16($src) | 0;
   $call27$i = _SDL_ReadLE16($src) | 0;
   $call28$i = _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   if ($call16$i >>> 0 > 40) {
    FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, $call16$i + -40 | 0, 0, 1) | 0;
    getTempRet0() | 0;
    $biBitCount$0$i = $call27$i;
    $biCompression$0$i = $call28$i;
    $biHeight$0$i = $call25$i;
    $biWidth$0$i = $call24$i;
   } else {
    $biBitCount$0$i = $call27$i;
    $biCompression$0$i = $call28$i;
    $biHeight$0$i = $call25$i;
    $biWidth$0$i = $call24$i;
   }
  }
  $cmp42$i = ($biHeight$0$i | 0) < 0;
  $biHeight$1$i = $cmp42$i ? 0 - $biHeight$0$i | 0 : $biHeight$0$i;
  if (!(HEAP8[(_SDL_GetError() | 0) >> 0] | 0)) {
   switch ($biBitCount$0$i << 16 >> 16) {
   case 4:
   case 1:
    {
     $ExpandBMP$0$i = $biBitCount$0$i & 65535;
     $biBitCount$1$i = 8;
     break;
    }
   default:
    {
     $ExpandBMP$0$i = 0;
     $biBitCount$1$i = $biBitCount$0$i;
    }
   }
   L18 : do if (($call15$i | 0) == ($call16$i + 14 | 0) & ($biCompression$0$i | 0) == 0) switch ($biBitCount$1$i << 16 >> 16) {
   case 16:
   case 15:
    {
     $Amask$0$i = 0;
     $Bmask$0$i = 31;
     $Gmask$0$i = 992;
     $Rmask$0$i = 31744;
     $correctAlpha$0$i = 0;
     break L18;
     break;
    }
   case 24:
    {
     $Amask$0$i = 0;
     $Bmask$0$i = 255;
     $Gmask$0$i = 65280;
     $Rmask$0$i = 16711680;
     $correctAlpha$0$i = 0;
     break L18;
     break;
    }
   case 32:
    {
     $Amask$0$i = -16777216;
     $Bmask$0$i = 255;
     $Gmask$0$i = 65280;
     $Rmask$0$i = 16711680;
     $correctAlpha$0$i = 1;
     break L18;
     break;
    }
   default:
    {
     $Amask$0$i = 0;
     $Bmask$0$i = 0;
     $Gmask$0$i = 0;
     $Rmask$0$i = 0;
     $correctAlpha$0$i = 0;
     break L18;
    }
   } else switch ($biBitCount$1$i << 16 >> 16) {
   case 16:
   case 15:
    {
     $call70$i = _SDL_ReadLE32($src) | 0;
     $call71$i = _SDL_ReadLE32($src) | 0;
     $Amask$0$i = 0;
     $Bmask$0$i = _SDL_ReadLE32($src) | 0;
     $Gmask$0$i = $call71$i;
     $Rmask$0$i = $call70$i;
     $correctAlpha$0$i = 0;
     break L18;
     break;
    }
   case 32:
    {
     $call74$i = _SDL_ReadLE32($src) | 0;
     $call75$i = _SDL_ReadLE32($src) | 0;
     $call76$i = _SDL_ReadLE32($src) | 0;
     $Amask$0$i = _SDL_ReadLE32($src) | 0;
     $Bmask$0$i = $call76$i;
     $Gmask$0$i = $call75$i;
     $Rmask$0$i = $call74$i;
     $correctAlpha$0$i = 0;
     break L18;
     break;
    }
   default:
    {
     $Amask$0$i = 0;
     $Bmask$0$i = 0;
     $Gmask$0$i = 0;
     $Rmask$0$i = 0;
     $correctAlpha$0$i = 0;
     break L18;
    }
   } while (0);
   $conv81$i = $biBitCount$1$i & 65535;
   $call82$i = _SDL_CreateRGBSurface(0, $biWidth$0$i, $biHeight$1$i, $conv81$i, $Rmask$0$i, $Gmask$0$i, $Bmask$0$i, $Amask$0$i) | 0;
   if ($call82$i | 0) {
    $7 = HEAP32[(HEAP32[$call82$i + 4 >> 2] | 0) + 4 >> 2] | 0;
    do if (!$7) label = 33; else {
     $8 = HEAP32[$seek$i >> 2] | 0;
     $9 = _i64Add($1 | 0, $2 | 0, 14, 0) | 0;
     $11 = _i64Add($9 | 0, getTempRet0() | 0, $call16$i | 0, 0) | 0;
     $12 = getTempRet0() | 0;
     FUNCTION_TABLE_iiiii[$8 & 7]($src, $11, $12, 0) | 0;
     if ((getTempRet0() | 0) < 0) {
      _SDL_Error(3) | 0;
      label = 135;
      break;
     }
     $shl$i = 1 << $conv81$i;
     $cmp10343$i = $biBitCount$1$i << 16 >> 16 != 31;
     if ($cmp17$i) {
      if ($cmp10343$i) {
       $colors$i = $7 + 4 | 0;
       $16 = HEAP32[$colors$i >> 2] | 0;
       $i$044$i = 0;
       do {
        FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $16 + ($i$044$i << 2) + 2 | 0, 1, 1) | 0;
        FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, (HEAP32[$colors$i >> 2] | 0) + ($i$044$i << 2) + 1 | 0, 1, 1) | 0;
        FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, (HEAP32[$colors$i >> 2] | 0) + ($i$044$i << 2) | 0, 1, 1) | 0;
        $16 = HEAP32[$colors$i >> 2] | 0;
        HEAP8[$16 + ($i$044$i << 2) + 3 >> 0] = -1;
        $i$044$i = $i$044$i + 1 | 0;
       } while (($i$044$i | 0) < ($shl$i | 0));
      }
     } else if ($cmp10343$i) {
      $colors123$i = $7 + 4 | 0;
      $23 = HEAP32[$colors123$i >> 2] | 0;
      $i$146$i = 0;
      do {
       FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $23 + ($i$146$i << 2) + 2 | 0, 1, 1) | 0;
       FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, (HEAP32[$colors123$i >> 2] | 0) + ($i$146$i << 2) + 1 | 0, 1, 1) | 0;
       FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, (HEAP32[$colors123$i >> 2] | 0) + ($i$146$i << 2) | 0, 1, 1) | 0;
       FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, (HEAP32[$colors123$i >> 2] | 0) + ($i$146$i << 2) + 3 | 0, 1, 1) | 0;
       $23 = HEAP32[$colors123$i >> 2] | 0;
       HEAP8[$23 + ($i$146$i << 2) + 3 >> 0] = -1;
       $i$146$i = $i$146$i + 1 | 0;
      } while (($i$146$i | 0) < ($shl$i | 0));
     }
     HEAP32[$7 >> 2] = $shl$i;
     label = 33;
    } while (0);
    L45 : do if ((label | 0) == 33) {
     $31 = HEAP32[$seek$i >> 2] | 0;
     $32 = _i64Add($1 | 0, $2 | 0, $call15$i | 0, 0) | 0;
     $33 = getTempRet0() | 0;
     FUNCTION_TABLE_iiiii[$31 & 7]($src, $32, $33, 0) | 0;
     do if ((getTempRet0() | 0) < 0) _SDL_Error(3) | 0; else {
      if (($biCompression$0$i + -1 | 0) >>> 0 < 2) {
       $call82$idx8$val$i = HEAP32[$call82$i + 16 >> 2] | 0;
       $call82$idx9$val$i = HEAP32[$call82$i + 20 >> 2] | 0;
       $add$ptr$i$i = $call82$idx9$val$i + (Math_imul($call82$idx8$val$i, HEAP32[$call82$i + 12 >> 2] | 0) | 0) | 0;
       $idx$neg$i$i = 0 - $call82$idx8$val$i | 0;
       L52 : do if (FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0) {
        $cmp161$i = ($biCompression$0$i | 0) != 1;
        $bits$013$i$i = $add$ptr$i$i + $idx$neg$i$i | 0;
        $ofs$012$i$i = 0;
        L54 : while (1) {
         L56 : do if (!(HEAP8[$ch$i$i >> 0] | 0)) {
          if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L52;
          $49 = HEAP8[$ch$i$i >> 0] | 0;
          $conv53$i$i = $49 & 255;
          switch ($49 << 24 >> 24) {
          case 1:
           {
            label = 81;
            break L54;
            break;
           }
          case 0:
           {
            $bits$1$i$i = $bits$013$i$i + $idx$neg$i$i | 0;
            $ofs$11$i$i = 0;
            break L56;
            break;
           }
          case 2:
           {
            if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L52;
            $51 = HEAP8[$ch$i$i >> 0] | 0;
            if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L52;
            $bits$1$i$i = $bits$013$i$i + (Math_imul(HEAPU8[$ch$i$i >> 0] | 0, $idx$neg$i$i) | 0) | 0;
            $ofs$11$i$i = $ofs$012$i$i + ($51 & 255) | 0;
            break L56;
            break;
           }
          default:
           {
            L61 : do if ($cmp161$i) {
             $57 = ($conv53$i$i + 1 | 0) >>> 1;
             if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $pixel$i$i, 1, 1) | 0)) {
              label = 70;
              break L54;
             }
             $ofs$88$i$i = $ofs$012$i$i;
             while (1) {
              $inc114$i$i = $ofs$88$i$i + 1 | 0;
              $arrayidx115$i$i = $bits$013$i$i + $ofs$88$i$i | 0;
              if ($arrayidx115$i$i >>> 0 >= $call82$idx9$val$i >>> 0 & $arrayidx115$i$i >>> 0 < $add$ptr$i$i >>> 0) HEAP8[$arrayidx115$i$i >> 0] = (HEAPU8[$pixel$i$i >> 0] | 0) >>> 4;
              $dec126$i$i = (HEAP8[$ch$i$i >> 0] | 0) + -1 << 24 >> 24;
              HEAP8[$ch$i$i >> 0] = $dec126$i$i;
              if (!($dec126$i$i << 24 >> 24)) break;
              $ofs$88$i$i = $ofs$88$i$i + 2 | 0;
              $arrayidx131$i$i = $bits$013$i$i + $inc114$i$i | 0;
              if ($arrayidx131$i$i >>> 0 >= $call82$idx9$val$i >>> 0 & $arrayidx131$i$i >>> 0 < $add$ptr$i$i >>> 0) {
               HEAP8[$arrayidx131$i$i >> 0] = HEAP8[$pixel$i$i >> 0] & 15;
               $65 = HEAP8[$ch$i$i >> 0] | 0;
              } else $65 = $dec126$i$i;
              $dec142$i$i = $65 + -1 << 24 >> 24;
              HEAP8[$ch$i$i >> 0] = $dec142$i$i;
              if (!($dec142$i$i << 24 >> 24)) {
               $needsPad$0$in$in$i$i = $57;
               $ofs$10$i$i = $ofs$88$i$i;
               break L61;
              }
              if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $pixel$i$i, 1, 1) | 0)) {
               label = 70;
               break L54;
              }
             }
             $needsPad$0$in$in$i$i = $57;
             $ofs$10$i$i = $inc114$i$i;
            } else {
             $ofs$6$i$i = $ofs$012$i$i;
             while (1) {
              if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $pixel$i$i, 1, 1) | 0)) {
               label = 65;
               break L54;
              }
              $inc85$i$i = $ofs$6$i$i + 1 | 0;
              $arrayidx86$i$i = $bits$013$i$i + $ofs$6$i$i | 0;
              if ($arrayidx86$i$i >>> 0 >= $call82$idx9$val$i >>> 0 & $arrayidx86$i$i >>> 0 < $add$ptr$i$i >>> 0) HEAP8[$arrayidx86$i$i >> 0] = HEAP8[$pixel$i$i >> 0] | 0;
              $dec98$i$i = (HEAP8[$ch$i$i >> 0] | 0) + -1 << 24 >> 24;
              HEAP8[$ch$i$i >> 0] = $dec98$i$i;
              if (!($dec98$i$i << 24 >> 24)) {
               $needsPad$0$in$in$i$i = $conv53$i$i;
               $ofs$10$i$i = $inc85$i$i;
               break;
              } else $ofs$6$i$i = $inc85$i$i;
             }
            } while (0);
            if (!($needsPad$0$in$in$i$i & 1)) {
             $bits$1$i$i = $bits$013$i$i;
             $ofs$11$i$i = $ofs$10$i$i;
             break L56;
            }
            if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L52; else {
             $bits$1$i$i = $bits$013$i$i;
             $ofs$11$i$i = $ofs$10$i$i;
             break L56;
            }
           }
          }
         } else {
          if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $pixel$i$i, 1, 1) | 0)) {
           label = 53;
           break L54;
          }
          L90 : do if ($cmp161$i) {
           $43 = HEAP8[$pixel$i$i >> 0] | 0;
           $44 = ($43 & 255) >>> 4;
           $45 = $43 & 15;
           $ofs$2$i$i = $ofs$012$i$i;
           while (1) {
            $inc20$i$i = $ofs$2$i$i + 1 | 0;
            $arrayidx21$i$i = $bits$013$i$i + $ofs$2$i$i | 0;
            if ($arrayidx21$i$i >>> 0 >= $call82$idx9$val$i >>> 0 & $arrayidx21$i$i >>> 0 < $add$ptr$i$i >>> 0) HEAP8[$arrayidx21$i$i >> 0] = $44;
            $dec29$i$i = (HEAP8[$ch$i$i >> 0] | 0) + -1 << 24 >> 24;
            HEAP8[$ch$i$i >> 0] = $dec29$i$i;
            if (!($dec29$i$i << 24 >> 24)) {
             $ofs$5$ph$i$i = $inc20$i$i;
             break L90;
            }
            $inc33$i$i = $ofs$2$i$i + 2 | 0;
            $arrayidx34$i$i = $bits$013$i$i + $inc20$i$i | 0;
            if ($arrayidx34$i$i >>> 0 >= $call82$idx9$val$i >>> 0 & $arrayidx34$i$i >>> 0 < $add$ptr$i$i >>> 0) {
             HEAP8[$arrayidx34$i$i >> 0] = $45;
             $47 = HEAP8[$ch$i$i >> 0] | 0;
            } else $47 = $dec29$i$i;
            $dec42$i$i = $47 + -1 << 24 >> 24;
            HEAP8[$ch$i$i >> 0] = $dec42$i$i;
            if (!($dec42$i$i << 24 >> 24)) {
             $ofs$5$ph$i$i = $inc33$i$i;
             break;
            } else $ofs$2$i$i = $inc33$i$i;
           }
          } else {
           $ofs$1$i$i = $ofs$012$i$i;
           while (1) {
            $inc$i$i = $ofs$1$i$i + 1 | 0;
            $arrayidx$i$i = $bits$013$i$i + $ofs$1$i$i | 0;
            if ($arrayidx$i$i >>> 0 >= $call82$idx9$val$i >>> 0 & $arrayidx$i$i >>> 0 < $add$ptr$i$i >>> 0) HEAP8[$arrayidx$i$i >> 0] = HEAP8[$pixel$i$i >> 0] | 0;
            $dec$i$i = (HEAP8[$ch$i$i >> 0] | 0) + -1 << 24 >> 24;
            HEAP8[$ch$i$i >> 0] = $dec$i$i;
            if (!($dec$i$i << 24 >> 24)) {
             $ofs$5$ph$i$i = $inc$i$i;
             break;
            } else $ofs$1$i$i = $inc$i$i;
           }
          } while (0);
          $bits$1$i$i = $bits$013$i$i;
          $ofs$11$i$i = $ofs$5$ph$i$i;
         } while (0);
         if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L52; else {
          $bits$013$i$i = $bits$1$i$i;
          $ofs$012$i$i = $ofs$11$i$i;
         }
        }
        if ((label | 0) == 53) break; else if ((label | 0) == 65) break; else if ((label | 0) == 70) break; else if ((label | 0) == 81) {
         $retval$0$i = $call82$i;
         STACKTOP = sp;
         return $retval$0$i | 0;
        }
       } while (0);
       _SDL_SetError(4218, $vararg_buffer1) | 0;
       break;
      }
      $pixels$i = $call82$i + 20 | 0;
      $68 = HEAP32[$pixels$i >> 2] | 0;
      $h$i = $call82$i + 12 | 0;
      $pitch$i = $call82$i + 16 | 0;
      $70 = HEAP32[$pitch$i >> 2] | 0;
      $add$ptr$i = $68 + (Math_imul($70, HEAP32[$h$i >> 2] | 0) | 0) | 0;
      $trunc$i = $ExpandBMP$0$i & 65535;
      switch ($trunc$i << 16 >> 16) {
      case 1:
       {
        $$sink = $biWidth$0$i + 7 >> 3;
        break;
       }
      case 4:
       {
        $$sink = $biWidth$0$i + 1 >> 1;
        break;
       }
      default:
       $$sink = $70;
      }
      $rem191$i = ($$sink | 0) % 4 | 0;
      $spec$select5$i = ($rem191$i | 0) == 0 ? 0 : 4 - $rem191$i | 0;
      $spec$select26$i = $cmp42$i ? $68 : $add$ptr$i + (0 - $70) | 0;
      L121 : do if ($spec$select26$i >>> 0 >= $68 >>> 0 & $spec$select26$i >>> 0 < $add$ptr$i >>> 0) {
       $tobool250$i = ($spec$select5$i | 0) == 0;
       $sub212$i = 8 - $ExpandBMP$0$i | 0;
       $w$i = $call82$i + 8 | 0;
       $cmp25337$i = ($spec$select5$i | 0) > 0;
       L123 : do if ($trunc$i << 16 >> 16 == 1) {
        if ($tobool250$i) {
         $102 = $70;
         $72 = HEAP32[$w$i >> 2] | 0;
         $bits$142$us$i$us = $spec$select26$i;
         while (1) {
          HEAP8[$ch$i$i >> 0] = 0;
          if (($72 | 0) > 0) {
           $div$us$i$us = 8 / ($ExpandBMP$0$i >>> 0) | 0;
           $104 = 0;
           $i$236$us$i$us = 0;
           do {
            if (!(($i$236$us$i$us >>> 0) % ($div$us$i$us >>> 0) | 0)) {
             if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L123;
             $74 = HEAP8[$ch$i$i >> 0] | 0;
            } else $74 = $104;
            HEAP8[$bits$142$us$i$us + $i$236$us$i$us >> 0] = ($74 & 255) >>> $sub212$i;
            $104 = HEAPU8[$ch$i$i >> 0] << $ExpandBMP$0$i & 255;
            HEAP8[$ch$i$i >> 0] = $104;
            $i$236$us$i$us = $i$236$us$i$us + 1 | 0;
            $76 = HEAP32[$w$i >> 2] | 0;
           } while (($i$236$us$i$us | 0) < ($76 | 0));
           $103 = $76;
           $77 = HEAP32[$pitch$i >> 2] | 0;
          } else {
           $103 = $72;
           $77 = $102;
          }
          $bits$142$us$i$us = $bits$142$us$i$us + ($cmp42$i ? $77 : 0 - $77 | 0) | 0;
          if (!($bits$142$us$i$us >>> 0 >= $68 >>> 0 & $bits$142$us$i$us >>> 0 < $add$ptr$i >>> 0)) {
           $call82$idx11$val$i = $77;
           break L121;
          } else {
           $102 = $77;
           $72 = $103;
          }
         }
        }
        $bits$142$us$i = $spec$select26$i;
        while (1) {
         HEAP8[$ch$i$i >> 0] = 0;
         if ((HEAP32[$w$i >> 2] | 0) > 0) {
          $div$us$i = 8 / ($ExpandBMP$0$i >>> 0) | 0;
          $105 = 0;
          $i$236$us$i = 0;
          do {
           if (!(($i$236$us$i >>> 0) % ($div$us$i >>> 0) | 0)) {
            if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L123;
            $80 = HEAP8[$ch$i$i >> 0] | 0;
           } else $80 = $105;
           HEAP8[$bits$142$us$i + $i$236$us$i >> 0] = ($80 & 255) >>> $sub212$i;
           $105 = HEAPU8[$ch$i$i >> 0] << $ExpandBMP$0$i & 255;
           HEAP8[$ch$i$i >> 0] = $105;
           $i$236$us$i = $i$236$us$i + 1 | 0;
          } while (($i$236$us$i | 0) < (HEAP32[$w$i >> 2] | 0));
         }
         if ($cmp25337$i) {
          $i$338$us$i = 0;
          do {
           FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0;
           $i$338$us$i = $i$338$us$i + 1 | 0;
          } while (($i$338$us$i | 0) != ($spec$select5$i | 0));
         }
         $83 = HEAP32[$pitch$i >> 2] | 0;
         $bits$142$us$i = $bits$142$us$i + ($cmp42$i ? $83 : 0 - $83 | 0) | 0;
         if (!($bits$142$us$i >>> 0 >= $68 >>> 0 & $bits$142$us$i >>> 0 < $add$ptr$i >>> 0)) {
          $call82$idx11$val$i = $83;
          break L121;
         }
        }
       } else {
        $91 = $70;
        $bits$142$i = $spec$select26$i;
        L157 : while (1) {
         switch ($trunc$i << 16 >> 16) {
         case 4:
         case 1:
          {
           HEAP8[$ch$i$i >> 0] = 0;
           if ((HEAP32[$w$i >> 2] | 0) > 0) {
            $div$i = 8 / ($ExpandBMP$0$i >>> 0) | 0;
            $106 = 0;
            $i$236$i = 0;
            do {
             if (!(($i$236$i >>> 0) % ($div$i >>> 0) | 0)) {
              if (!(FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0)) break L123;
              $87 = HEAP8[$ch$i$i >> 0] | 0;
             } else $87 = $106;
             HEAP8[$bits$142$i + $i$236$i >> 0] = ($87 & 255) >>> $sub212$i;
             $106 = HEAPU8[$ch$i$i >> 0] << $ExpandBMP$0$i & 255;
             HEAP8[$ch$i$i >> 0] = $106;
             $i$236$i = $i$236$i + 1 | 0;
            } while (($i$236$i | 0) < (HEAP32[$w$i >> 2] | 0));
           }
           break;
          }
         default:
          {
           $call242$i = FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $bits$142$i, 1, $91) | 0;
           if (($call242$i | 0) != (HEAP32[$pitch$i >> 2] | 0)) break L157;
          }
         }
         if (!$tobool250$i) if ($cmp25337$i) {
          $i$338$i = 0;
          do {
           FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $ch$i$i, 1, 1) | 0;
           $i$338$i = $i$338$i + 1 | 0;
          } while (($i$338$i | 0) != ($spec$select5$i | 0));
         }
         $94 = HEAP32[$pitch$i >> 2] | 0;
         $bits$142$i = $bits$142$i + ($cmp42$i ? $94 : 0 - $94 | 0) | 0;
         if (!($bits$142$i >>> 0 >= $68 >>> 0 & $bits$142$i >>> 0 < $add$ptr$i >>> 0)) {
          $call82$idx11$val$i = $94;
          break L121;
         } else $91 = $94;
        }
        _SDL_Error(1) | 0;
        label = 135;
        break L45;
       } while (0);
       _SDL_SetError(4218, $vararg_buffer3) | 0;
       label = 135;
       break L45;
      } else $call82$idx11$val$i = $70; while (0);
      if (!$correctAlpha$0$i) {
       $retval$0$i = $call82$i;
       STACKTOP = sp;
       return $retval$0$i | 0;
      }
      $call82$idx12$val$i = HEAP32[$pixels$i >> 2] | 0;
      $add$ptr$ptr$i$i = $call82$idx12$val$i + 3 | 0;
      $mul$i13$i = Math_imul(HEAP32[$h$i >> 2] | 0, $call82$idx11$val$i) | 0;
      $add$ptr1$ptr$i$i = $call82$idx12$val$i + ($mul$i13$i + 3) | 0;
      if (($mul$i13$i | 0) <= 0) {
       $retval$0$i = $call82$i;
       STACKTOP = sp;
       return $retval$0$i | 0;
      }
      $alpha$05$i$i = $add$ptr$ptr$i$i;
      do {
       if (HEAP8[$alpha$05$i$i >> 0] | 0) {
        $retval$0$i = $call82$i;
        label = 138;
        break;
       }
       $alpha$05$i$i = $alpha$05$i$i + 4 | 0;
      } while ($alpha$05$i$i >>> 0 < $add$ptr1$ptr$i$i >>> 0);
      if ((label | 0) == 138) {
       STACKTOP = sp;
       return $retval$0$i | 0;
      }
      $alpha$13$i$i = $add$ptr$ptr$i$i;
      do {
       HEAP8[$alpha$13$i$i >> 0] = -1;
       $alpha$13$i$i = $alpha$13$i$i + 4 | 0;
      } while ($alpha$13$i$i >>> 0 < $add$ptr1$ptr$i$i >>> 0);
      $retval$0$i = $call82$i;
      STACKTOP = sp;
      return $retval$0$i | 0;
     } while (0);
     FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, $1, $2, 0) | 0;
     getTempRet0() | 0;
    } while (0);
    if ((label | 0) == 135) {
     FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, $1, $2, 0) | 0;
     getTempRet0() | 0;
    }
    _SDL_FreeSurface($call82$i);
    $retval$0$i = 0;
    STACKTOP = sp;
    return $retval$0$i | 0;
   }
  }
 } else _SDL_Error(1) | 0; while (0);
 FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, $1, $2, 0) | 0;
 getTempRet0() | 0;
 $retval$0$i = 0;
 STACKTOP = sp;
 return $retval$0$i | 0;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$pr = 0, $$pr415 = 0, $$pre517 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $62 = 0, $65 = 0, $70 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0, $a$9 = 0, $add = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $and62 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0493 = 0, $carry262$0484 = 0, $cmp131 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0491 = 0, $d$0494 = 0, $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select418 = 0.0, $sub = 0.0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub409 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool609 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $0 = ___DOUBLE_BITS_527($y) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) < 0) {
  $sub = -$y;
  $3 = ___DOUBLE_BITS_527($sub) | 0;
  $8 = getTempRet0() | 0;
  $85 = $3;
  $pl$0 = 1;
  $prefix$0 = 6930;
  $y$addr$0 = $sub;
 } else {
  $8 = $1;
  $85 = $0;
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 6931 : 6936) : 6933;
  $y$addr$0 = $y;
 }
 do if (0 == 0 & ($8 & 2146435072 | 0) == 2146435072) {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_524($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 6972 : 6957) : $tobool37 ? 6949 : 6953, 3);
  _pad_524($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink524 = $add;
 } else {
  $mul = +_frexp($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $spec$select = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if ($p >>> 0 > 11 | ($sub74 | 0) == 0) $y$addr$1 = $mul; else {
    $re$1426 = $sub74;
    $round$0425 = 8.0;
    do {
     $re$1426 = $re$1426 + -1 | 0;
     $round$0425 = $round$0425 * 16.0;
    } while (($re$1426 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0425 + (-$mul - $round$0425));
     break;
    } else {
     $y$addr$1 = $mul + $round$0425 - $round$0425;
     break;
    }
   } while (0);
   $15 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($15 | 0) < 0 ? 0 - $15 | 0 : $15;
   $18 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($18 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $18;
   HEAP8[$estr$0 + -1 >> 0] = ($15 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $cmp131 = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = $and62 | HEAPU8[2384 + $conv116 >> 0];
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast$le | 0) == 1) if ($tobool135 & ($cmp131 & $y$addr$2 == 0.0)) $s$1 = $incdec$ptr122; else {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $$pre517 = $s$1;
   if (!$p) label = 25; else if ((-2 - $sub$ptr$rhs$cast$le + $$pre517 | 0) < ($p | 0)) {
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $l$0 = $p + 2 + $sub$ptr$lhs$cast151 - $sub$ptr$rhs$cast152 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
   } else label = 25;
   if ((label | 0) == 25) {
    $sub$ptr$lhs$cast160 = $arrayidx;
    $sub$ptr$rhs$cast161 = $incdec$ptr115;
    $l$0 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le - $sub$ptr$rhs$cast161 + $$pre517 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
   }
   $add165 = $l$0 + $add67 | 0;
   _pad_524($f, 32, $w, $add165, $fl);
   _out($f, $spec$select, $add67);
   _pad_524($f, 48, $w, $add165, $fl ^ 65536);
   $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
   _out($f, $buf, $sub$ptr$sub172);
   $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
   _pad_524($f, 48, $l$0 - ($sub$ptr$sub172 + $sub$ptr$sub175) | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub175);
   _pad_524($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink524 = $add165;
   break;
  }
  $spec$select395 = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $z$0 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$1 = $z$0;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$1 >> 2] = $conv216;
   $z$1 = $z$1 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  $sub$ptr$rhs$cast345 = $z$0;
  if (($$pr | 0) > 0) {
   $26 = $$pr;
   $a$1502 = $z$0;
   $z$2501 = $z$1;
   while (1) {
    $cond233 = ($26 | 0) < 29 ? $26 : 29;
    $d$0491 = $z$2501 + -4 | 0;
    if ($d$0491 >>> 0 < $a$1502 >>> 0) $a$2 = $a$1502; else {
     $carry$0493 = 0;
     $d$0494 = $d$0491;
     do {
      $28 = _bitshift64Shl(HEAP32[$d$0494 >> 2] | 0, 0, $cond233 | 0) | 0;
      $30 = _i64Add($28 | 0, getTempRet0() | 0, $carry$0493 | 0, 0) | 0;
      $31 = getTempRet0() | 0;
      $carry$0493 = ___udivdi3($30 | 0, $31 | 0, 1e9, 0) | 0;
      $34 = ___muldi3($carry$0493 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $36 = _i64Subtract($30 | 0, $31 | 0, $34 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$d$0494 >> 2] = $36;
      $d$0494 = $d$0494 + -4 | 0;
     } while ($d$0494 >>> 0 >= $a$1502 >>> 0);
     if (!$carry$0493) $a$2 = $a$1502; else {
      $incdec$ptr246 = $a$1502 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0493;
      $a$2 = $incdec$ptr246;
     }
    }
    L57 : do if ($z$2501 >>> 0 > $a$2 >>> 0) {
     $z$3497 = $z$2501;
     while (1) {
      $arrayidx251 = $z$3497 + -4 | 0;
      if (HEAP32[$arrayidx251 >> 2] | 0) {
       $z$3$lcssa = $z$3497;
       break L57;
      }
      if ($arrayidx251 >>> 0 > $a$2 >>> 0) $z$3497 = $arrayidx251; else {
       $z$3$lcssa = $arrayidx251;
       break;
      }
     }
    } else $z$3$lcssa = $z$2501; while (0);
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $26 = $sub256;
     $a$1502 = $a$2;
     $z$2501 = $z$3$lcssa;
    } else {
     $$pr415 = $sub256;
     $a$1$lcssa = $a$2;
     $z$2$lcssa = $z$3$lcssa;
     break;
    }
   }
  } else {
   $$pr415 = $$pr;
   $a$1$lcssa = $z$0;
   $z$2$lcssa = $z$1;
  }
  if (($$pr415 | 0) < 0) {
   $add275 = (($spec$select395 + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $40 = $$pr415;
   $a$3488 = $a$1$lcssa;
   $z$4487 = $z$2$lcssa;
   while (1) {
    $sub264 = 0 - $40 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3488 >>> 0 < $z$4487 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0484 = 0;
     $d$1483 = $a$3488;
     do {
      $43 = HEAP32[$d$1483 >> 2] | 0;
      HEAP32[$d$1483 >> 2] = ($43 >>> $cond271) + $carry262$0484;
      $carry262$0484 = Math_imul($43 & $sub281, $shr285) | 0;
      $d$1483 = $d$1483 + 4 | 0;
     } while ($d$1483 >>> 0 < $z$4487 >>> 0);
     $spec$select396 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     if (!$carry262$0484) {
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487;
     } else {
      HEAP32[$z$4487 >> 2] = $carry262$0484;
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487 + 4 | 0;
     }
    } else {
     $spec$select396523 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     $z$5 = $z$4487;
    }
    $cond304 = $cmp299 ? $z$0 : $spec$select396523;
    $spec$select397 = ($z$5 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$5;
    $40 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $40;
    if (($40 | 0) >= 0) {
     $a$3$lcssa = $spec$select396523;
     $z$4$lcssa = $spec$select397;
     break;
    } else {
     $a$3488 = $spec$select396523;
     $z$4487 = $spec$select397;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$4$lcssa = $z$2$lcssa;
  }
  if ($a$3$lcssa >>> 0 < $z$4$lcssa >>> 0) {
   $mul322 = ($sub$ptr$rhs$cast345 - $a$3$lcssa >> 2) * 9 | 0;
   $46 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($46 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0480 = $mul322;
    $i$0479 = 10;
    while (1) {
     $i$0479 = $i$0479 * 10 | 0;
     $inc = $e$0480 + 1 | 0;
     if ($46 >>> 0 < $i$0479 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0480 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($spec$select395 | 0) != 0;
  $sub343 = $spec$select395 - (($or | 0) == 102 ? 0 : $e$1) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$4$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $div356 = ($add355 | 0) / 9 | 0;
   $add$ptr358 = $z$0 + 4 + ($div356 + -1024 << 2) | 0;
   $50 = $add355 - ($div356 * 9 | 0) | 0;
   if (($50 | 0) < 8) {
    $i$1475 = 10;
    $j$0$in476 = $50;
    while (1) {
     $mul367 = $i$1475 * 10 | 0;
     if (($j$0$in476 | 0) < 7) {
      $i$1475 = $mul367;
      $j$0$in476 = $j$0$in476 + 1 | 0;
     } else {
      $i$1$lcssa = $mul367;
      break;
     }
    }
   } else $i$1$lcssa = 10;
   $51 = HEAP32[$add$ptr358 >> 2] | 0;
   $div378 = ($51 >>> 0) / ($i$1$lcssa >>> 0) | 0;
   $53 = $51 - (Math_imul($div378, $i$1$lcssa) | 0) | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$4$lcssa | 0);
   if ($cmp374 & ($53 | 0) == 0) {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   } else {
    $spec$select399 = ($div378 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = $i$1$lcssa >>> 1;
    $spec$select418 = $53 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($53 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $spec$select399;
     $small$1 = $spec$select418;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$spec$select399 : $spec$select399;
     $small$1 = $cmp403 ? -$spec$select418 : $spec$select418;
    }
    $sub409 = $51 - $53 | 0;
    HEAP32[$add$ptr358 >> 2] = $sub409;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $sub409 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5471 = $a$3$lcssa;
      $d$2470 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $d$2470 + -4 | 0;
       HEAP32[$d$2470 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5471 >>> 0) {
        $incdec$ptr423 = $a$5471 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5471;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5471 = $a$6;
        $d$2470 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $d$2$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $d$2$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$rhs$cast345 - $a$5$lcssa >> 2) * 9 | 0;
     $56 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($56 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $d$2$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2467 = $mul431;
      $i$2466 = 10;
      while (1) {
       $i$2466 = $i$2466 * 10 | 0;
       $inc438 = $e$2467 + 1 | 0;
       if ($56 >>> 0 < $i$2466 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $d$2$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2467 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9 = $a$8;
   $e$5 = $e$4;
   $z$8 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$4$lcssa;
  } else {
   $a$9 = $a$3$lcssa;
   $e$5 = $e$1;
   $z$8 = $z$4$lcssa;
  }
  $sub626 = 0 - $e$5 | 0;
  L109 : do if ($z$8 >>> 0 > $a$9 >>> 0) {
   $z$9459 = $z$8;
   while (1) {
    $arrayidx453 = $z$9459 + -4 | 0;
    if (HEAP32[$arrayidx453 >> 2] | 0) {
     $cmp450$lcssa = 1;
     $z$9$lcssa = $z$9459;
     break L109;
    }
    if ($arrayidx453 >>> 0 > $a$9 >>> 0) $z$9459 = $arrayidx453; else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $arrayidx453;
     break;
    }
   }
  } else {
   $cmp450$lcssa = 0;
   $z$9$lcssa = $z$8;
  } while (0);
  do if ($cmp338) {
   $spec$select402 = $spec$select395 + (($tobool341 ^ 1) & 1) | 0;
   if (($spec$select402 | 0) > ($e$5 | 0) & ($e$5 | 0) > -5) {
    $p$addr$2 = $spec$select402 + -1 - $e$5 | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $spec$select402 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   if (!($fl & 8)) {
    if ($cmp450$lcssa) {
     $58 = HEAP32[$z$9$lcssa + -4 >> 2] | 0;
     if (!$58) $j$2 = 9; else if (!(($58 >>> 0) % 10 | 0)) {
      $i$3455 = 10;
      $j$1456 = 0;
      while (1) {
       $i$3455 = $i$3455 * 10 | 0;
       $inc500 = $j$1456 + 1 | 0;
       if (($58 >>> 0) % ($i$3455 >>> 0) | 0 | 0) {
        $j$2 = $inc500;
        break;
       } else $j$1456 = $inc500;
      }
     } else $j$2 = 0;
    } else $j$2 = 9;
    $mul513 = (($z$9$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $spec$select403 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select403 | 0) ? $p$addr$2 : $spec$select403;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5 - $j$2 | 0;
     $spec$select405 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select405 | 0) ? $p$addr$2 : $spec$select405;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $p$addr$3 = $spec$select395;
   $t$addr$1 = $t;
  } while (0);
  $tobool609 = ($p$addr$3 | 0) != 0;
  $62 = $tobool609 ? 1 : $fl >>> 3 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5 | 0) > 0 ? $e$5 : 0;
  } else {
   $cond629 = ($e$5 | 0) < 0 ? $sub626 : $e$5;
   $65 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $65 | 0) < 2) {
    $estr$1450 = $65;
    while (1) {
     $incdec$ptr639 = $estr$1450 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1450 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $65;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5 >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $62 + $sub$ptr$sub650$pn | 0;
  _pad_524($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_524($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $spec$select408 = $a$9 >>> 0 > $z$0 >>> 0 ? $z$0 : $a$9;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5438 = $spec$select408;
   do {
    $70 = _fmt_u(HEAP32[$d$5438 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5438 | 0) == ($spec$select408 | 0)) if (($70 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $70; else if ($70 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $70 - $sub$ptr$rhs$cast$le | 0) | 0;
     $s668$0436 = $70;
     while (1) {
      $incdec$ptr681 = $s668$0436 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0436 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $70;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5438 = $d$5438 + 4 | 0;
   } while ($d$5438 >>> 0 <= $z$0 >>> 0);
   if (!(($fl & 8 | 0) == 0 & ($tobool609 ^ 1))) _out($f, 6961, 1);
   if ($d$5438 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6432 = $d$5438;
    $p$addr$4433 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$6432 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($75 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $75 - $sub$ptr$rhs$cast$le | 0) | 0;
      $s715$0428 = $75;
      while (1) {
       $incdec$ptr725 = $s715$0428 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0428 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $75;
     _out($f, $s715$0$lcssa, ($p$addr$4433 | 0) < 9 ? $p$addr$4433 : 9);
     $d$6432 = $d$6432 + 4 | 0;
     $sub735 = $p$addr$4433 + -9 | 0;
     if (!($d$6432 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$4433 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4433 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_524($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $a$9 + 4 | 0;
   if ($a$9 >>> 0 < $spec$select410 >>> 0 & ($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($fl & 8 | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $81 = 0 - $sub$ptr$rhs$cast$le | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7444 = $a$9;
    $p$addr$5445 = $p$addr$3;
    while (1) {
     $83 = _fmt_u(HEAP32[$d$7444 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($83 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $83;
     do if (($d$7444 | 0) == ($a$9 | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5445 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 6961, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $81 | 0) | 0;
      $s753$1440 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1440 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1440 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5445);
     $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
     $d$7444 = $d$7444 + 4 | 0;
     if (!($d$7444 >>> 0 < $spec$select410 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5445 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_524($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_524($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink524 = $add653;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink524 | 0) < ($w | 0) ? $w : $add653$sink524) | 0;
}

function _decfloat($f, $c, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $c = $c | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $58 = 0, $65 = 0, $7 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add265 = 0, $add307$sink$off0 = 0, $add400 = 0, $add412 = 0, $add478 = 0, $and347 = 0, $and352 = 0, $and368 = 0, $and434 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $arrayidx186 = 0, $arrayidx261 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx356 = 0, $arrayidx406 = 0, $arrayidx444 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call496 = 0.0, $call499 = 0.0, $carry$0335 = 0, $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp289 = 0, $cmp292 = 0, $cmp325 = 0, $cmp392 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp480 = 0, $cmp51 = 0, $cmp572 = 0, $cmp67 = 0, $cond17 = 0, $cond254 = 0, $cond34 = 0, $cond93 = 0, $conv476 = 0.0, $div = 0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc66 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0, $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul187341 = 0, $mul477 = 0.0, $or$cond262 = 0, $or$cond266 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0, $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shr414 = 0, $spec$select265 = 0, $spec$select292 = 0, $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub225 = 0, $sub299 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0, $sub479 = 0, $sub564 = 0.0, $tobool95 = 0, $tobool98 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0, $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x = sp;
 $0 = $emin + $bits | 0;
 $sub1 = 0 - $0 | 0;
 $rpos = $f + 4 | 0;
 $shend = $f + 104 | 0;
 $c$addr$0 = $c;
 $gotdig$0 = 0;
 L1 : while (1) {
  switch ($c$addr$0 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$addr$2 = $c$addr$0;
    $gotdig$2 = $gotdig$0;
    $gotrad$0 = 0;
    break L1;
   }
  }
  $1 = HEAP32[$rpos >> 2] | 0;
  if ($1 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $1 + 1;
   $c$addr$0$be = HEAPU8[$1 >> 0] | 0;
  } else $c$addr$0$be = ___shgetc($f) | 0;
  $c$addr$0 = $c$addr$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 7) {
  $4 = HEAP32[$rpos >> 2] | 0;
  if ($4 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $4 + 1;
   $cond17 = HEAPU8[$4 >> 0] | 0;
  } else $cond17 = ___shgetc($f) | 0;
  if (($cond17 | 0) == 48) {
   $7 = 0;
   $8 = 0;
   while (1) {
    $9 = _i64Add($7 | 0, $8 | 0, -1, -1) | 0;
    $10 = getTempRet0() | 0;
    $11 = HEAP32[$rpos >> 2] | 0;
    if ($11 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $11 + 1;
     $cond34 = HEAPU8[$11 >> 0] | 0;
    } else $cond34 = ___shgetc($f) | 0;
    if (($cond34 | 0) == 48) {
     $7 = $9;
     $8 = $10;
    } else {
     $106 = $9;
     $107 = $10;
     $c$addr$2 = $cond34;
     $gotdig$2 = 1;
     $gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$addr$2 = $cond17;
   $gotdig$2 = $gotdig$0;
   $gotrad$0 = 1;
  }
 }
 HEAP32[$x >> 2] = 0;
 $sub37342 = $c$addr$2 + -48 | 0;
 $cmp40344 = ($c$addr$2 | 0) == 46;
 L22 : do if ($cmp40344 | $sub37342 >>> 0 < 10) {
  $arrayidx77 = $x + 496 | 0;
  $108 = $106;
  $109 = $107;
  $15 = 0;
  $16 = 0;
  $c$addr$3352 = $c$addr$2;
  $cmp40354 = $cmp40344;
  $gotdig$3348 = $gotdig$2;
  $gotrad$1349 = $gotrad$0;
  $j$0351 = 0;
  $k$0350 = 0;
  $lnz$0347 = 0;
  $sub37353 = $sub37342;
  L24 : while (1) {
   do if ($cmp40354) if (!$gotrad$1349) {
    $110 = $15;
    $111 = $16;
    $112 = $15;
    $113 = $16;
    $gotdig$4 = $gotdig$3348;
    $gotrad$2 = 1;
    $j$2 = $j$0351;
    $k$2 = $k$0350;
    $lnz$2 = $lnz$0347;
   } else break L24; else {
    $17 = _i64Add($15 | 0, $16 | 0, 1, 0) | 0;
    $18 = getTempRet0() | 0;
    $cmp51 = ($c$addr$3352 | 0) != 48;
    if (($k$0350 | 0) >= 125) {
     if (!$cmp51) {
      $110 = $108;
      $111 = $109;
      $112 = $17;
      $113 = $18;
      $gotdig$4 = $gotdig$3348;
      $gotrad$2 = $gotrad$1349;
      $j$2 = $j$0351;
      $k$2 = $k$0350;
      $lnz$2 = $lnz$0347;
      break;
     }
     HEAP32[$arrayidx77 >> 2] = HEAP32[$arrayidx77 >> 2] | 1;
     $110 = $108;
     $111 = $109;
     $112 = $17;
     $113 = $18;
     $gotdig$4 = $gotdig$3348;
     $gotrad$2 = $gotrad$1349;
     $j$2 = $j$0351;
     $k$2 = $k$0350;
     $lnz$2 = $lnz$0347;
     break;
    }
    $arrayidx64 = $x + ($k$0350 << 2) | 0;
    if (!$j$0351) $storemerge296 = $sub37353; else $storemerge296 = $c$addr$3352 + -48 + ((HEAP32[$arrayidx64 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$arrayidx64 >> 2] = $storemerge296;
    $inc66 = $j$0351 + 1 | 0;
    $cmp67 = ($inc66 | 0) == 9;
    $110 = $108;
    $111 = $109;
    $112 = $17;
    $113 = $18;
    $gotdig$4 = 1;
    $gotrad$2 = $gotrad$1349;
    $j$2 = $cmp67 ? 0 : $inc66;
    $k$2 = $k$0350 + ($cmp67 & 1) | 0;
    $lnz$2 = $cmp51 ? $17 : $lnz$0347;
   } while (0);
   $21 = HEAP32[$rpos >> 2] | 0;
   if ($21 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $21 + 1;
    $cond93 = HEAPU8[$21 >> 0] | 0;
   } else $cond93 = ___shgetc($f) | 0;
   $sub37353 = $cond93 + -48 | 0;
   $cmp40354 = ($cond93 | 0) == 46;
   if (!($cmp40354 | $sub37353 >>> 0 < 10)) {
    $26 = $112;
    $27 = $110;
    $29 = $113;
    $30 = $111;
    $c$addr$3$lcssa = $cond93;
    $gotdig$3$lcssa = $gotdig$4;
    $gotrad$1$lcssa = $gotrad$2;
    $j$0$lcssa = $j$2;
    $k$0$lcssa = $k$2;
    $lnz$0$lcssa = $lnz$2;
    label = 31;
    break L22;
   } else {
    $108 = $110;
    $109 = $111;
    $15 = $112;
    $16 = $113;
    $c$addr$3352 = $cond93;
    $gotdig$3348 = $gotdig$4;
    $gotrad$1349 = $gotrad$2;
    $j$0351 = $j$2;
    $k$0350 = $k$2;
    $lnz$0347 = $lnz$2;
   }
  }
  $114 = $15;
  $115 = $16;
  $116 = $108;
  $117 = $109;
  $j$0302 = $j$0351;
  $k$0306 = $k$0350;
  $lnz$0312 = $lnz$0347;
  $tobool98275277 = ($gotdig$3348 | 0) != 0;
  label = 39;
 } else {
  $26 = 0;
  $27 = $106;
  $29 = 0;
  $30 = $107;
  $c$addr$3$lcssa = $c$addr$2;
  $gotdig$3$lcssa = $gotdig$2;
  $gotrad$1$lcssa = $gotrad$0;
  $j$0$lcssa = 0;
  $k$0$lcssa = 0;
  $lnz$0$lcssa = 0;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $tobool95 = ($gotrad$1$lcssa | 0) == 0;
  $25 = $tobool95 ? $26 : $27;
  $28 = $tobool95 ? $29 : $30;
  $tobool98 = ($gotdig$3$lcssa | 0) != 0;
  if (!($tobool98 & ($c$addr$3$lcssa | 32 | 0) == 101)) if (($c$addr$3$lcssa | 0) > -1) {
   $114 = $26;
   $115 = $29;
   $116 = $25;
   $117 = $28;
   $j$0302 = $j$0$lcssa;
   $k$0306 = $k$0$lcssa;
   $lnz$0312 = $lnz$0$lcssa;
   $tobool98275277 = $tobool98;
   label = 39;
   break;
  } else {
   $118 = $26;
   $119 = $29;
   $120 = $25;
   $121 = $28;
   $j$0301 = $j$0$lcssa;
   $k$0305 = $k$0$lcssa;
   $lnz$0311 = $lnz$0$lcssa;
   $tobool98274 = $tobool98;
   label = 41;
   break;
  }
  $31 = _scanexp($f, $pok) | 0;
  $32 = getTempRet0() | 0;
  if (($31 | 0) == 0 & ($32 | 0) == -2147483648) {
   if (!$pok) {
    ___shlim($f, 0, 0);
    $retval$1 = 0.0;
    break;
   }
   if (!(HEAP32[$shend >> 2] | 0)) {
    $38 = 0;
    $39 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $38 = 0;
    $39 = 0;
   }
  } else {
   $38 = $31;
   $39 = $32;
  }
  $40 = _i64Add($38 | 0, $39 | 0, $25 | 0, $28 | 0) | 0;
  $46 = $40;
  $47 = $26;
  $49 = getTempRet0() | 0;
  $50 = $29;
  $j$0300 = $j$0$lcssa;
  $k$0304 = $k$0$lcssa;
  $lnz$0310 = $lnz$0$lcssa;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (!(HEAP32[$shend >> 2] | 0)) {
  $118 = $114;
  $119 = $115;
  $120 = $116;
  $121 = $117;
  $j$0301 = $j$0302;
  $k$0305 = $k$0306;
  $lnz$0311 = $lnz$0312;
  $tobool98274 = $tobool98275277;
  label = 41;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if ($tobool98275277) {
   $46 = $116;
   $47 = $114;
   $49 = $117;
   $50 = $115;
   $j$0300 = $j$0302;
   $k$0304 = $k$0306;
   $lnz$0310 = $lnz$0312;
   label = 43;
  } else label = 42;
 }
 if ((label | 0) == 41) if ($tobool98274) {
  $46 = $120;
  $47 = $118;
  $49 = $121;
  $50 = $119;
  $j$0300 = $j$0301;
  $k$0304 = $k$0305;
  $lnz$0310 = $lnz$0311;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim($f, 0, 0);
  $retval$1 = 0.0;
 } else if ((label | 0) == 43) {
  $44 = HEAP32[$x >> 2] | 0;
  if (!$44) {
   $retval$1 = +($sign | 0) * 0.0;
   break;
  }
  if ((($50 | 0) < 0 | ($50 | 0) == 0 & $47 >>> 0 < 10) & (($46 | 0) == ($47 | 0) & ($49 | 0) == ($50 | 0))) if (($bits | 0) > 30 | ($44 >>> $bits | 0) == 0) {
   $retval$1 = +($sign | 0) * +($44 >>> 0);
   break;
  }
  $div = ($emin | 0) / -2 | 0;
  $58 = (($div | 0) < 0) << 31 >> 31;
  if (($49 | 0) > ($58 | 0) | ($49 | 0) == ($58 | 0) & $46 >>> 0 > $div >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $retval$1 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub170 = $emin + -106 | 0;
  $65 = (($sub170 | 0) < 0) << 31 >> 31;
  if (($49 | 0) < ($65 | 0) | ($49 | 0) == ($65 | 0) & $46 >>> 0 < $sub170 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $retval$1 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$j$0300) $k$3 = $k$0304; else {
   if (($j$0300 | 0) < 9) {
    $arrayidx186 = $x + ($k$0304 << 2) | 0;
    $j$3340 = $j$0300;
    $mul187341 = HEAP32[$arrayidx186 >> 2] | 0;
    while (1) {
     $mul187341 = $mul187341 * 10 | 0;
     if (($j$3340 | 0) >= 8) break; else $j$3340 = $j$3340 + 1 | 0;
    }
    HEAP32[$arrayidx186 >> 2] = $mul187341;
   }
   $k$3 = $k$0304 + 1 | 0;
  }
  if (($lnz$0310 | 0) < 9) if (($lnz$0310 | 0) <= ($46 | 0) & ($46 | 0) < 18) {
   if (($46 | 0) == 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0);
    break;
   }
   if (($46 | 0) < 9) {
    $retval$1 = +($sign | 0) * +((HEAP32[$x >> 2] | 0) >>> 0) / +(HEAP32[2400 + (8 - $46 << 2) >> 2] | 0);
    break;
   }
   $sub225 = $bits + 27 + (Math_imul($46, -3) | 0) | 0;
   $$pre = HEAP32[$x >> 2] | 0;
   if (($sub225 | 0) > 30 | ($$pre >>> $sub225 | 0) == 0) {
    $retval$1 = +($sign | 0) * +($$pre >>> 0) * +(HEAP32[2400 + ($46 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $rem = ($46 | 0) % 9 | 0;
  if (!$rem) {
   $a$3$ph = 0;
   $rp$3$ph = $46;
   $z$2$ph = $k$3;
  } else {
   $cond254 = ($46 | 0) > -1 ? $rem : $rem + 9 | 0;
   $75 = HEAP32[2400 + (8 - $cond254 << 2) >> 2] | 0;
   if (!$k$3) {
    $a$0$lcssa379 = 0;
    $rp$0$lcssa378 = $46;
    $z$0 = 0;
   } else {
    $div267 = 1e9 / ($75 | 0) | 0;
    $a$0333 = 0;
    $carry$0335 = 0;
    $k$4334 = 0;
    $rp$0332 = $46;
    do {
     $arrayidx261 = $x + ($k$4334 << 2) | 0;
     $76 = HEAP32[$arrayidx261 >> 2] | 0;
     $div264 = ($76 >>> 0) / ($75 >>> 0) | 0;
     $78 = $76 - (Math_imul($div264, $75) | 0) | 0;
     $add265 = $div264 + $carry$0335 | 0;
     HEAP32[$arrayidx261 >> 2] = $add265;
     $carry$0335 = Math_imul($div267, $78) | 0;
     $or$cond262 = ($k$4334 | 0) == ($a$0333 | 0) & ($add265 | 0) == 0;
     $rp$0332 = $or$cond262 ? $rp$0332 + -9 | 0 : $rp$0332;
     $a$0333 = $or$cond262 ? $a$0333 + 1 & 127 : $a$0333;
     $k$4334 = $k$4334 + 1 | 0;
    } while (($k$4334 | 0) != ($k$3 | 0));
    if (!$carry$0335) {
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3;
    } else {
     HEAP32[$x + ($k$3 << 2) >> 2] = $carry$0335;
     $a$0$lcssa379 = $a$0333;
     $rp$0$lcssa378 = $rp$0332;
     $z$0 = $k$3 + 1 | 0;
    }
   }
   $a$3$ph = $a$0$lcssa379;
   $rp$3$ph = 9 - $cond254 + $rp$0$lcssa378 | 0;
   $z$2$ph = $z$0;
  }
  $a$3$ph406 = $a$3$ph;
  $e2$0$ph = 0;
  $rp$3$ph404 = $rp$3$ph;
  $z$2$ph405 = $z$2$ph;
  L104 : while (1) {
   $cmp289 = ($rp$3$ph404 | 0) < 18;
   $cmp292 = ($rp$3$ph404 | 0) == 18;
   $arrayidx294 = $x + ($a$3$ph406 << 2) | 0;
   $e2$0 = $e2$0$ph;
   $z$2 = $z$2$ph405;
   while (1) {
    if (!$cmp289) {
     if (!$cmp292) {
      $rp$5$ph = $rp$3$ph404;
      break L104;
     }
     if ((HEAP32[$arrayidx294 >> 2] | 0) >>> 0 >= 9007199) {
      $rp$5$ph = 18;
      break L104;
     }
    }
    $carry298$0 = 0;
    $k$5$in = $z$2 + 127 | 0;
    $z$3 = $z$2;
    while (1) {
     $k$5 = $k$5$in & 127;
     $arrayidx304 = $x + ($k$5 << 2) | 0;
     $81 = _bitshift64Shl(HEAP32[$arrayidx304 >> 2] | 0, 0, 29) | 0;
     $83 = _i64Add($81 | 0, getTempRet0() | 0, $carry298$0 | 0, 0) | 0;
     $84 = getTempRet0() | 0;
     if ($84 >>> 0 > 0 | ($84 | 0) == 0 & $83 >>> 0 > 1e9) {
      $90 = ___udivdi3($83 | 0, $84 | 0, 1e9, 0) | 0;
      $92 = ___muldi3($90 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $94 = _i64Subtract($83 | 0, $84 | 0, $92 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      $add307$sink$off0 = $94;
      $carry298$1 = $90;
     } else {
      $add307$sink$off0 = $83;
      $carry298$1 = 0;
     }
     HEAP32[$arrayidx304 >> 2] = $add307$sink$off0;
     $cmp325 = ($k$5 | 0) == ($a$3$ph406 | 0);
     $spec$select292 = ($k$5 | 0) != ($z$3 + 127 & 127 | 0) | $cmp325 ? $z$3 : ($add307$sink$off0 | 0) == 0 ? $k$5 : $z$3;
     if ($cmp325) break; else {
      $carry298$0 = $carry298$1;
      $k$5$in = $k$5 + -1 | 0;
      $z$3 = $spec$select292;
     }
    }
    $sub299 = $e2$0 + -29 | 0;
    if (!$carry298$1) {
     $e2$0 = $sub299;
     $z$2 = $z$3;
    } else break;
   }
   $and347 = $a$3$ph406 + 127 & 127;
   $and352 = $spec$select292 + 127 & 127;
   $arrayidx356 = $x + (($spec$select292 + 126 & 127) << 2) | 0;
   if (($and347 | 0) == ($spec$select292 | 0)) {
    HEAP32[$arrayidx356 >> 2] = HEAP32[$arrayidx356 >> 2] | HEAP32[$x + ($and352 << 2) >> 2];
    $z$5 = $and352;
   } else $z$5 = $z$3;
   HEAP32[$x + ($and347 << 2) >> 2] = $carry298$1;
   $a$3$ph406 = $and347;
   $e2$0$ph = $sub299;
   $rp$3$ph404 = $rp$3$ph404 + 9 | 0;
   $z$2$ph405 = $z$5;
  }
  $a$5$ph$ph = $a$3$ph406;
  $e2$1$ph$ph = $e2$0;
  $rp$5$ph403$ph = $rp$5$ph;
  $z$7$ph$ph = $z$2;
  L123 : while (1) {
   $and434 = $z$7$ph$ph + 1 & 127;
   $arrayidx444 = $x + (($z$7$ph$ph + 127 & 127) << 2) | 0;
   $a$5$ph = $a$5$ph$ph;
   $e2$1$ph = $e2$1$ph$ph;
   $rp$5$ph403 = $rp$5$ph403$ph;
   while (1) {
    $cmp392 = ($rp$5$ph403 | 0) == 18;
    $spec$select265 = ($rp$5$ph403 | 0) > 27 ? 9 : 1;
    $a$5 = $a$5$ph;
    $e2$1 = $e2$1$ph;
    while (1) {
     $i$0323 = 0;
     while (1) {
      $and368 = $i$0323 + $a$5 & 127;
      if (($and368 | 0) == ($z$7$ph$ph | 0)) {
       label = 92;
       break;
      }
      $98 = HEAP32[$x + ($and368 << 2) >> 2] | 0;
      $99 = HEAP32[3612 + ($i$0323 << 2) >> 2] | 0;
      if ($98 >>> 0 < $99 >>> 0) {
       label = 92;
       break;
      }
      if ($98 >>> 0 > $99 >>> 0) break;
      if (($i$0323 + 1 | 0) >>> 0 < 2) $i$0323 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92) {
      label = 0;
      if ($cmp392) break L123;
     }
     $add400 = $spec$select265 + $e2$1 | 0;
     if (($a$5 | 0) == ($z$7$ph$ph | 0)) {
      $a$5 = $z$7$ph$ph;
      $e2$1 = $add400;
     } else break;
    }
    $sub408 = (1 << $spec$select265) + -1 | 0;
    $shr414 = 1e9 >>> $spec$select265;
    $a$6326 = $a$5;
    $carry362$0328 = 0;
    $k$6327 = $a$5;
    $rp$6325 = $rp$5$ph403;
    do {
     $arrayidx406 = $x + ($k$6327 << 2) | 0;
     $100 = HEAP32[$arrayidx406 >> 2] | 0;
     $add412 = ($100 >>> $spec$select265) + $carry362$0328 | 0;
     HEAP32[$arrayidx406 >> 2] = $add412;
     $carry362$0328 = Math_imul($100 & $sub408, $shr414) | 0;
     $or$cond266 = ($k$6327 | 0) == ($a$6326 | 0) & ($add412 | 0) == 0;
     $rp$6325 = $or$cond266 ? $rp$6325 + -9 | 0 : $rp$6325;
     $a$6326 = $or$cond266 ? $a$6326 + 1 & 127 : $a$6326;
     $k$6327 = $k$6327 + 1 & 127;
    } while (($k$6327 | 0) != ($z$7$ph$ph | 0));
    if ($carry362$0328 | 0) {
     if (($and434 | 0) != ($a$6326 | 0)) break;
     HEAP32[$arrayidx444 >> 2] = HEAP32[$arrayidx444 >> 2] | 1;
    }
    $a$5$ph = $a$6326;
    $e2$1$ph = $add400;
    $rp$5$ph403 = $rp$6325;
   }
   HEAP32[$x + ($z$7$ph$ph << 2) >> 2] = $carry362$0328;
   $a$5$ph$ph = $a$6326;
   $e2$1$ph$ph = $add400;
   $rp$5$ph403$ph = $rp$6325;
   $z$7$ph$ph = $and434;
  }
  $i$4322 = 0;
  $y$0321 = 0.0;
  $z$10320 = $z$7$ph$ph;
  while (1) {
   $and458 = $i$4322 + $a$5 & 127;
   $and463 = $z$10320 + 1 & 127;
   if (($and458 | 0) == ($z$10320 | 0)) {
    HEAP32[$x + ($and463 + -1 << 2) >> 2] = 0;
    $z$11 = $and463;
   } else $z$11 = $z$10320;
   $y$0321 = $y$0321 * 1.0e9 + +((HEAP32[$x + ($and458 << 2) >> 2] | 0) >>> 0);
   $i$4322 = $i$4322 + 1 | 0;
   if (($i$4322 | 0) == 2) break; else $z$10320 = $z$11;
  }
  $conv476 = +($sign | 0);
  $mul477 = $y$0321 * $conv476;
  $add478 = $e2$1 + 53 | 0;
  $sub479 = $add478 - $emin | 0;
  $cmp480 = ($sub479 | 0) < ($bits | 0);
  $bits$addr$0 = $cmp480 ? (($sub479 | 0) > 0 ? $sub479 : 0) : $bits;
  if (($bits$addr$0 | 0) < 53) {
   $call496 = +_copysignl(+_scalbn(1.0, 105 - $bits$addr$0 | 0), $mul477);
   $call499 = +_fmodl($mul477, +_scalbn(1.0, 53 - $bits$addr$0 | 0));
   $bias$0 = $call496;
   $frac$0 = $call499;
   $y$1 = $call496 + ($mul477 - $call499);
  } else {
   $bias$0 = 0.0;
   $frac$0 = 0.0;
   $y$1 = $mul477;
  }
  $and504 = $a$5 + 2 & 127;
  if (($and504 | 0) == ($z$11 | 0)) $frac$3 = $frac$0; else {
   $104 = HEAP32[$x + ($and504 << 2) >> 2] | 0;
   do if ($104 >>> 0 < 5e8) {
    if (!$104) if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $frac$0;
     break;
    }
    $frac$1 = $conv476 * .25 + $frac$0;
   } else {
    if (($104 | 0) != 5e8) {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
    if (($a$5 + 3 & 127 | 0) == ($z$11 | 0)) {
     $frac$1 = $conv476 * .5 + $frac$0;
     break;
    } else {
     $frac$1 = $conv476 * .75 + $frac$0;
     break;
    }
   } while (0);
   if ((53 - $bits$addr$0 | 0) > 1) if (+_fmodl($frac$1, 1.0) != 0.0) $frac$3 = $frac$1; else $frac$3 = $frac$1 + 1.0; else $frac$3 = $frac$1;
  }
  $sub564 = $y$1 + $frac$3 - $bias$0;
  do if (($add478 & 2147483647 | 0) > (-2 - $0 | 0)) {
   $cmp572 = !(+Math_abs(+$sub564) >= 9007199254740992.0);
   $e2$3 = $e2$1 + (($cmp572 ^ 1) & 1) | 0;
   $y$2 = $cmp572 ? $sub564 : $sub564 * .5;
   if (($e2$3 + 50 | 0) <= ($sub1 | 0)) if (!($frac$3 != 0.0 & ($cmp480 & (($bits$addr$0 | 0) != ($sub479 | 0) | $cmp572)))) {
    $e2$4 = $e2$3;
    $y$3 = $y$2;
    break;
   }
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $e2$4 = $e2$3;
   $y$3 = $y$2;
  } else {
   $e2$4 = $e2$1;
   $y$3 = $sub564;
  } while (0);
  $retval$1 = +_scalbnl($y$3, $e2$4);
 } while (0);
 STACKTOP = sp;
 return +$retval$1;
}

function _SDL_FillRect($dst, $rect, $color) {
 $dst = $dst | 0;
 $rect = $rect | 0;
 $color = $color | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $9 = 0, $_n$0$i$us$i = 0, $_n$0$i$us$i66 = 0, $_n$0$i$us13$i = 0, $_n$1$i$us$i = 0, $_n$1$i$us$i70 = 0, $_n$2$i$us$i = 0, $_n$2$i$us$i74 = 0, $_n$3$i$us$i = 0, $_n$3$i$us$i78 = 0, $_p$0$i$us$i = 0, $_p$0$i$us$i65 = 0, $_p$0$i$us12$i = 0, $_p$1$i$us$i = 0, $_p$1$i$us$i69 = 0, $_p$1$i$us43$i156 = 0, $_p$2$i$i236 = 0, $_p$2$i$us$i = 0, $_p$2$i$us$i73 = 0, $_p$3$i$i$us240 = 0, $_p$3$i$us$i = 0, $_p$3$i$us$i77 = 0, $add$ptr = 0, $add$ptr$i89$us105 = 0, $add$ptr$i89$us121 = 0, $add$ptr$us$i84 = 0, $add$ptr26 = 0, $and13$i = 0, $clip_rect11 = 0, $clipped = 0, $conv$i = 0, $conv$i44 = 0, $conv$i53 = 0, $conv2$i = 0, $conv5$i = 0, $dec$i$i$us238 = 0, $dec$i$i$us241 = 0, $dec$i$i234 = 0, $dec$i$i237 = 0, $dec$i$us$i = 0, $dec$i$us$i80 = 0, $dec$i$us54$i154 = 0, $dec$i$us54$i157 = 0, $dec1$i = 0, $dec14$i42 = 0, $dec14$in$i = 0, $dec17$i = 0, $dec17$us$i = 0, $dec27$i = 0, $dec3$i = 0, $dec30$i$us102 = 0, $dec30$i$us118 = 0, $dec30$i$us135 = 0, $dec30$us$i = 0, $dec5$us$pre$phi$iZZ2D = 0, $dec9$us$pre$phi$iZZ2D = 0, $div$i$i = 0, $div$i$us$i = 0, $div$i$us$i60 = 0, $format = 0, $h$addr$04$i = 0, $h$addr$04$i$us = 0, $h$addr$04$us33$i = 0, $h$addr$04$us33$i$us = 0, $h$addr$04$us6$i = 0, $incdec$ptr$us$i = 0, $incdec$ptr17$i$us107 = 0, $n$0$us$i = 0, $n$09$i = 0, $n$2$us$i = 0, $or = 0, $or31 = 0, $or35 = 0, $p$0$us$i = 0, $p$0$us$i58 = 0, $p$010$i = 0, $p$1$us$i = 0, $p$2$us$i = 0, $p$4$us$i = 0, $p$5$us$i = 0, $pixels$addr$013$i = 0, $pixels$addr$016$i = 0, $pixels$addr$016$us$i = 0, $pixels$addr$029$i$us103 = 0, $pixels$addr$029$i$us119 = 0, $pixels$addr$029$i$us136 = 0, $pixels$addr$029$us$i = 0, $pixels$addr$03$i = 0, $pixels$addr$03$i$us = 0, $pixels$addr$03$us34$i = 0, $pixels$addr$03$us34$i$us = 0, $pixels$addr$03$us7$i = 0, $rect$addr$0 = 0, $retval$0 = 0, $shr13$us$i = 0, $shr26$us$i = 0, $tobool$i$i$us239 = 0, $tobool$i$i235 = 0, $vararg_buffer3 = 0, label = 0, sp = 0, $_p$1$i$us43$i156$looptemp = 0, $_p$2$i$i236$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $clipped = sp + 24 | 0;
 if (!$dst) {
  $retval$0 = _SDL_SetError(4647, sp) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $format = $dst + 4 | 0;
 if ((HEAPU8[(HEAP32[$format >> 2] | 0) + 8 >> 0] | 0) < 8) {
  $retval$0 = _SDL_SetError(4679, sp + 8 | 0) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $clip_rect11 = $dst + 36 | 0;
 if (!$rect) {
  if ((HEAP32[$dst + 44 >> 2] | 0) < 1) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  if ((HEAP32[$dst + 48 >> 2] | 0) > 0) $rect$addr$0 = $clip_rect11; else {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 } else if (!(_SDL_IntersectRect($rect, $clip_rect11, $clipped) | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else $rect$addr$0 = $clipped;
 $4 = HEAP32[$dst + 20 >> 2] | 0;
 if (!$4) {
  $retval$0 = _SDL_SetError(4722, $vararg_buffer3) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $6 = HEAP32[$dst + 16 >> 2] | 0;
 $add$ptr = $4 + (Math_imul($6, HEAP32[$rect$addr$0 + 4 >> 2] | 0) | 0) | 0;
 $9 = HEAP8[(HEAP32[$format >> 2] | 0) + 9 >> 0] | 0;
 $add$ptr26 = $add$ptr + (Math_imul(HEAP32[$rect$addr$0 >> 2] | 0, $9 & 255) | 0) | 0;
 switch ($9 << 24 >> 24) {
 case 1:
  {
   $or = $color << 8 | $color;
   $or31 = $or << 16 | $or;
   $10 = HEAP32[$rect$addr$0 + 8 >> 2] | 0;
   $11 = HEAP32[$rect$addr$0 + 12 >> 2] | 0;
   $dec27$i = $11 + -1 | 0;
   if (!$11) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $conv$i53 = $color & 255;
   $dec1$i = $10 + -1 | 0;
   if (($10 | 0) <= 3) {
    $and13$i = $10 & -4;
    if (!($10 & 3)) {
     $retval$0 = 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
    switch ($10 & 3) {
    case 3:
     {
      $dec30$i$us102 = $dec27$i;
      $pixels$addr$029$i$us103 = $add$ptr26;
      while (1) {
       $add$ptr$i89$us105 = $pixels$addr$029$i$us103 + $and13$i | 0;
       $incdec$ptr17$i$us107 = $add$ptr$i89$us105 + 1 | 0;
       HEAP8[$add$ptr$i89$us105 >> 0] = $conv$i53;
       HEAP8[$incdec$ptr17$i$us107 >> 0] = $conv$i53;
       HEAP8[$incdec$ptr17$i$us107 + 1 >> 0] = $conv$i53;
       if (!$dec30$i$us102) {
        $retval$0 = 0;
        break;
       } else {
        $dec30$i$us102 = $dec30$i$us102 + -1 | 0;
        $pixels$addr$029$i$us103 = $pixels$addr$029$i$us103 + $6 | 0;
       }
      }
      STACKTOP = sp;
      return $retval$0 | 0;
     }
    case 2:
     {
      $dec30$i$us118 = $dec27$i;
      $pixels$addr$029$i$us119 = $add$ptr26;
      while (1) {
       $add$ptr$i89$us121 = $pixels$addr$029$i$us119 + $and13$i | 0;
       HEAP8[$add$ptr$i89$us121 >> 0] = $conv$i53;
       HEAP8[$add$ptr$i89$us121 + 1 >> 0] = $conv$i53;
       if (!$dec30$i$us118) {
        $retval$0 = 0;
        break;
       } else {
        $dec30$i$us118 = $dec30$i$us118 + -1 | 0;
        $pixels$addr$029$i$us119 = $pixels$addr$029$i$us119 + $6 | 0;
       }
      }
      STACKTOP = sp;
      return $retval$0 | 0;
     }
    case 1:
     {
      $dec30$i$us135 = $dec27$i;
      $pixels$addr$029$i$us136 = $add$ptr26;
      while (1) {
       HEAP8[$pixels$addr$029$i$us136 + $and13$i >> 0] = $conv$i53;
       if (!$dec30$i$us135) {
        $retval$0 = 0;
        break;
       } else {
        $dec30$i$us135 = $dec30$i$us135 + -1 | 0;
        $pixels$addr$029$i$us136 = $pixels$addr$029$i$us136 + $6 | 0;
       }
      }
      STACKTOP = sp;
      return $retval$0 | 0;
     }
    default:
     {
      $retval$0 = 0;
      STACKTOP = sp;
      return $retval$0 | 0;
     }
    }
   }
   $$pre$i = $10 + -2 | 0;
   $dec30$us$i = $dec27$i;
   $pixels$addr$029$us$i = $add$ptr26;
   L47 : while (1) {
    switch ($pixels$addr$029$us$i & 3) {
    case 1:
     {
      HEAP8[$pixels$addr$029$us$i >> 0] = $conv$i53;
      $dec5$us$pre$phi$iZZ2D = $$pre$i;
      $p$0$us$i58 = $pixels$addr$029$us$i + 1 | 0;
      label = 17;
      break;
     }
    case 2:
     {
      $dec5$us$pre$phi$iZZ2D = $dec1$i;
      $p$0$us$i58 = $pixels$addr$029$us$i;
      label = 17;
      break;
     }
    case 3:
     {
      $dec9$us$pre$phi$iZZ2D = $dec1$i;
      $p$1$us$i = $pixels$addr$029$us$i;
      label = 18;
      break;
     }
    default:
     {
      $n$2$us$i = $10;
      $p$2$us$i = $pixels$addr$029$us$i;
     }
    }
    if ((label | 0) == 17) {
     label = 0;
     HEAP8[$p$0$us$i58 >> 0] = $conv$i53;
     $dec9$us$pre$phi$iZZ2D = $dec5$us$pre$phi$iZZ2D + -1 | 0;
     $p$1$us$i = $p$0$us$i58 + 1 | 0;
     label = 18;
    }
    if ((label | 0) == 18) {
     label = 0;
     HEAP8[$p$1$us$i >> 0] = $conv$i53;
     $n$2$us$i = $dec9$us$pre$phi$iZZ2D;
     $p$2$us$i = $p$1$us$i + 1 | 0;
    }
    $shr26$us$i = $n$2$us$i >>> 2;
    $div$i$us$i60 = ($shr26$us$i + 3 | 0) >>> 2;
    if ($shr26$us$i | 0) {
     switch ($shr26$us$i & 3) {
     case 0:
      {
       $_n$0$i$us$i66 = $div$i$us$i60;
       $_p$0$i$us$i65 = $p$2$us$i;
       label = 21;
       break;
      }
     case 3:
      {
       $_n$1$i$us$i70 = $div$i$us$i60;
       $_p$1$i$us$i69 = $p$2$us$i;
       label = 22;
       break;
      }
     case 2:
      {
       $_n$2$i$us$i74 = $div$i$us$i60;
       $_p$2$i$us$i73 = $p$2$us$i;
       label = 23;
       break;
      }
     case 1:
      {
       $_n$3$i$us$i78 = $div$i$us$i60;
       $_p$3$i$us$i77 = $p$2$us$i;
       label = 24;
       break;
      }
     default:
      {
       label = 31;
       break L47;
      }
     }
     while (1) if ((label | 0) == 21) {
      label = 0;
      HEAP32[$_p$0$i$us$i65 >> 2] = $or31;
      $_n$1$i$us$i70 = $_n$0$i$us$i66;
      $_p$1$i$us$i69 = $_p$0$i$us$i65 + 4 | 0;
      label = 22;
      continue;
     } else if ((label | 0) == 22) {
      label = 0;
      HEAP32[$_p$1$i$us$i69 >> 2] = $or31;
      $_n$2$i$us$i74 = $_n$1$i$us$i70;
      $_p$2$i$us$i73 = $_p$1$i$us$i69 + 4 | 0;
      label = 23;
      continue;
     } else if ((label | 0) == 23) {
      label = 0;
      HEAP32[$_p$2$i$us$i73 >> 2] = $or31;
      $_n$3$i$us$i78 = $_n$2$i$us$i74;
      $_p$3$i$us$i77 = $_p$2$i$us$i73 + 4 | 0;
      label = 24;
      continue;
     } else if ((label | 0) == 24) {
      label = 0;
      HEAP32[$_p$3$i$us$i77 >> 2] = $or31;
      $dec$i$us$i80 = $_n$3$i$us$i78 + -1 | 0;
      if (!$dec$i$us$i80) break; else {
       $_n$0$i$us$i66 = $dec$i$us$i80;
       $_p$0$i$us$i65 = $_p$3$i$us$i77 + 4 | 0;
       label = 21;
       continue;
      }
     }
    }
    L65 : do if ($n$2$us$i & 3 | 0) {
     $add$ptr$us$i84 = $p$2$us$i + ($n$2$us$i & -4) | 0;
     switch ($n$2$us$i & 3) {
     case 3:
      {
       HEAP8[$add$ptr$us$i84 >> 0] = $conv$i53;
       $p$4$us$i = $add$ptr$us$i84 + 1 | 0;
       label = 28;
       break;
      }
     case 2:
      {
       $p$4$us$i = $add$ptr$us$i84;
       label = 28;
       break;
      }
     case 1:
      {
       $p$5$us$i = $add$ptr$us$i84;
       break;
      }
     default:
      break L65;
     }
     if ((label | 0) == 28) {
      label = 0;
      HEAP8[$p$4$us$i >> 0] = $conv$i53;
      $p$5$us$i = $p$4$us$i + 1 | 0;
     }
     HEAP8[$p$5$us$i >> 0] = $conv$i53;
    } while (0);
    if (!$dec30$us$i) {
     $retval$0 = 0;
     label = 87;
     break;
    } else {
     $dec30$us$i = $dec30$us$i + -1 | 0;
     $pixels$addr$029$us$i = $pixels$addr$029$us$i + $6 | 0;
    }
   }
   if ((label | 0) == 31) {} else if ((label | 0) == 87) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 2:
  {
   $or35 = $color << 16 | $color;
   $13 = HEAP32[$rect$addr$0 + 8 >> 2] | 0;
   $14 = HEAP32[$rect$addr$0 + 12 >> 2] | 0;
   $dec14$i42 = $14 + -1 | 0;
   if (!$14) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $dec3$i = $13 + -1 | 0;
   $conv$i44 = $color & 65535;
   if (($13 | 0) <= 1) {
    if (!($13 & 1)) {
     $retval$0 = 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
    $dec17$i = $dec14$i42;
    $pixels$addr$016$i = $add$ptr26;
    while (1) {
     HEAP16[$pixels$addr$016$i + ($dec3$i << 1) >> 1] = $conv$i44;
     if (!$dec17$i) {
      $retval$0 = 0;
      break;
     } else {
      $dec17$i = $dec17$i + -1 | 0;
      $pixels$addr$016$i = $pixels$addr$016$i + $6 | 0;
     }
    }
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $dec17$us$i = $dec14$i42;
   $pixels$addr$016$us$i = $add$ptr26;
   L89 : while (1) {
    $incdec$ptr$us$i = $pixels$addr$016$us$i + 2 | 0;
    if (!($pixels$addr$016$us$i & 2)) {
     $20 = $pixels$addr$016$us$i;
     $n$0$us$i = $13;
     $p$0$us$i = $pixels$addr$016$us$i;
    } else {
     HEAP16[$pixels$addr$016$us$i >> 1] = $conv$i44;
     $20 = $incdec$ptr$us$i;
     $n$0$us$i = $dec3$i;
     $p$0$us$i = $incdec$ptr$us$i;
    }
    $shr13$us$i = $n$0$us$i >>> 1;
    $div$i$us$i = ($shr13$us$i + 3 | 0) >>> 2;
    if ($shr13$us$i | 0) {
     switch ($shr13$us$i & 3) {
     case 0:
      {
       $_n$0$i$us$i = $div$i$us$i;
       $_p$0$i$us$i = $20;
       label = 47;
       break;
      }
     case 3:
      {
       $_n$1$i$us$i = $div$i$us$i;
       $_p$1$i$us$i = $20;
       label = 48;
       break;
      }
     case 2:
      {
       $_n$2$i$us$i = $div$i$us$i;
       $_p$2$i$us$i = $20;
       label = 49;
       break;
      }
     case 1:
      {
       $_n$3$i$us$i = $div$i$us$i;
       $_p$3$i$us$i = $20;
       label = 50;
       break;
      }
     default:
      {
       label = 54;
       break L89;
      }
     }
     while (1) if ((label | 0) == 47) {
      label = 0;
      HEAP32[$_p$0$i$us$i >> 2] = $or35;
      $_n$1$i$us$i = $_n$0$i$us$i;
      $_p$1$i$us$i = $_p$0$i$us$i + 4 | 0;
      label = 48;
      continue;
     } else if ((label | 0) == 48) {
      label = 0;
      HEAP32[$_p$1$i$us$i >> 2] = $or35;
      $_n$2$i$us$i = $_n$1$i$us$i;
      $_p$2$i$us$i = $_p$1$i$us$i + 4 | 0;
      label = 49;
      continue;
     } else if ((label | 0) == 49) {
      label = 0;
      HEAP32[$_p$2$i$us$i >> 2] = $or35;
      $_n$3$i$us$i = $_n$2$i$us$i;
      $_p$3$i$us$i = $_p$2$i$us$i + 4 | 0;
      label = 50;
      continue;
     } else if ((label | 0) == 50) {
      label = 0;
      HEAP32[$_p$3$i$us$i >> 2] = $or35;
      $dec$i$us$i = $_n$3$i$us$i + -1 | 0;
      if (!$dec$i$us$i) break; else {
       $_n$0$i$us$i = $dec$i$us$i;
       $_p$0$i$us$i = $_p$3$i$us$i + 4 | 0;
       label = 47;
       continue;
      }
     }
    }
    if ($n$0$us$i & 1 | 0) HEAP16[$p$0$us$i + ($n$0$us$i + -1 << 1) >> 1] = $conv$i44;
    if (!$dec17$us$i) {
     $retval$0 = 0;
     label = 87;
     break;
    } else {
     $dec17$us$i = $dec17$us$i + -1 | 0;
     $pixels$addr$016$us$i = $pixels$addr$016$us$i + $6 | 0;
    }
   }
   if ((label | 0) == 54) {} else if ((label | 0) == 87) {
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 3:
  {
   $16 = HEAP32[$rect$addr$0 + 8 >> 2] | 0;
   $17 = HEAP32[$rect$addr$0 + 12 >> 2] | 0;
   $conv$i = $color & 255;
   $conv2$i = $color >>> 8 & 255;
   $conv5$i = $color >>> 16 & 255;
   if (($16 | 0) == 0 | ($17 | 0) == 0) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $dec14$in$i = $17;
   $pixels$addr$013$i = $add$ptr26;
   while (1) {
    $n$09$i = $16;
    $p$010$i = $pixels$addr$013$i;
    while (1) {
     $n$09$i = $n$09$i + -1 | 0;
     HEAP8[$p$010$i >> 0] = $conv$i;
     HEAP8[$p$010$i + 1 >> 0] = $conv2$i;
     HEAP8[$p$010$i + 2 >> 0] = $conv5$i;
     if (!$n$09$i) break; else $p$010$i = $p$010$i + 3 | 0;
    }
    $dec14$in$i = $dec14$in$i + -1 | 0;
    if (!$dec14$in$i) {
     $retval$0 = 0;
     break;
    } else $pixels$addr$013$i = $pixels$addr$013$i + $6 | 0;
   }
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 case 4:
  {
   $18 = HEAP32[$rect$addr$0 + 8 >> 2] | 0;
   $19 = HEAP32[$rect$addr$0 + 12 >> 2] | 0;
   if (!$19) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $div$i$i = ($18 + 3 | 0) >>> 2;
   if (!$18) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   switch ($18 & 3) {
   case 0:
    {
     $h$addr$04$us6$i = $19;
     $pixels$addr$03$us7$i = $add$ptr26;
     while (1) {
      $_n$0$i$us13$i = $div$i$i;
      $_p$0$i$us12$i = $pixels$addr$03$us7$i;
      while (1) {
       HEAP32[$_p$0$i$us12$i >> 2] = $color;
       HEAP32[$_p$0$i$us12$i + 4 >> 2] = $color;
       HEAP32[$_p$0$i$us12$i + 8 >> 2] = $color;
       HEAP32[$_p$0$i$us12$i + 12 >> 2] = $color;
       $_n$0$i$us13$i = $_n$0$i$us13$i + -1 | 0;
       if (!$_n$0$i$us13$i) break; else $_p$0$i$us12$i = $_p$0$i$us12$i + 16 | 0;
      }
      $h$addr$04$us6$i = $h$addr$04$us6$i + -1 | 0;
      if (!$h$addr$04$us6$i) {
       $retval$0 = 0;
       break;
      } else $pixels$addr$03$us7$i = $pixels$addr$03$us7$i + $6 | 0;
     }
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   case 3:
    {
     $dec$i$us54$i154 = $div$i$i + -1 | 0;
     if (!$dec$i$us54$i154) {
      $h$addr$04$us33$i$us = $19;
      $pixels$addr$03$us34$i$us = $add$ptr26;
      while (1) {
       HEAP32[$pixels$addr$03$us34$i$us >> 2] = $color;
       HEAP32[$pixels$addr$03$us34$i$us + 4 >> 2] = $color;
       HEAP32[$pixels$addr$03$us34$i$us + 8 >> 2] = $color;
       $h$addr$04$us33$i$us = $h$addr$04$us33$i$us + -1 | 0;
       if (!$h$addr$04$us33$i$us) {
        $retval$0 = 0;
        break;
       } else $pixels$addr$03$us34$i$us = $pixels$addr$03$us34$i$us + $6 | 0;
      }
      STACKTOP = sp;
      return $retval$0 | 0;
     }
     $h$addr$04$us33$i = $19;
     $pixels$addr$03$us34$i = $add$ptr26;
     while (1) {
      HEAP32[$pixels$addr$03$us34$i >> 2] = $color;
      HEAP32[$pixels$addr$03$us34$i + 4 >> 2] = $color;
      HEAP32[$pixels$addr$03$us34$i + 8 >> 2] = $color;
      $_p$1$i$us43$i156 = $pixels$addr$03$us34$i;
      $dec$i$us54$i157 = $dec$i$us54$i154;
      do {
       $_p$1$i$us43$i156$looptemp = $_p$1$i$us43$i156;
       $_p$1$i$us43$i156 = $_p$1$i$us43$i156 + 16 | 0;
       HEAP32[$_p$1$i$us43$i156$looptemp + 12 >> 2] = $color;
       HEAP32[$_p$1$i$us43$i156 >> 2] = $color;
       HEAP32[$_p$1$i$us43$i156$looptemp + 20 >> 2] = $color;
       HEAP32[$_p$1$i$us43$i156$looptemp + 24 >> 2] = $color;
       $dec$i$us54$i157 = $dec$i$us54$i157 + -1 | 0;
      } while (($dec$i$us54$i157 | 0) != 0);
      $h$addr$04$us33$i = $h$addr$04$us33$i + -1 | 0;
      if (!$h$addr$04$us33$i) {
       $retval$0 = 0;
       break;
      } else $pixels$addr$03$us34$i = $pixels$addr$03$us34$i + $6 | 0;
     }
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   case 1:
    {
     $dec$i$i$us238 = $div$i$i + -1 | 0;
     $tobool$i$i$us239 = ($dec$i$i$us238 | 0) == 0;
     $h$addr$04$i$us = $19;
     $pixels$addr$03$i$us = $add$ptr26;
     while (1) {
      HEAP32[$pixels$addr$03$i$us >> 2] = $color;
      if (!$tobool$i$i$us239) {
       $_p$3$i$i$us240 = $pixels$addr$03$i$us;
       $dec$i$i$us241 = $dec$i$i$us238;
       do {
        HEAP32[$_p$3$i$i$us240 + 4 >> 2] = $color;
        HEAP32[$_p$3$i$i$us240 + 8 >> 2] = $color;
        HEAP32[$_p$3$i$i$us240 + 12 >> 2] = $color;
        $_p$3$i$i$us240 = $_p$3$i$i$us240 + 16 | 0;
        HEAP32[$_p$3$i$i$us240 >> 2] = $color;
        $dec$i$i$us241 = $dec$i$i$us241 + -1 | 0;
       } while (($dec$i$i$us241 | 0) != 0);
      }
      $h$addr$04$i$us = $h$addr$04$i$us + -1 | 0;
      if (!$h$addr$04$i$us) {
       $retval$0 = 0;
       break;
      } else $pixels$addr$03$i$us = $pixels$addr$03$i$us + $6 | 0;
     }
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   default:
    {
     $dec$i$i234 = $div$i$i + -1 | 0;
     $tobool$i$i235 = ($dec$i$i234 | 0) == 0;
     $h$addr$04$i = $19;
     $pixels$addr$03$i = $add$ptr26;
     while (1) {
      HEAP32[$pixels$addr$03$i >> 2] = $color;
      HEAP32[$pixels$addr$03$i + 4 >> 2] = $color;
      if (!$tobool$i$i235) {
       $_p$2$i$i236 = $pixels$addr$03$i;
       $dec$i$i237 = $dec$i$i234;
       do {
        HEAP32[$_p$2$i$i236 + 8 >> 2] = $color;
        $_p$2$i$i236$looptemp = $_p$2$i$i236;
        $_p$2$i$i236 = $_p$2$i$i236 + 16 | 0;
        HEAP32[$_p$2$i$i236$looptemp + 12 >> 2] = $color;
        HEAP32[$_p$2$i$i236 >> 2] = $color;
        HEAP32[$_p$2$i$i236$looptemp + 20 >> 2] = $color;
        $dec$i$i237 = $dec$i$i237 + -1 | 0;
       } while (($dec$i$i237 | 0) != 0);
      }
      $h$addr$04$i = $h$addr$04$i + -1 | 0;
      if (!$h$addr$04$i) {
       $retval$0 = 0;
       break;
      } else $pixels$addr$03$i = $pixels$addr$03$i + $6 | 0;
     }
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   }
   break;
  }
 default:
  {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 return 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $$lcssa213 = 0, $$pre261 = 0, $$pre263 = 0, $$sink = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $146 = 0, $154 = 0, $162 = 0, $164 = 0, $166 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $42 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $82 = 0, $92 = 0, $96 = 0, $a$0 = 0, $a$1 = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add390 = 0, $add436 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx129 = 0, $arrayidx365 = 0, $arrayidx78 = 0, $buf = 0, $call104 = 0, $call160 = 0, $call351 = 0, $call379 = 0, $call406 = 0, $cmp185 = 0, $cmp380 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond350 = 0, $conv175 = 0, $conv208 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr23 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond190 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $spec$select = 0, $spec$select195 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub428 = 0, $sub49230 = 0, $sub49238 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool34 = 0, $tobool352 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $z$0$lcssa = 0, $z$0226 = 0, label = 0, sp = 0, $55$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    $cnt$1 = -1;
    break;
   } else {
    $cnt$1 = $l$0 + $cnt$0 | 0;
    break;
   } else $cnt$1 = $cnt$0; while (0);
   $0 = HEAP32[$s >> 2] | 0;
   $1 = HEAP8[$0 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $2 = $1;
   $3 = $0;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $2 = HEAP8[$incdec$ptr >> 0] | 0;
    $3 = $incdec$ptr;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $4 = $3;
    $z$0226 = $3;
    while (1) {
     if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
      $z$0$lcssa = $z$0226;
      break L15;
     }
     $incdec$ptr23 = $z$0226 + 1 | 0;
     $4 = $4 + 2 | 0;
     HEAP32[$s >> 2] = $4;
     if ((HEAP8[$4 >> 0] | 0) != 37) {
      $z$0$lcssa = $incdec$ptr23;
      break;
     } else $z$0226 = $incdec$ptr23;
    }
   } while (0);
   $l$0 = $z$0$lcssa - $0 | 0;
   if ($tobool25) _out($f, $0, $l$0);
   if (!$l$0) break; else $cnt$0 = $cnt$1;
  }
  $tobool34 = (_isdigit(HEAP8[(HEAP32[$s >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre261 = HEAP32[$s >> 2] | 0;
  if ($tobool34) {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  } else if ((HEAP8[$$pre261 + 2 >> 0] | 0) == 36) {
   $$sink = 3;
   $argpos$0 = (HEAP8[$$pre261 + 1 >> 0] | 0) + -48 | 0;
   $l10n$1 = 1;
  } else {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  }
  $incdec$ptr45 = $$pre261 + $$sink | 0;
  HEAP32[$s >> 2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45 >> 0] | 0;
  $sub49230 = ($11 << 24 >> 24) + -32 | 0;
  if ($sub49230 >>> 0 > 31 | (1 << $sub49230 & 75913 | 0) == 0) {
   $$lcssa213 = $11;
   $fl$0$lcssa = 0;
   $storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45;
   $sub49238 = $sub49230;
   while (1) {
    $or = 1 << $sub49238 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49238 = ($12 << 24 >> 24) + -32 | 0;
    if ($sub49238 >>> 0 > 31 | (1 << $sub49238 & 75913 | 0) == 0) {
     $$lcssa213 = $12;
     $fl$0$lcssa = $or;
     $storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
    }
   }
  }
  if ($$lcssa213 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge187$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $14 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$14 + 2 >> 0] | 0) == 36) {
     $arrayidx78 = $14 + 1 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $l10n$2 = 1;
     $storemerge188 = $14 + 3 | 0;
     $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 3) >> 2] | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $29 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $30 = HEAP32[$29 >> 2] | 0;
     HEAP32[$ap >> 2] = $29 + 4;
     $cond = $30;
    } else $cond = 0;
    $l10n$2 = 0;
    $storemerge188 = (HEAP32[$s >> 2] | 0) + 1 | 0;
    $w$0 = $cond;
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $33 = $storemerge188;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $33 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$33 >> 0] | 0) == 46) {
   $arrayidx114 = $33 + 1 | 0;
   if ((HEAP8[$arrayidx114 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $arrayidx114;
    $call160 = _getint($s) | 0;
    $$pre263 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   if (_isdigit(HEAP8[$33 + 2 >> 0] | 0) | 0) {
    $36 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$36 + 3 >> 0] | 0) == 36) {
     $arrayidx129 = $36 + 2 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $42 = HEAP32[$nl_arg + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $add$ptr139 = $36 + 4 | 0;
     HEAP32[$s >> 2] = $add$ptr139;
     $$pre263 = $add$ptr139;
     $p$0 = $42;
     break;
    }
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $51 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$ap >> 2] = $51 + 4;
    $cond149 = $52;
   } else $cond149 = 0;
   $add$ptr150 = (HEAP32[$s >> 2] | 0) + 2 | 0;
   HEAP32[$s >> 2] = $add$ptr150;
   $$pre263 = $add$ptr150;
   $p$0 = $cond149;
  } else {
   $$pre263 = $33;
   $p$0 = -1;
  } while (0);
  $55 = $$pre263;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$55 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $55$looptemp = $55;
   $55 = $55 + 1 | 0;
   HEAP32[$s >> 2] = $55;
   $57 = HEAP8[(HEAP8[$55$looptemp >> 0] | 0) + -65 + (1920 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $57 & 255;
   if (($conv175 + -1 | 0) >>> 0 >= 8) break; else $st$0 = $conv175;
  }
  if (!($57 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($57 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 54; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $59 = $nl_arg + ($argpos$0 << 3) | 0;
    $64 = HEAP32[$59 + 4 >> 2] | 0;
    $65 = $arg;
    HEAP32[$65 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$65 + 4 >> 2] = $64;
    label = 54;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap, $pop_arg_long_double);
   $69 = HEAP32[$s >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $55;
    label = 55;
   } else $l$0$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $conv208 = HEAP8[$69 + -1 >> 0] | 0;
   $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
   $and220 = $fl$1 & -65537;
   $spec$select = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
   L79 : do switch ($t$0 | 0) {
   case 110:
    {
     switch (($st$0 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $82 = HEAP32[$arg >> 2] | 0;
       HEAP32[$82 >> 2] = $cnt$1;
       HEAP32[$82 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $92 = HEAP32[$arg >> 2] | 0;
       HEAP32[$92 >> 2] = $cnt$1;
       HEAP32[$92 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $l$0$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $spec$select | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $spec$select;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 67;
     break;
    }
   case 111:
    {
     $112 = $arg;
     $118 = _fmt_o(HEAP32[$112 >> 2] | 0, HEAP32[$112 + 4 >> 2] | 0, $add$ptr206) | 0;
     $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $118 | 0;
     $a$0 = $118;
     $fl$4 = $spec$select;
     $p$2 = ($spec$select & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 6913;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $120 = $arg;
     $122 = HEAP32[$120 >> 2] | 0;
     $125 = HEAP32[$120 + 4 >> 2] | 0;
     if (($125 | 0) < 0) {
      $127 = _i64Subtract(0, 0, $122 | 0, $125 | 0) | 0;
      $128 = getTempRet0() | 0;
      $129 = $arg;
      HEAP32[$129 >> 2] = $127;
      HEAP32[$129 + 4 >> 2] = $128;
      $135 = $127;
      $136 = $128;
      $pl$0 = 1;
      $prefix$0 = 6913;
      label = 72;
      break L79;
     } else {
      $135 = $122;
      $136 = $125;
      $pl$0 = ($spec$select & 2049 | 0) != 0 & 1;
      $prefix$0 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 6913 : 6915) : 6914;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $71 = $arg;
     $135 = HEAP32[$71 >> 2] | 0;
     $136 = HEAP32[$71 + 4 >> 2] | 0;
     $pl$0 = 0;
     $prefix$0 = 6913;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
     $a$1 = $add$ptr341;
     $fl$6 = $and220;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 6913;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     break;
    }
   case 115:
    {
     $154 = HEAP32[$arg >> 2] | 0;
     $cond350 = ($154 | 0) == 0 ? 6923 : $154;
     $call351 = _memchr($cond350, 0, $p$0) | 0;
     $tobool352 = ($call351 | 0) == 0;
     $a$1 = $cond350;
     $fl$6 = $and220;
     $p$5 = $tobool352 ? $p$0 : $call351 - $cond350 | 0;
     $pl$2 = 0;
     $prefix$2 = 6913;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $tobool352 ? $cond350 + $p$0 | 0 : $call351;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
     HEAP32[$arrayidx365 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4269 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad_524($f, 32, $w$1, 0, $spec$select);
      $i$0217271 = 0;
      label = 89;
     } else {
      $p$4269 = $p$0;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $l$0$ph$be = FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $spec$select, $t$0) | 0;
     break L77;
     break;
    }
   default:
    {
     $a$1 = $0;
     $fl$6 = $spec$select;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 6913;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $96 = $arg;
    $102 = _fmt_x(HEAP32[$96 >> 2] | 0, HEAP32[$96 + 4 >> 2] | 0, $add$ptr206, $t$1 & 32) | 0;
    $103 = $arg;
    $or$cond190 = ($fl$3 & 8 | 0) == 0 | (HEAP32[$103 >> 2] | 0) == 0 & (HEAP32[$103 + 4 >> 2] | 0) == 0;
    $a$0 = $102;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = $or$cond190 ? 0 : 2;
    $prefix$1 = $or$cond190 ? 6913 : 6913 + ($t$1 >>> 4) | 0;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $a$0 = _fmt_u($135, $136, $add$ptr206) | 0;
    $fl$4 = $spec$select;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $i$0243 = 0;
    $ws$0244 = HEAP32[$arg >> 2] | 0;
    while (1) {
     $162 = HEAP32[$ws$0244 >> 2] | 0;
     if (!$162) {
      $i$0217 = $i$0243;
      break;
     }
     $call379 = _wctomb($mb, $162) | 0;
     $cmp380 = ($call379 | 0) < 0;
     if ($cmp380 | $call379 >>> 0 > ($p$4269 - $i$0243 | 0) >>> 0) {
      label = 83;
      break;
     }
     $add390 = $call379 + $i$0243 | 0;
     if ($p$4269 >>> 0 > $add390 >>> 0) {
      $i$0243 = $add390;
      $ws$0244 = $ws$0244 + 4 | 0;
     } else {
      $i$0217 = $add390;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($cmp380) {
      $retval$0 = -1;
      break L1;
     } else $i$0217 = $i$0243;
    }
    _pad_524($f, 32, $w$1, $i$0217, $spec$select);
    if (!$i$0217) {
     $i$0217271 = 0;
     label = 89;
    } else {
     $i$1248 = 0;
     $ws$1249 = HEAP32[$arg >> 2] | 0;
     while (1) {
      $164 = HEAP32[$ws$1249 >> 2] | 0;
      if (!$164) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      $call406 = _wctomb($mb, $164) | 0;
      $i$1248 = $call406 + $i$1248 | 0;
      if (($i$1248 | 0) > ($i$0217 | 0)) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      _out($f, $mb, $call406);
      if ($i$1248 >>> 0 >= $i$0217 >>> 0) {
       $i$0217271 = $i$0217;
       label = 89;
       break;
      } else $ws$1249 = $ws$1249 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $138 = $arg;
    $146 = (HEAP32[$138 >> 2] | 0) != 0 | (HEAP32[$138 + 4 >> 2] | 0) != 0;
    $or$cond = ($p$2 | 0) != 0 | $146;
    $add323 = $sub$ptr$lhs$cast318 - $a$0 + (($146 ^ 1) & 1) | 0;
    $a$1 = $or$cond ? $a$0 : $add$ptr206;
    $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
    $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_524($f, 32, $w$1, $i$0217271, $spec$select ^ 8192);
    $l$0$ph$be = ($w$1 | 0) > ($i$0217271 | 0) ? $w$1 : $i$0217271;
    break;
   }
   $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $a$1 | 0;
   $spec$select195 = ($p$5 | 0) < ($sub$ptr$sub428 | 0) ? $sub$ptr$sub428 : $p$5;
   $add436 = $spec$select195 + $pl$2 | 0;
   $w$2 = ($w$1 | 0) < ($add436 | 0) ? $add436 : $w$1;
   _pad_524($f, 32, $w$2, $add436, $fl$6);
   _out($f, $prefix$2, $pl$2);
   _pad_524($f, 48, $w$2, $add436, $fl$6 ^ 65536);
   _pad_524($f, 48, $spec$select195, $sub$ptr$sub428, 0);
   _out($f, $a$1, $sub$ptr$sub428);
   _pad_524($f, 32, $w$2, $add436, $fl$6 ^ 8192);
   $l$0$ph$be = $w$2;
  } while (0);
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L123 : do if ((label | 0) == 92) if (!$f) if (!$l10n$0$ph) $retval$0 = 0; else {
  $i$2224 = 1;
  while (1) {
   $166 = HEAP32[$nl_type + ($i$2224 << 2) >> 2] | 0;
   if (!$166) break;
   _pop_arg($nl_arg + ($i$2224 << 3) | 0, $166, $ap, $pop_arg_long_double);
   $inc = $i$2224 + 1 | 0;
   if ($inc >>> 0 < 10) $i$2224 = $inc; else {
    $retval$0 = 1;
    break L123;
   }
  }
  $i$3221 = $i$2224;
  while (1) {
   if (HEAP32[$nl_type + ($i$3221 << 2) >> 2] | 0) {
    $retval$0 = -1;
    break L123;
   }
   $i$3221 = $i$3221 + 1 | 0;
   if ($i$3221 >>> 0 >= 10) {
    $retval$0 = 1;
    break;
   }
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_GestureProcessEvent($event) {
 $event = $event | 0;
 var $0 = 0, $1 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $111 = 0, $114 = 0, $119 = 0, $121 = 0, $17 = 0.0, $18 = 0.0, $21 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $45 = 0, $50 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $7 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $82 = 0, $91 = 0, $97 = 0, $arraydecay5$i = 0, $arrayidx$i = 0, $bestDiff$012$i = 0.0, $bestTempl$0 = 0, $call$i$i = 0.0, $call$i140 = 0, $call$i165 = 0, $call6$i$i = 0.0, $cmp218 = 0, $cmp7$i = 0, $cmp9$i$i = 0, $cmp9$lcssa$i$i = 0, $cmp934$i$i = 0, $cmp941$i$i = 0, $cond$i$i = 0.0, $conv11$i$i = 0.0, $conv126 = 0.0, $conv138 = 0.0, $conv15$i$i = 0.0, $conv17$i$i = 0.0, $conv172 = 0.0, $conv190 = 0.0, $conv21$i$i = 0.0, $conv216 = 0.0, $conv237 = 0.0, $conv242 = 0.0, $conv55 = 0.0, $conv58 = 0.0, $div192 = 0.0, $div194 = 0.0, $div196 = 0.0, $div198 = 0.0, $dollarTemplate$i = 0, $dollarTemplate1$i = 0, $dollarTemplate1$i163 = 0, $event$i204 = 0, $f1$0$lcssa$i$i = 0.0, $f1$038$i$i = 0.0, $f1$1$i$i = 0.0, $f2$0$lcssa$i$i = 0.0, $f2$040$i$i = 0.0, $f2$1$i$i = 0.0, $hash$010$i$i = 0, $hash$010$i$i173 = 0, $i$010$i = 0, $i$011$i$i = 0, $i$011$i$i172 = 0, $i$013$i = 0, $i$0248 = 0, $i$06$i = 0, $inc$i = 0, $inc231 = 0, $index$0 = 0, $lastCentroid$sroa$0$0$$sroa_idx = 0, $lastCentroid$sroa$0$0$copyload = 0.0, $lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D = 0, $lastCentroid$sroa$4$0$copyload = 0.0, $length = 0, $numDollarTemplates$i = 0, $numDollarTemplates$i162 = 0, $numDollarTemplates$i197 = 0, $numDownFingers = 0, $numDownFingers136 = 0, $numDownFingers230 = 0, $numPoints = 0, $path = 0, $recording = 0, $retval$0$i139 = 0, $retval$0$i139$ph = 0, $retval$0$i144 = 0, $sub107 = 0, $sub110 = 0.0, $sub120 = 0.0, $sub157 = 0.0, $sub161 = 0.0, $sub175 = 0.0, $sub179 = 0.0, $ta$036$i$i = 0.0, $ta$1$i$i = 0.0, $tb$035$i$i = 0.0, $tb$1$i$i = 0.0, $vararg_buffer = 0, $x1$037$i$i = 0.0, $x1$1$i$i = 0.0, $x2$039$i$i = 0.0, $x2$1$i$i = 0.0, $x233 = 0, $x52 = 0, $y247 = 0, $y62 = 0, $y96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $event$i204 = sp + 512 | 0;
 $path = sp;
 $0 = HEAP32[$event >> 2] | 0;
 if (($0 + -1792 | 0) >>> 0 >= 3) {
  STACKTOP = sp;
  return;
 }
 $1 = $event + 8 | 0;
 $3 = HEAP32[$1 >> 2] | 0;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = HEAP32[4015] | 0;
 if (($7 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $i$06$i = 0;
 while (1) {
  $arrayidx$i = 0 + ($i$06$i * 8232 | 0) | 0;
  $8 = $arrayidx$i;
  $inc$i = $i$06$i + 1 | 0;
  if ((HEAP32[$8 >> 2] | 0) == ($3 | 0) ? (HEAP32[$8 + 4 >> 2] | 0) == ($6 | 0) : 0) break;
  if (($inc$i | 0) < ($7 | 0)) $i$06$i = $inc$i; else {
   label = 54;
   break;
  }
 }
 if ((label | 0) == 54) {
  STACKTOP = sp;
  return;
 }
 if (!$arrayidx$i) {
  STACKTOP = sp;
  return;
 }
 $17 = +HEAPF32[$event + 24 >> 2];
 $18 = +HEAPF32[$event + 28 >> 2];
 switch ($0 | 0) {
 case 1793:
  {
   $numDownFingers = 0 + ($i$06$i * 8232 | 0) + 8216 | 0;
   HEAP16[$numDownFingers >> 1] = (HEAP16[$numDownFingers >> 1] | 0) + -1 << 16 >> 16;
   $recording = 0 + ($i$06$i * 8232 | 0) + 8228 | 0;
   do if (!(HEAP32[$recording >> 2] | 0)) {
    _SDL_memset($event$i204, 0, 512) | 0;
    _dollarNormalize(0 + ($i$06$i * 8232 | 0) + 16 | 0, $event$i204);
    $numDollarTemplates$i197 = 0 + ($i$06$i * 8232 | 0) + 8220 | 0;
    if ((HEAP32[$numDollarTemplates$i197 >> 2] | 0) <= 0) break;
    $dollarTemplate$i = 0 + ($i$06$i * 8232 | 0) + 8224 | 0;
    $bestDiff$012$i = 1.0e4;
    $bestTempl$0 = -1;
    $i$013$i = 0;
    do {
     $arraydecay5$i = (HEAP32[$dollarTemplate$i >> 2] | 0) + ($i$013$i * 516 | 0) | 0;
     $call$i$i = +_dollarDifference($event$i204, $arraydecay5$i, -.185407355427742);
     $call6$i$i = +_dollarDifference($event$i204, $arraydecay5$i, .185407355427742);
     $cmp934$i$i = $call$i$i < $call6$i$i;
     if (+_SDL_fabs(-1.5707963267948966) > .03490658503988659) {
      $cmp941$i$i = $cmp934$i$i;
      $f1$038$i$i = $call$i$i;
      $f2$040$i$i = $call6$i$i;
      $ta$036$i$i = -.7853981633974483;
      $tb$035$i$i = .7853981633974483;
      $x1$037$i$i = -.185407355427742;
      $x2$039$i$i = .185407355427742;
      while (1) {
       if ($cmp941$i$i) {
        $conv11$i$i = $x2$039$i$i;
        $conv15$i$i = $conv11$i$i * .38196601100000005 + $ta$036$i$i * .618033989;
        $f1$1$i$i = +_dollarDifference($event$i204, $arraydecay5$i, $conv15$i$i);
        $f2$1$i$i = $f1$038$i$i;
        $ta$1$i$i = $ta$036$i$i;
        $tb$1$i$i = $conv11$i$i;
        $x1$1$i$i = $conv15$i$i;
        $x2$1$i$i = $x1$037$i$i;
       } else {
        $conv17$i$i = $x1$037$i$i;
        $conv21$i$i = $conv17$i$i * .38196601100000005 + $tb$035$i$i * .618033989;
        $f1$1$i$i = $f2$040$i$i;
        $f2$1$i$i = +_dollarDifference($event$i204, $arraydecay5$i, $conv21$i$i);
        $ta$1$i$i = $conv17$i$i;
        $tb$1$i$i = $tb$035$i$i;
        $x1$1$i$i = $x2$039$i$i;
        $x2$1$i$i = $conv21$i$i;
       }
       $cmp9$i$i = $f1$1$i$i < $f2$1$i$i;
       if (+_SDL_fabs($ta$1$i$i - $tb$1$i$i) > .03490658503988659) {
        $cmp941$i$i = $cmp9$i$i;
        $f1$038$i$i = $f1$1$i$i;
        $f2$040$i$i = $f2$1$i$i;
        $ta$036$i$i = $ta$1$i$i;
        $tb$035$i$i = $tb$1$i$i;
        $x1$037$i$i = $x1$1$i$i;
        $x2$039$i$i = $x2$1$i$i;
       } else {
        $cmp9$lcssa$i$i = $cmp9$i$i;
        $f1$0$lcssa$i$i = $f1$1$i$i;
        $f2$0$lcssa$i$i = $f2$1$i$i;
        break;
       }
      }
     } else {
      $cmp9$lcssa$i$i = $cmp934$i$i;
      $f1$0$lcssa$i$i = $call$i$i;
      $f2$0$lcssa$i$i = $call6$i$i;
     }
     $cond$i$i = $cmp9$lcssa$i$i ? $f1$0$lcssa$i$i : $f2$0$lcssa$i$i;
     $cmp7$i = $cond$i$i < $bestDiff$012$i;
     $bestTempl$0 = $cmp7$i ? $i$013$i : $bestTempl$0;
     $bestDiff$012$i = $cmp7$i ? $cond$i$i : $bestDiff$012$i;
     $i$013$i = $i$013$i + 1 | 0;
    } while (($i$013$i | 0) < (HEAP32[$numDollarTemplates$i197 >> 2] | 0));
    if (($bestTempl$0 | 0) > -1) {
     $74 = HEAP32[(HEAP32[$dollarTemplate$i >> 2] | 0) + ($bestTempl$0 * 516 | 0) + 512 >> 2] | 0;
     HEAP32[$event$i204 >> 2] = 2048;
     $75 = $arrayidx$i;
     $80 = HEAP32[$75 + 4 >> 2] | 0;
     $82 = $event$i204 + 8 | 0;
     HEAP32[$82 >> 2] = HEAP32[$75 >> 2];
     HEAP32[$82 + 4 >> 2] = $80;
     HEAP32[$event$i204 + 32 >> 2] = HEAP32[0 + ($i$06$i * 8232 | 0) + 8 >> 2];
     HEAP32[$event$i204 + 36 >> 2] = HEAP32[0 + ($i$06$i * 8232 | 0) + 12 >> 2];
     $91 = $event$i204 + 16 | 0;
     HEAP32[$91 >> 2] = $74;
     HEAP32[$91 + 4 >> 2] = 0;
     HEAPF32[$event$i204 + 28 >> 2] = $bestDiff$012$i;
     HEAP32[$event$i204 + 24 >> 2] = (HEAPU16[$numDownFingers >> 1] | 0) + 1;
     _SDL_PushEvent($event$i204) | 0;
    }
   } else {
    HEAP32[$recording >> 2] = 0;
    _dollarNormalize(0 + ($i$06$i * 8232 | 0) + 16 | 0, $path);
    L37 : do if (!0) {
     $numDollarTemplates$i162 = 0 + ($i$06$i * 8232 | 0) + 8220 | 0;
     $30 = HEAP32[$numDollarTemplates$i162 >> 2] | 0;
     $dollarTemplate1$i163 = 0 + ($i$06$i * 8232 | 0) + 8224 | 0;
     $call$i165 = _SDL_realloc(HEAP32[$dollarTemplate1$i163 >> 2] | 0, ($30 * 516 | 0) + 516 | 0) | 0;
     if (!$call$i165) {
      $index$0 = _SDL_Error(0) | 0;
      label = 30;
      break;
     }
     HEAP32[$dollarTemplate1$i163 >> 2] = $call$i165;
     _SDL_memcpy($call$i165 + ($30 * 516 | 0) | 0, $path, 512) | 0;
     $hash$010$i$i173 = 5381;
     $i$011$i$i172 = 0;
     do {
      $hash$010$i$i173 = ((($hash$010$i$i173 * 33 | 0) + (~~+HEAPF32[$call$i165 + ($30 * 516 | 0) + ($i$011$i$i172 << 3) >> 2] >>> 0) | 0) * 33 | 0) + (~~+HEAPF32[$call$i165 + ($30 * 516 | 0) + ($i$011$i$i172 << 3) + 4 >> 2] >>> 0) | 0;
      $i$011$i$i172 = $i$011$i$i172 + 1 | 0;
     } while (($i$011$i$i172 | 0) != 64);
     HEAP32[$call$i165 + ($30 * 516 | 0) + 512 >> 2] = $hash$010$i$i173;
     HEAP32[$numDollarTemplates$i162 >> 2] = (HEAP32[$numDollarTemplates$i162 >> 2] | 0) + 1;
     $index$0 = $30;
     label = 30;
    } else {
     $21 = HEAP32[4015] | 0;
     L46 : do if (!$21) {
      $retval$0$i139$ph = _SDL_SetError(5015, $vararg_buffer) | 0;
      label = 21;
     } else {
      if (($21 | 0) <= 0) break L37;
      $i$010$i = 0;
      while (1) {
       $numDollarTemplates$i = 0 + ($i$010$i * 8232 | 0) + 8220 | 0;
       $23 = HEAP32[$numDollarTemplates$i >> 2] | 0;
       $dollarTemplate1$i = 0 + ($i$010$i * 8232 | 0) + 8224 | 0;
       $call$i140 = _SDL_realloc(HEAP32[$dollarTemplate1$i >> 2] | 0, ($23 * 516 | 0) + 516 | 0) | 0;
       if (!$call$i140) $retval$0$i144 = _SDL_Error(0) | 0; else {
        HEAP32[$dollarTemplate1$i >> 2] = $call$i140;
        _SDL_memcpy($call$i140 + ($23 * 516 | 0) | 0, $path, 512) | 0;
        $hash$010$i$i = 5381;
        $i$011$i$i = 0;
        do {
         $hash$010$i$i = ((($hash$010$i$i * 33 | 0) + (~~+HEAPF32[$call$i140 + ($23 * 516 | 0) + ($i$011$i$i << 3) >> 2] >>> 0) | 0) * 33 | 0) + (~~+HEAPF32[$call$i140 + ($23 * 516 | 0) + ($i$011$i$i << 3) + 4 >> 2] >>> 0) | 0;
         $i$011$i$i = $i$011$i$i + 1 | 0;
        } while (($i$011$i$i | 0) != 64);
        HEAP32[$call$i140 + ($23 * 516 | 0) + 512 >> 2] = $hash$010$i$i;
        HEAP32[$numDollarTemplates$i >> 2] = (HEAP32[$numDollarTemplates$i >> 2] | 0) + 1;
        $retval$0$i144 = $23;
       }
       $i$010$i = $i$010$i + 1 | 0;
       if (($retval$0$i144 | 0) < 0) {
        $retval$0$i139$ph = -1;
        label = 21;
        break L46;
       }
       $22 = HEAP32[4015] | 0;
       if (($i$010$i | 0) >= ($22 | 0)) {
        $29 = $22;
        $retval$0$i139 = $retval$0$i144;
        break;
       }
      }
     } while (0);
     if ((label | 0) == 21) {
      $29 = HEAP32[4015] | 0;
      $retval$0$i139 = $retval$0$i139$ph;
     }
     if (($29 | 0) > 0) {
      $i$0248 = 0;
      do {
       HEAP32[0 + ($i$0248 * 8232 | 0) + 8228 >> 2] = 0;
       $i$0248 = $i$0248 + 1 | 0;
      } while (($i$0248 | 0) < ($29 | 0));
      $index$0 = $retval$0$i139;
      label = 30;
     } else {
      $index$0 = $retval$0$i139;
      label = 30;
     }
    } while (0);
    if ((label | 0) == 30) if (($index$0 | 0) > -1) {
     $37 = HEAP32[(HEAP32[0 + ($i$06$i * 8232 | 0) + 8224 >> 2] | 0) + ($index$0 * 516 | 0) + 512 >> 2] | 0;
     $38 = $arrayidx$i;
     $40 = HEAP32[$38 >> 2] | 0;
     $43 = HEAP32[$38 + 4 >> 2] | 0;
     HEAP32[$event$i204 >> 2] = 2049;
     $45 = $event$i204 + 8 | 0;
     HEAP32[$45 >> 2] = $40;
     HEAP32[$45 + 4 >> 2] = $43;
     $50 = $event$i204 + 16 | 0;
     HEAP32[$50 >> 2] = $37;
     HEAP32[$50 + 4 >> 2] = 0;
     _SDL_PushEvent($event$i204) | 0;
     break;
    }
    $54 = $arrayidx$i;
    $56 = HEAP32[$54 >> 2] | 0;
    $59 = HEAP32[$54 + 4 >> 2] | 0;
    HEAP32[$event$i204 >> 2] = 2049;
    $61 = $event$i204 + 8 | 0;
    HEAP32[$61 >> 2] = $56;
    HEAP32[$61 + 4 >> 2] = $59;
    $66 = $event$i204 + 16 | 0;
    HEAP32[$66 >> 2] = -1;
    HEAP32[$66 + 4 >> 2] = -1;
    _SDL_PushEvent($event$i204) | 0;
   } while (0);
   $97 = HEAP16[$numDownFingers >> 1] | 0;
   if ($97 << 16 >> 16) {
    $x52 = 0 + ($i$06$i * 8232 | 0) + 8 | 0;
    $conv55 = +(($97 & 65535) + 1 | 0);
    $conv58 = +($97 & 65535);
    HEAPF32[$x52 >> 2] = (+HEAPF32[$x52 >> 2] * $conv55 - $17) / $conv58;
    $y62 = 0 + ($i$06$i * 8232 | 0) + 12 | 0;
    HEAPF32[$y62 >> 2] = (+HEAPF32[$y62 >> 2] * $conv55 - $18) / $conv58;
   }
   STACKTOP = sp;
   return;
  }
 case 1794:
  {
   $100 = +HEAPF32[$event + 32 >> 2];
   $101 = +HEAPF32[$event + 36 >> 2];
   $numPoints = 0 + ($i$06$i * 8232 | 0) + 20 | 0;
   $102 = HEAP32[$numPoints >> 2] | 0;
   if (($102 | 0) < 1024) {
    $103 = HEAP32[0 + ($i$06$i * 8232 | 0) + 8 >> 2] | 0;
    HEAP32[0 + ($i$06$i * 8232 | 0) + 24 + ($102 << 3) >> 2] = $103;
    $y96 = 0 + ($i$06$i * 8232 | 0) + 12 | 0;
    $104 = HEAP32[$y96 >> 2] | 0;
    HEAP32[0 + ($i$06$i * 8232 | 0) + 24 + ($102 << 3) + 4 >> 2] = $104;
    $sub107 = $102 + -1 | 0;
    $sub110 = (HEAP32[tempDoublePtr >> 2] = $103, +HEAPF32[tempDoublePtr >> 2]) - +HEAPF32[0 + ($i$06$i * 8232 | 0) + 24 + ($sub107 << 3) >> 2];
    $sub120 = (HEAP32[tempDoublePtr >> 2] = $104, +HEAPF32[tempDoublePtr >> 2]) - +HEAPF32[0 + ($i$06$i * 8232 | 0) + 24 + ($sub107 << 3) + 4 >> 2];
    $conv126 = +_SDL_sqrt($sub110 * $sub110 + $sub120 * $sub120);
    $length = 0 + ($i$06$i * 8232 | 0) + 16 | 0;
    HEAPF32[$length >> 2] = +HEAPF32[$length >> 2] + $conv126;
    HEAP32[$numPoints >> 2] = (HEAP32[$numPoints >> 2] | 0) + 1;
    $lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D = $y96;
   } else $lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D = 0 + ($i$06$i * 8232 | 0) + 12 | 0;
   $lastCentroid$sroa$0$0$$sroa_idx = 0 + ($i$06$i * 8232 | 0) + 8 | 0;
   $lastCentroid$sroa$0$0$copyload = +HEAPF32[$lastCentroid$sroa$0$0$$sroa_idx >> 2];
   $lastCentroid$sroa$4$0$copyload = +HEAPF32[$lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D >> 2];
   $numDownFingers136 = 0 + ($i$06$i * 8232 | 0) + 8216 | 0;
   $111 = HEAP16[$numDownFingers136 >> 1] | 0;
   $conv138 = +($111 & 65535);
   HEAPF32[$lastCentroid$sroa$0$0$$sroa_idx >> 2] = $lastCentroid$sroa$0$0$copyload + $100 / $conv138;
   HEAPF32[$lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D >> 2] = $lastCentroid$sroa$4$0$copyload + $101 / $conv138;
   if (($111 & 65535) <= 1) {
    STACKTOP = sp;
    return;
   }
   $sub157 = $17 - $100 - $lastCentroid$sroa$0$0$copyload;
   $sub161 = $18 - $101 - $lastCentroid$sroa$4$0$copyload;
   $conv172 = +_SDL_sqrt($sub157 * $sub157 + $sub161 * $sub161);
   $sub175 = $17 - +HEAPF32[$lastCentroid$sroa$0$0$$sroa_idx >> 2];
   $sub179 = $18 - +HEAPF32[$lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D >> 2];
   $conv190 = +_SDL_sqrt($sub175 * $sub175 + $sub179 * $sub179);
   $div192 = $sub157 / $conv172;
   $div194 = $sub161 / $conv172;
   $div196 = $sub175 / $conv190;
   $div198 = $sub179 / $conv190;
   $conv216 = +_SDL_atan2($div192 * $div198 - $div194 * $div196, $div192 * $div196 + $div194 * $div198);
   $cmp218 = $conv172 == 0.0;
   HEAP32[$event$i204 >> 2] = 2050;
   $114 = $arrayidx$i;
   $119 = HEAP32[$114 + 4 >> 2] | 0;
   $121 = $event$i204 + 8 | 0;
   HEAP32[$121 >> 2] = HEAP32[$114 >> 2];
   HEAP32[$121 + 4 >> 2] = $119;
   HEAP32[$event$i204 + 24 >> 2] = HEAP32[0 + ($i$06$i * 8232 | 0) + 8 >> 2];
   HEAP32[$event$i204 + 28 >> 2] = HEAP32[$lastCentroid$sroa$4$0$$sroa_idx98$pre$phiZZZZZZ2D >> 2];
   HEAPF32[$event$i204 + 16 >> 2] = $cmp218 ? 0.0 : $conv216;
   HEAPF32[$event$i204 + 20 >> 2] = $cmp218 ? 0.0 : $conv190 - $conv172;
   HEAP16[$event$i204 + 32 >> 1] = HEAP16[$numDownFingers136 >> 1] | 0;
   _SDL_PushEvent($event$i204) | 0;
   STACKTOP = sp;
   return;
  }
 case 1792:
  {
   $numDownFingers230 = 0 + ($i$06$i * 8232 | 0) + 8216 | 0;
   $inc231 = (HEAP16[$numDownFingers230 >> 1] | 0) + 1 << 16 >> 16;
   HEAP16[$numDownFingers230 >> 1] = $inc231;
   $x233 = 0 + ($i$06$i * 8232 | 0) + 8 | 0;
   $conv237 = +(($inc231 & 65535) + -1 | 0);
   $conv242 = +($inc231 & 65535);
   HEAPF32[$x233 >> 2] = ($17 + +HEAPF32[$x233 >> 2] * $conv237) / $conv242;
   $y247 = 0 + ($i$06$i * 8232 | 0) + 12 | 0;
   HEAPF32[$y247 >> 2] = ($18 + +HEAPF32[$y247 >> 2] * $conv237) / $conv242;
   HEAPF32[0 + ($i$06$i * 8232 | 0) + 16 >> 2] = 0.0;
   HEAPF32[0 + ($i$06$i * 8232 | 0) + 24 >> 2] = $17;
   HEAPF32[0 + ($i$06$i * 8232 | 0) + 28 >> 2] = $18;
   HEAP32[0 + ($i$06$i * 8232 | 0) + 20 >> 2] = 1;
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _SDL_GameControllerEventWatcher($userdata, $event) {
 $userdata = $userdata | 0;
 $event = $event | 0;
 var $$pre$i$i = 0, $$pre$i$i110 = 0, $$pre$i99$i = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $52 = 0, $56 = 0, $60 = 0, $64 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $88 = 0, $9 = 0, $add100$i = 0, $arrayidx1$i = 0, $axis4$i$i$i64 = 0, $axis4$i$i70 = 0, $bindings$i58 = 0, $button34$i$i73 = 0, $button34$i48$i = 0, $call$i36$i = 0, $call$i83$i = 0, $call$i92$i = 0, $cmp$i29$i = 0, $cond$i = 0, $controllerlist$0 = 0, $controllerlist$0133 = 0, $controllerlist$0135 = 0, $controllerlist22$0 = 0, $controllerlist22$0139 = 0, $controllerlist22$0141 = 0, $controllerlist5$0 = 0, $controllerlist5$0136 = 0, $controllerlist5$0138 = 0, $controllerlist50$0142 = 0, $controllerlist50$0144 = 0, $conv = 0, $conv1$i = 0, $conv11$i59 = 0, $conv16 = 0, $conv3 = 0, $conv33 = 0, $event$i32$i = 0, $guide_button_down$i37$i = 0, $i$0127$i = 0, $i$018$i = 0, $i$054$i = 0, $inc$i50 = 0, $last_hat_mask$i = 0, $last_match_axis$i = 0, $match$2$i = 0, $num_bindings$i56 = 0, $outputType$pre$phi$iZ2D = 0, $outputType1$i$i = 0, $state36$i$i74 = 0, $state36$i49$i = 0, $tobool40$i = 0, $value$addr$0$i = 0, $value6$i$i$i65 = 0, $value6$i$i71 = 0, $which$i$i$i63 = 0, $which$i$i69 = 0, $which$i28$i = 0, $which$i46$i = 0, $which40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event$i32$i = sp;
 switch (HEAP32[$event >> 2] | 0) {
 case 1536:
  {
   $controllerlist$0133 = HEAP32[4706] | 0;
   if (!$controllerlist$0133) {
    STACKTOP = sp;
    return 1;
   }
   $1 = HEAP32[$event + 8 >> 2] | 0;
   $controllerlist$0135 = $controllerlist$0133;
   while (1) {
    if ((HEAP32[HEAP32[$controllerlist$0135 >> 2] >> 2] | 0) == ($1 | 0)) break;
    $controllerlist$0 = HEAP32[$controllerlist$0135 + 32 >> 2] | 0;
    if (!$controllerlist$0) {
     label = 104;
     break;
    } else $controllerlist$0135 = $controllerlist$0;
   }
   if ((label | 0) == 104) {
    STACKTOP = sp;
    return 1;
   }
   $conv = HEAPU8[$event + 12 >> 0] | 0;
   $conv3 = HEAP16[$event + 16 >> 1] | 0;
   $last_match_axis$i = $controllerlist$0135 + 20 | 0;
   $7 = HEAP32[(HEAP32[$last_match_axis$i >> 2] | 0) + ($conv << 2) >> 2] | 0;
   $8 = HEAP32[$controllerlist$0135 + 12 >> 2] | 0;
   L12 : do if (($8 | 0) > 0) {
    $9 = HEAP32[$controllerlist$0135 + 16 >> 2] | 0;
    $i$0127$i = 0;
    while (1) {
     $arrayidx1$i = $9 + ($i$0127$i << 5) | 0;
     do if ((HEAP32[$arrayidx1$i >> 2] | 0) == 2) if ((HEAP32[$9 + ($i$0127$i << 5) + 4 >> 2] | 0) == ($conv | 0)) {
      $12 = HEAP32[$9 + ($i$0127$i << 5) + 8 >> 2] | 0;
      $13 = HEAP32[$9 + ($i$0127$i << 5) + 12 >> 2] | 0;
      if (($12 | 0) < ($13 | 0)) if (($12 | 0) > ($conv3 | 0) | ($13 | 0) < ($conv3 | 0)) break; else {
       $match$2$i = $arrayidx1$i;
       break L12;
      } else if (($12 | 0) < ($conv3 | 0) | ($13 | 0) > ($conv3 | 0)) break; else {
       $match$2$i = $arrayidx1$i;
       break L12;
      }
     } while (0);
     $i$0127$i = $i$0127$i + 1 | 0;
     if (($i$0127$i | 0) >= ($8 | 0)) {
      $match$2$i = 0;
      break;
     }
    }
   } else $match$2$i = 0; while (0);
   $tobool40$i = ($match$2$i | 0) == 0;
   do if (!$7) {
    if (!$tobool40$i) {
     $outputType$pre$phi$iZ2D = $match$2$i + 16 | 0;
     label = 43;
    }
   } else {
    $14 = HEAP32[$7 + 16 >> 2] | 0;
    if ($tobool40$i) {
     $18 = HEAP32[$7 + 20 >> 2] | 0;
     if (($14 | 0) == 2) {
      if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) break;
      HEAP32[$event$i32$i >> 2] = 1616;
      HEAP32[$event$i32$i + 8 >> 2] = HEAP32[HEAP32[$controllerlist$0135 >> 2] >> 2];
      HEAP8[$event$i32$i + 12 >> 0] = $18;
      HEAP16[$event$i32$i + 16 >> 1] = 0;
      _SDL_PushEvent($event$i32$i) | 0;
      break;
     }
     do if (($18 | 0) != -1) {
      HEAP32[$event$i32$i >> 2] = 1618;
      if (($18 | 0) == 5) {
       $call$i83$i = _SDL_GetTicks() | 0;
       $$pre$i$i = HEAP32[$controllerlist$0135 >> 2] | 0;
       if ((250 - $call$i83$i + (HEAP32[$controllerlist$0135 + 28 >> 2] | 0) | 0) >= 1) if (!(HEAP32[$$pre$i$i + 72 >> 2] | 0)) {
        HEAP32[$$pre$i$i + 68 >> 2] = 1;
        break;
       }
       HEAP32[$$pre$i$i + 68 >> 2] = 0;
      }
      if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
       HEAP32[$event$i32$i + 8 >> 2] = HEAP32[HEAP32[$controllerlist$0135 >> 2] >> 2];
       HEAP8[$event$i32$i + 12 >> 0] = $18;
       HEAP8[$event$i32$i + 13 >> 0] = 0;
       _SDL_PushEvent($event$i32$i) | 0;
      }
     } while (0);
     break;
    }
    $outputType1$i$i = $match$2$i + 16 | 0;
    $16 = HEAP32[$7 + 20 >> 2] | 0;
    if (($14 | 0) == (HEAP32[$outputType1$i$i >> 2] | 0)) if (($16 | 0) == (HEAP32[$match$2$i + 20 >> 2] | 0)) {
     $outputType$pre$phi$iZ2D = $outputType1$i$i;
     label = 43;
     break;
    }
    if (($14 | 0) == 2) {
     if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) {
      $outputType$pre$phi$iZ2D = $outputType1$i$i;
      label = 43;
      break;
     }
     HEAP32[$event$i32$i >> 2] = 1616;
     HEAP32[$event$i32$i + 8 >> 2] = HEAP32[HEAP32[$controllerlist$0135 >> 2] >> 2];
     HEAP8[$event$i32$i + 12 >> 0] = $16;
     HEAP16[$event$i32$i + 16 >> 1] = 0;
     _SDL_PushEvent($event$i32$i) | 0;
     $outputType$pre$phi$iZ2D = $outputType1$i$i;
     label = 43;
     break;
    }
    do if (($16 | 0) != -1) {
     HEAP32[$event$i32$i >> 2] = 1618;
     if (($16 | 0) == 5) {
      $call$i92$i = _SDL_GetTicks() | 0;
      $$pre$i99$i = HEAP32[$controllerlist$0135 >> 2] | 0;
      if ((250 - $call$i92$i + (HEAP32[$controllerlist$0135 + 28 >> 2] | 0) | 0) >= 1) if (!(HEAP32[$$pre$i99$i + 72 >> 2] | 0)) {
       HEAP32[$$pre$i99$i + 68 >> 2] = 1;
       break;
      }
      HEAP32[$$pre$i99$i + 68 >> 2] = 0;
     }
     if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[$event$i32$i + 8 >> 2] = HEAP32[HEAP32[$controllerlist$0135 >> 2] >> 2];
      HEAP8[$event$i32$i + 12 >> 0] = $16;
      HEAP8[$event$i32$i + 13 >> 0] = 0;
      _SDL_PushEvent($event$i32$i) | 0;
     }
    } while (0);
    $outputType$pre$phi$iZ2D = $outputType1$i$i;
    label = 43;
   } while (0);
   do if ((label | 0) == 43) {
    $32 = HEAP32[$match$2$i + 8 >> 2] | 0;
    if ((HEAP32[$outputType$pre$phi$iZ2D >> 2] | 0) != 2) {
     $39 = HEAP32[$match$2$i + 12 >> 2] | 0;
     $add100$i = (($39 - $32 | 0) / 2 | 0) + $32 | 0;
     _SDL_PrivateGameControllerButton($controllerlist$0135, HEAP32[$match$2$i + 20 >> 2] | 0, (($39 | 0) < ($32 | 0) ? ($add100$i | 0) >= ($conv3 | 0) : ($add100$i | 0) <= ($conv3 | 0)) & 1);
     break;
    }
    $33 = HEAP32[$match$2$i + 24 >> 2] | 0;
    $34 = HEAP32[$match$2$i + 12 >> 2] | 0;
    $35 = HEAP32[$match$2$i + 28 >> 2] | 0;
    if (($32 | 0) == ($33 | 0) & ($34 | 0) == ($35 | 0)) $value$addr$0$i = $conv3; else $value$addr$0$i = $33 + ~~(+($conv3 - $32 | 0) / +($34 - $32 | 0) * +($35 - $33 | 0)) | 0;
    $36 = HEAP32[$match$2$i + 20 >> 2] | 0;
    if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 == 1) {
     HEAP32[$event$i32$i >> 2] = 1616;
     HEAP32[$event$i32$i + 8 >> 2] = HEAP32[HEAP32[$controllerlist$0135 >> 2] >> 2];
     HEAP8[$event$i32$i + 12 >> 0] = $36;
     HEAP16[$event$i32$i + 16 >> 1] = $value$addr$0$i;
     _SDL_PushEvent($event$i32$i) | 0;
    }
   } while (0);
   HEAP32[(HEAP32[$last_match_axis$i >> 2] | 0) + ($conv << 2) >> 2] = $match$2$i;
   STACKTOP = sp;
   return 1;
  }
 case 1540:
 case 1539:
  {
   $controllerlist5$0136 = HEAP32[4706] | 0;
   if (!$controllerlist5$0136) {
    STACKTOP = sp;
    return 1;
   }
   $42 = HEAP32[$event + 8 >> 2] | 0;
   $controllerlist5$0138 = $controllerlist5$0136;
   while (1) {
    if ((HEAP32[HEAP32[$controllerlist5$0138 >> 2] >> 2] | 0) == ($42 | 0)) break;
    $controllerlist5$0 = HEAP32[$controllerlist5$0138 + 32 >> 2] | 0;
    if (!$controllerlist5$0) {
     label = 104;
     break;
    } else $controllerlist5$0138 = $controllerlist5$0;
   }
   if ((label | 0) == 104) {
    STACKTOP = sp;
    return 1;
   }
   $conv16 = HEAPU8[$event + 12 >> 0] | 0;
   $46 = HEAP8[$event + 13 >> 0] | 0;
   $47 = HEAP32[$controllerlist5$0138 + 12 >> 2] | 0;
   if (($47 | 0) <= 0) {
    STACKTOP = sp;
    return 1;
   }
   $48 = HEAP32[$controllerlist5$0138 + 16 >> 2] | 0;
   $i$018$i = 0;
   while (1) {
    if ((HEAP32[$48 + ($i$018$i << 5) >> 2] | 0) == 1) if ((HEAP32[$48 + ($i$018$i << 5) + 4 >> 2] | 0) == ($conv16 | 0)) break;
    $inc$i50 = $i$018$i + 1 | 0;
    if (($inc$i50 | 0) < ($47 | 0)) $i$018$i = $inc$i50; else {
     label = 104;
     break;
    }
   }
   if ((label | 0) == 104) {
    STACKTOP = sp;
    return 1;
   }
   if ((HEAP32[$48 + ($i$018$i << 5) + 16 >> 2] | 0) != 2) {
    _SDL_PrivateGameControllerButton($controllerlist5$0138, HEAP32[$48 + ($i$018$i << 5) + 20 >> 2] | 0, $46);
    STACKTOP = sp;
    return 1;
   }
   $cond$i = HEAP32[($46 << 24 >> 24 == 0 ? $48 + ($i$018$i << 5) + 24 | 0 : $48 + ($i$018$i << 5) + 28 | 0) >> 2] | 0;
   $52 = HEAP32[$48 + ($i$018$i << 5) + 20 >> 2] | 0;
   if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) {
    STACKTOP = sp;
    return 1;
   }
   HEAP32[$event$i32$i >> 2] = 1616;
   HEAP32[$event$i32$i + 8 >> 2] = HEAP32[HEAP32[$controllerlist5$0138 >> 2] >> 2];
   HEAP8[$event$i32$i + 12 >> 0] = $52;
   HEAP16[$event$i32$i + 16 >> 1] = $cond$i;
   _SDL_PushEvent($event$i32$i) | 0;
   STACKTOP = sp;
   return 1;
  }
 case 1538:
  {
   $controllerlist22$0139 = HEAP32[4706] | 0;
   if (!$controllerlist22$0139) {
    STACKTOP = sp;
    return 1;
   }
   $56 = HEAP32[$event + 8 >> 2] | 0;
   $controllerlist22$0141 = $controllerlist22$0139;
   while (1) {
    if ((HEAP32[HEAP32[$controllerlist22$0141 >> 2] >> 2] | 0) == ($56 | 0)) break;
    $controllerlist22$0 = HEAP32[$controllerlist22$0141 + 32 >> 2] | 0;
    if (!$controllerlist22$0) {
     label = 104;
     break;
    } else $controllerlist22$0141 = $controllerlist22$0;
   }
   if ((label | 0) == 104) {
    STACKTOP = sp;
    return 1;
   }
   $conv33 = HEAPU8[$event + 12 >> 0] | 0;
   $60 = HEAP8[$event + 13 >> 0] | 0;
   $last_hat_mask$i = $controllerlist22$0141 + 24 | 0;
   $conv1$i = $60 & 255;
   $num_bindings$i56 = $controllerlist22$0141 + 12 | 0;
   if ((HEAP32[$num_bindings$i56 >> 2] | 0) > 0) {
    $bindings$i58 = $controllerlist22$0141 + 16 | 0;
    $conv11$i59 = (HEAP8[(HEAP32[$last_hat_mask$i >> 2] | 0) + $conv33 >> 0] ^ $60) & 255;
    $which$i$i$i63 = $event$i32$i + 8 | 0;
    $axis4$i$i$i64 = $event$i32$i + 12 | 0;
    $value6$i$i$i65 = $event$i32$i + 16 | 0;
    $which$i$i69 = $event$i32$i + 8 | 0;
    $axis4$i$i70 = $event$i32$i + 12 | 0;
    $value6$i$i71 = $event$i32$i + 16 | 0;
    $guide_button_down$i37$i = $controllerlist22$0141 + 28 | 0;
    $which$i46$i = $event$i32$i + 8 | 0;
    $button34$i48$i = $event$i32$i + 12 | 0;
    $state36$i49$i = $event$i32$i + 13 | 0;
    $which$i28$i = $event$i32$i + 8 | 0;
    $button34$i$i73 = $event$i32$i + 12 | 0;
    $state36$i$i74 = $event$i32$i + 13 | 0;
    $i$054$i = 0;
    do {
     $64 = HEAP32[$bindings$i58 >> 2] | 0;
     do if ((HEAP32[$64 + ($i$054$i << 5) >> 2] | 0) == 3) if ((HEAP32[$64 + ($i$054$i << 5) + 4 >> 2] | 0) == ($conv33 | 0)) {
      $68 = HEAP32[$64 + ($i$054$i << 5) + 8 >> 2] | 0;
      if ($68 & $conv11$i59 | 0) {
       $cmp$i29$i = (HEAP32[$64 + ($i$054$i << 5) + 16 >> 2] | 0) == 2;
       $70 = HEAP32[$64 + ($i$054$i << 5) + 20 >> 2] | 0;
       if ($68 & $conv1$i | 0) {
        if ($cmp$i29$i) {
         $71 = HEAP32[$64 + ($i$054$i << 5) + 28 >> 2] | 0;
         if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) break;
         HEAP32[$event$i32$i >> 2] = 1616;
         HEAP32[$which$i$i69 >> 2] = HEAP32[HEAP32[$controllerlist22$0141 >> 2] >> 2];
         HEAP8[$axis4$i$i70 >> 0] = $70;
         HEAP16[$value6$i$i71 >> 1] = $71;
         _SDL_PushEvent($event$i32$i) | 0;
         break;
        }
        do if (($70 | 0) != -1) {
         HEAP32[$event$i32$i >> 2] = 1617;
         if (($70 | 0) == 5) {
          HEAP32[$guide_button_down$i37$i >> 2] = _SDL_GetTicks() | 0;
          if (HEAP32[(HEAP32[$controllerlist22$0141 >> 2] | 0) + 68 >> 2] | 0) break;
         }
         if ((_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) {
          HEAP32[$which$i28$i >> 2] = HEAP32[HEAP32[$controllerlist22$0141 >> 2] >> 2];
          HEAP8[$button34$i$i73 >> 0] = $70;
          HEAP8[$state36$i$i74 >> 0] = 1;
          _SDL_PushEvent($event$i32$i) | 0;
         }
        } while (0);
        break;
       }
       if ($cmp$i29$i) {
        if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) break;
        HEAP32[$event$i32$i >> 2] = 1616;
        HEAP32[$which$i$i$i63 >> 2] = HEAP32[HEAP32[$controllerlist22$0141 >> 2] >> 2];
        HEAP8[$axis4$i$i$i64 >> 0] = $70;
        HEAP16[$value6$i$i$i65 >> 1] = 0;
        _SDL_PushEvent($event$i32$i) | 0;
        break;
       }
       do if (($70 | 0) != -1) {
        HEAP32[$event$i32$i >> 2] = 1618;
        if (($70 | 0) == 5) {
         $call$i36$i = _SDL_GetTicks() | 0;
         $$pre$i$i110 = HEAP32[$controllerlist22$0141 >> 2] | 0;
         if ((250 - $call$i36$i + (HEAP32[$guide_button_down$i37$i >> 2] | 0) | 0) >= 1) if (!(HEAP32[$$pre$i$i110 + 72 >> 2] | 0)) {
          HEAP32[$$pre$i$i110 + 68 >> 2] = 1;
          break;
         }
         HEAP32[$$pre$i$i110 + 68 >> 2] = 0;
        }
        if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
         HEAP32[$which$i46$i >> 2] = HEAP32[HEAP32[$controllerlist22$0141 >> 2] >> 2];
         HEAP8[$button34$i48$i >> 0] = $70;
         HEAP8[$state36$i49$i >> 0] = 0;
         _SDL_PushEvent($event$i32$i) | 0;
        }
       } while (0);
      }
     } while (0);
     $i$054$i = $i$054$i + 1 | 0;
    } while (($i$054$i | 0) < (HEAP32[$num_bindings$i56 >> 2] | 0));
   }
   HEAP8[(HEAP32[$last_hat_mask$i >> 2] | 0) + $conv33 >> 0] = $60;
   STACKTOP = sp;
   return 1;
  }
 case 1541:
  {
   $which40 = $event + 8 | 0;
   if (!(_SDL_PrivateGetControllerMapping(HEAP32[$which40 >> 2] | 0) | 0)) {
    STACKTOP = sp;
    return 1;
   }
   HEAP32[$event$i32$i >> 2] = 1619;
   HEAP32[$event$i32$i + 8 >> 2] = HEAP32[$which40 >> 2];
   _SDL_PushEvent($event$i32$i) | 0;
   STACKTOP = sp;
   return 1;
  }
 case 1542:
  {
   $controllerlist50$0142 = HEAP32[4706] | 0;
   if (!$controllerlist50$0142) {
    STACKTOP = sp;
    return 1;
   }
   $88 = HEAP32[$event + 8 >> 2] | 0;
   $controllerlist50$0144 = $controllerlist50$0142;
   while (1) {
    if ((HEAP32[HEAP32[$controllerlist50$0144 >> 2] >> 2] | 0) == ($88 | 0)) break;
    $controllerlist50$0144 = HEAP32[$controllerlist50$0144 + 32 >> 2] | 0;
    if (!$controllerlist50$0144) {
     label = 104;
     break;
    }
   }
   if ((label | 0) == 104) {
    STACKTOP = sp;
    return 1;
   }
   HEAP32[$event$i32$i >> 2] = 1620;
   HEAP32[$event$i32$i + 8 >> 2] = $88;
   _SDL_PushEvent($event$i32$i) | 0;
   _UpdateEventsForDeviceRemoval();
   STACKTOP = sp;
   return 1;
  }
 default:
  {
   STACKTOP = sp;
   return 1;
  }
 }
 return 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0312 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0311 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk343 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd347 = 0, $fd56 = 0, $fd620 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[4741] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 L10 : do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!$and) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if ((HEAP32[4742] | 0) == ($add$ptr16 | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $27 = HEAP32[$head209 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[4739] = $add17;
   HEAP32[$head209 >> 2] = $27 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   $arrayidx = 18988 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($0 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[4737] = HEAP32[4737] & ~(1 << $shr);
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd67$pre$phiZ2D = $5 + 8 | 0; else {
    if ($0 >>> 0 > $5 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
   break;
  }
  $9 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx99;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if (!$16) {
     $arrayidx113 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx113 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx113;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx108;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($0 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   if ($0 >>> 0 > $11 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  } else {
   $18 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 19252 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx130 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4738] = HEAP32[4738] & ~(1 << $18);
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    }
   } else if ((HEAP32[4741] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx149 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0) ? $arrayidx149 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    } else break;
   } while (0);
   $23 = HEAP32[4741] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child171 = $add$ptr16 + 16 | 0;
   $24 = HEAP32[$child171 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child171 + 4 >> 2] | 0;
   if (!$25) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else if ((HEAP32[4741] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
  }
 } else {
  $28 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($28 >>> 0 >= $add$ptr6 >>> 0) _abort();
 $head231 = $add$ptr6 + 4 | 0;
 $29 = HEAP32[$head231 >> 2] | 0;
 if (!($29 & 1)) _abort();
 if (!($29 & 2)) {
  if ((HEAP32[4743] | 0) == ($add$ptr6 | 0)) {
   $add246 = (HEAP32[4740] | 0) + $psize$1 | 0;
   HEAP32[4740] = $add246;
   HEAP32[4743] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != (HEAP32[4742] | 0)) return;
   HEAP32[4742] = 0;
   HEAP32[4739] = 0;
   return;
  }
  if ((HEAP32[4742] | 0) == ($add$ptr6 | 0)) {
   $add258 = (HEAP32[4739] | 0) + $psize$1 | 0;
   HEAP32[4739] = $add258;
   HEAP32[4742] = $28;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$28 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($29 & -8) + $psize$1 | 0;
  $shr268 = $29 >>> 3;
  L111 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   $arrayidx279 = 18988 + ($shr268 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx279 | 0)) {
    if ((HEAP32[4741] | 0) >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[4737] = HEAP32[4737] & ~(1 << $shr268);
    break;
   }
   if (($36 | 0) == ($arrayidx279 | 0)) $fd322$pre$phiZ2D = $36 + 8 | 0; else {
    if ((HEAP32[4741] | 0) >>> 0 > $36 >>> 0) _abort();
    $fd311 = $36 + 8 | 0;
    if ((HEAP32[$fd311 >> 2] | 0) == ($add$ptr6 | 0)) $fd322$pre$phiZ2D = $fd311; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd322$pre$phiZ2D >> 2] = $35;
  } else {
   $42 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $43 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($43 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $48 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$48) {
     $49 = HEAP32[$child361 >> 2] | 0;
     if (!$49) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1$ph = $49;
      $RP360$1$ph = $child361;
     }
    } else {
     $R332$1$ph = $48;
     $RP360$1$ph = $arrayidx362;
    }
    $R332$1 = $R332$1$ph;
    $RP360$1 = $RP360$1$ph;
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $50 = HEAP32[$arrayidx374 >> 2] | 0;
     if (!$50) {
      $arrayidx379 = $R332$1 + 16 | 0;
      $51 = HEAP32[$arrayidx379 >> 2] | 0;
      if (!$51) break; else {
       $R332$1$be = $51;
       $RP360$1$be = $arrayidx379;
      }
     } else {
      $R332$1$be = $50;
      $RP360$1$be = $arrayidx374;
     }
     $R332$1 = $R332$1$be;
     $RP360$1 = $RP360$1$be;
    }
    if ((HEAP32[4741] | 0) >>> 0 > $RP360$1 >>> 0) _abort(); else {
     HEAP32[$RP360$1 >> 2] = 0;
     $R332$3 = $R332$1;
     break;
    }
   } else {
    $44 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    if ((HEAP32[4741] | 0) >>> 0 > $44 >>> 0) _abort();
    $bk343 = $44 + 12 | 0;
    if ((HEAP32[$bk343 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd347 = $43 + 8 | 0;
    if ((HEAP32[$fd347 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk343 >> 2] = $43;
     HEAP32[$fd347 >> 2] = $44;
     $R332$3 = $43;
     break;
    } else _abort();
   } while (0);
   if ($42 | 0) {
    $53 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 19252 + ($53 << 2) | 0;
    do if ((HEAP32[$arrayidx400 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[4738] = HEAP32[4738] & ~(1 << $53);
      break L111;
     }
    } else if ((HEAP32[4741] | 0) >>> 0 > $42 >>> 0) _abort(); else {
     $arrayidx419 = $42 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx419 >> 2] | 0) == ($add$ptr6 | 0) ? $arrayidx419 : $42 + 20 | 0) >> 2] = $R332$3;
     if (!$R332$3) break L111; else break;
    } while (0);
    $58 = HEAP32[4741] | 0;
    if ($58 >>> 0 > $R332$3 >>> 0) _abort();
    HEAP32[$R332$3 + 24 >> 2] = $42;
    $child443 = $add$ptr6 + 16 | 0;
    $59 = HEAP32[$child443 >> 2] | 0;
    do if ($59 | 0) if ($58 >>> 0 > $59 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 16 >> 2] = $59;
     HEAP32[$59 + 24 >> 2] = $R332$3;
     break;
    } while (0);
    $60 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($60 | 0) if ((HEAP32[4741] | 0) >>> 0 > $60 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 20 >> 2] = $60;
     HEAP32[$60 + 24 >> 2] = $R332$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$28 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[4742] | 0)) {
   HEAP32[4739] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $29 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$28 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 18988 + ($shr501 << 1 << 2) | 0;
  $63 = HEAP32[4737] | 0;
  $shl511 = 1 << $shr501;
  if (!($63 & $shl511)) {
   HEAP32[4737] = $63 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  } else {
   $64 = $arrayidx509 + 8 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if ((HEAP32[4741] | 0) >>> 0 > $65 >>> 0) _abort(); else {
    $$pre$phiZ2D = $64;
    $F510$0 = $65;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if (!$shr535) $I534$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 }
 $arrayidx567 = 19252 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $67 = HEAP32[4738] | 0;
 $shl573 = 1 << $I534$0;
 L197 : do if (!($67 & $shl573)) {
  HEAP32[4738] = $67 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $68 = HEAP32[$arrayidx567 >> 2] | 0;
  L200 : do if ((HEAP32[$68 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) $T$0$lcssa = $68; else {
   $K583$0312 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
   $T$0311 = $68;
   while (1) {
    $arrayidx599 = $T$0311 + 16 + ($K583$0312 >>> 31 << 2) | 0;
    $70 = HEAP32[$arrayidx599 >> 2] | 0;
    if (!$70) break;
    if ((HEAP32[$70 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
     $T$0$lcssa = $70;
     break L200;
    } else {
     $K583$0312 = $K583$0312 << 1;
     $T$0311 = $70;
    }
   }
   if ((HEAP32[4741] | 0) >>> 0 > $arrayidx599 >>> 0) _abort(); else {
    HEAP32[$arrayidx599 >> 2] = $p$1;
    HEAP32[$p$1 + 24 >> 2] = $T$0311;
    HEAP32[$p$1 + 12 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $p$1;
    break L197;
   }
  } while (0);
  $fd620 = $T$0$lcssa + 8 | 0;
  $73 = HEAP32[$fd620 >> 2] | 0;
  $74 = HEAP32[4741] | 0;
  if ($74 >>> 0 <= $73 >>> 0 & $74 >>> 0 <= $T$0$lcssa >>> 0) {
   HEAP32[$73 + 12 >> 2] = $p$1;
   HEAP32[$fd620 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $73;
   HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $dec = (HEAP32[4745] | 0) + -1 | 0;
 HEAP32[4745] = $dec;
 if ($dec | 0) return;
 $sp$0$in$i = 19404;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[4745] = -1;
 return;
}

function _LoadICOCUR_RW($src, $type) {
 $src = $src | 0;
 $type = $type | 0;
 var $1 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $29 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $ExpandBMP$0 = 0, $add$ptr = 0, $add$ptr138 = 0, $add$ptr138$us = 0, $add$ptr194 = 0, $add$ptr215 = 0, $add$ptr215$us = 0, $add$ptr237 = 0, $add$ptr237$us = 0, $bColorCount$0 = 0, $biBitCount$0 = 0, $bits$043 = 0, $bits$043$us = 0, $bits$137 = 0, $bits$137$us = 0, $call1 = 0, $call170 = 0, $call2 = 0, $call3 = 0, $call31 = 0, $call56 = 0, $call57 = 0, $call59 = 0, $call60 = 0, $call64 = 0, $call83 = 0, $cmp18140 = 0, $cmp24834 = 0, $cmp40 = 0, $conv10 = 0, $conv156 = 0, $conv156$us = 0, $div = 0, $div$us = 0, $h = 0, $i$049 = 0, $i$145 = 0, $i$239 = 0, $i$239$us = 0, $i$341 = 0, $i$341$us = 0, $i$433 = 0, $i$433$us = 0, $i$535 = 0, $icoOfs$047 = 0, $maxCol$048 = 0, $mul = 0, $mul193 = 0, $pad$0 = 0, $padbyte246 = 0, $palette = 0, $pitch = 0, $pixels = 0, $read = 0, $read$i = 0, $read168 = 0, $read226 = 0, $rem = 0, $rem114 = 0, $rem123 = 0, $rem197 = 0, $retval$0 = 0, $seek = 0, $spec$select10 = 0, $spec$select5 = 0, $sub140 = 0, $tobool178 = 0, $trunc = 0, $value$i19 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $w = 0, $w217 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 $vararg_buffer9 = sp + 1064 | 0;
 $vararg_buffer7 = sp + 1056 | 0;
 $vararg_buffer5 = sp + 1048 | 0;
 $vararg_buffer3 = sp + 1040 | 0;
 $vararg_buffer1 = sp + 1032 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $value$i19 = sp + 1069 | 0;
 $palette = sp;
 $padbyte246 = sp + 1068 | 0;
 if (!$src) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $seek = $src + 4 | 0;
 $1 = FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, 0, 0, 1) | 0;
 $2 = getTempRet0() | 0;
 _SDL_ClearError();
 $call1 = _SDL_ReadLE16($src) | 0;
 $call2 = _SDL_ReadLE16($src) | 0;
 $call3 = _SDL_ReadLE16($src) | 0;
 L4 : do if ($call1 << 16 >> 16 == 0 & ($call2 & 65535 | 0) == ($type | 0)) {
  $conv10 = $call3 & 65535;
  if (!($call3 << 16 >> 16)) label = 4; else {
   $read$i = $src + 8 | 0;
   $i$049 = 0;
   $icoOfs$047 = 0;
   $maxCol$048 = 0;
   while (1) {
    FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $value$i19, 1, 1) | 0;
    FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $value$i19, 1, 1) | 0;
    FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $value$i19, 1, 1) | 0;
    $6 = HEAP8[$value$i19 >> 0] | 0;
    FUNCTION_TABLE_iiiii[HEAP32[$read$i >> 2] & 7]($src, $value$i19, 1, 1) | 0;
    _SDL_ReadLE16($src) | 0;
    _SDL_ReadLE16($src) | 0;
    _SDL_ReadLE32($src) | 0;
    $call31 = _SDL_ReadLE32($src) | 0;
    $bColorCount$0 = $6 << 24 >> 24 == 0 ? 256 : $6 & 255;
    $cmp40 = ($bColorCount$0 | 0) > ($maxCol$048 | 0);
    $icoOfs$047 = $cmp40 ? $call31 : $icoOfs$047;
    $i$049 = $i$049 + 1 | 0;
    if (($i$049 | 0) == ($conv10 | 0)) break; else $maxCol$048 = $cmp40 ? $bColorCount$0 : $maxCol$048;
   }
   FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, $icoOfs$047, (($icoOfs$047 | 0) < 0) << 31 >> 31, 0) | 0;
   if ((getTempRet0() | 0) < 0) {
    _SDL_Error(3) | 0;
    break;
   }
   if ((_SDL_ReadLE32($src) | 0) != 40) {
    _SDL_SetError(4279, $vararg_buffer1) | 0;
    break;
   }
   $call56 = _SDL_ReadLE32($src) | 0;
   $call57 = _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE16($src) | 0;
   $call59 = _SDL_ReadLE16($src) | 0;
   $call60 = _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   $call64 = _SDL_ReadLE32($src) | 0;
   _SDL_ReadLE32($src) | 0;
   if (!(_SDL_strcmp(_SDL_GetError() | 0, 19444) | 0)) {
    if ($call60 | 0) {
     _SDL_SetError(4345, $vararg_buffer5) | 0;
     break;
    }
    switch ($call59 << 16 >> 16) {
    case 4:
    case 1:
     {
      $ExpandBMP$0 = $call59 & 65535;
      $biBitCount$0 = 8;
      break;
     }
    case 8:
     {
      $ExpandBMP$0 = 8;
      $biBitCount$0 = $call59;
      break;
     }
    case 32:
     {
      $ExpandBMP$0 = 0;
      $biBitCount$0 = 32;
      break;
     }
    default:
     {
      _SDL_SetError(4309, $vararg_buffer3) | 0;
      break L4;
     }
    }
    $call83 = _SDL_CreateRGBSurface(0, $call56, $call57 >> 1, 32, 16711680, 65280, 255, -16777216) | 0;
    if ($call83 | 0) {
     if (($biBitCount$0 & 65535) < 9) {
      $spec$select5 = ($call64 | 0) == 0 ? 1 << ($biBitCount$0 & 65535) : $call64;
      if (($spec$select5 | 0) > 0) {
       $read = $src + 8 | 0;
       $i$145 = 0;
       do {
        FUNCTION_TABLE_iiiii[HEAP32[$read >> 2] & 7]($src, $palette + ($i$145 << 2) | 0, 4, 1) | 0;
        $i$145 = $i$145 + 1 | 0;
       } while (($i$145 | 0) != ($spec$select5 | 0));
      }
     }
     $pixels = $call83 + 20 | 0;
     $14 = HEAP32[$pixels >> 2] | 0;
     $h = $call83 + 12 | 0;
     $pitch = $call83 + 16 | 0;
     $16 = HEAP32[$pitch >> 2] | 0;
     $mul = Math_imul($16, HEAP32[$h >> 2] | 0) | 0;
     $add$ptr = $14 + $mul | 0;
     $trunc = $ExpandBMP$0 & 65535;
     switch ($trunc << 16 >> 16) {
     case 1:
      {
       $rem = ($call56 + 7 >> 3 | 0) % 4 | 0;
       $pad$0 = ($rem | 0) == 0 ? 0 : 4 - $rem | 0;
       break;
      }
     case 4:
      {
       $rem114 = ($call56 + 1 >> 1 | 0) % 4 | 0;
       $pad$0 = ($rem114 | 0) == 0 ? 0 : 4 - $rem114 | 0;
       break;
      }
     case 8:
      {
       $rem123 = ($call56 | 0) % 4 | 0;
       $pad$0 = ($rem123 | 0) == 0 ? 0 : 4 - $rem123 | 0;
       break;
      }
     default:
      $pad$0 = 0;
     }
     L37 : do if (($mul | 0) > 0) {
      $read168 = $src + 8 | 0;
      $tobool178 = ($pad$0 | 0) == 0;
      $sub140 = 8 - $ExpandBMP$0 | 0;
      $w = $call83 + 8 | 0;
      $cmp18140 = ($pad$0 | 0) > 0;
      L39 : do if ($trunc << 16 >> 16 == 1) {
       $18 = $16;
       $bits$043$us = $add$ptr;
       while (1) {
        $add$ptr138$us = $bits$043$us + (0 - $18) | 0;
        HEAP8[$value$i19 >> 0] = 0;
        if ((HEAP32[$w >> 2] | 0) > 0) {
         $div$us = 8 / ($ExpandBMP$0 >>> 0) | 0;
         $60 = 0;
         $i$239$us = 0;
         do {
          if (!(($i$239$us >>> 0) % ($div$us >>> 0) | 0)) {
           if (!(FUNCTION_TABLE_iiiii[HEAP32[$read168 >> 2] & 7]($src, $value$i19, 1, 1) | 0)) break L39;
           $21 = HEAP8[$value$i19 >> 0] | 0;
          } else $21 = $60;
          $conv156$us = $21 & 255;
          HEAP32[$add$ptr138$us + ($i$239$us << 2) >> 2] = HEAP32[$palette + ($conv156$us >>> $sub140 << 2) >> 2];
          $60 = $conv156$us << $ExpandBMP$0 & 255;
          HEAP8[$value$i19 >> 0] = $60;
          $i$239$us = $i$239$us + 1 | 0;
         } while (($i$239$us | 0) < (HEAP32[$w >> 2] | 0));
        }
        if (!$tobool178) if ($cmp18140) {
         $i$341$us = 0;
         do {
          FUNCTION_TABLE_iiiii[HEAP32[$read168 >> 2] & 7]($src, $value$i19, 1, 1) | 0;
          $i$341$us = $i$341$us + 1 | 0;
         } while (($i$341$us | 0) != ($pad$0 | 0));
        }
        $25 = HEAP32[$pixels >> 2] | 0;
        if ($add$ptr138$us >>> 0 <= $25 >>> 0) {
         $38 = $25;
         label = 61;
         break L37;
        }
        $18 = HEAP32[$pitch >> 2] | 0;
        $bits$043$us = $add$ptr138$us;
       }
      } else {
       $26 = $16;
       $bits$043 = $add$ptr;
       L62 : while (1) {
        $add$ptr138 = $bits$043 + (0 - $26) | 0;
        switch ($trunc << 16 >> 16) {
        case 8:
        case 4:
        case 1:
         {
          HEAP8[$value$i19 >> 0] = 0;
          if ((HEAP32[$w >> 2] | 0) > 0) {
           $div = 8 / ($ExpandBMP$0 >>> 0) | 0;
           $61 = 0;
           $i$239 = 0;
           do {
            if (!(($i$239 >>> 0) % ($div >>> 0) | 0)) {
             if (!(FUNCTION_TABLE_iiiii[HEAP32[$read168 >> 2] & 7]($src, $value$i19, 1, 1) | 0)) break L39;
             $29 = HEAP8[$value$i19 >> 0] | 0;
            } else $29 = $61;
            $conv156 = $29 & 255;
            HEAP32[$add$ptr138 + ($i$239 << 2) >> 2] = HEAP32[$palette + ($conv156 >>> $sub140 << 2) >> 2];
            $61 = $conv156 << $ExpandBMP$0 & 255;
            HEAP8[$value$i19 >> 0] = $61;
            $i$239 = $i$239 + 1 | 0;
           } while (($i$239 | 0) < (HEAP32[$w >> 2] | 0));
          }
          break;
         }
        default:
         {
          $call170 = FUNCTION_TABLE_iiiii[HEAP32[$read168 >> 2] & 7]($src, $add$ptr138, 1, $26) | 0;
          if (($call170 | 0) != (HEAP32[$pitch >> 2] | 0)) break L62;
         }
        }
        if (!$tobool178) if ($cmp18140) {
         $i$341 = 0;
         do {
          FUNCTION_TABLE_iiiii[HEAP32[$read168 >> 2] & 7]($src, $value$i19, 1, 1) | 0;
          $i$341 = $i$341 + 1 | 0;
         } while (($i$341 | 0) != ($pad$0 | 0));
        }
        $35 = HEAP32[$pixels >> 2] | 0;
        if ($add$ptr138 >>> 0 <= $35 >>> 0) {
         $38 = $35;
         label = 61;
         break L37;
        }
        $26 = HEAP32[$pitch >> 2] | 0;
        $bits$043 = $add$ptr138;
       }
       _SDL_Error(1) | 0;
       label = 87;
       break L37;
      } while (0);
      _SDL_SetError(4380, $vararg_buffer9) | 0;
      FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, $1, $2, 0) | 0;
      getTempRet0() | 0;
     } else {
      $38 = $14;
      label = 61;
     } while (0);
     if ((label | 0) == 61) {
      $37 = HEAP32[$pitch >> 2] | 0;
      $mul193 = Math_imul($37, HEAP32[$h >> 2] | 0) | 0;
      $add$ptr194 = $38 + $mul193 | 0;
      $rem197 = ($call56 + 7 >> 3 | 0) % 4 | 0;
      $spec$select10 = ($rem197 | 0) == 0 ? 0 : 4 - $rem197 | 0;
      if (($mul193 | 0) <= 0) {
       $retval$0 = $call83;
       STACKTOP = sp;
       return $retval$0 | 0;
      }
      $w217 = $call83 + 8 | 0;
      $read226 = $src + 8 | 0;
      $cmp24834 = ($spec$select10 | 0) > 0;
      L93 : do if (!$spec$select10) {
       $39 = $37;
       $40 = HEAP32[$w217 >> 2] | 0;
       $62 = $38;
       $bits$137$us = $add$ptr194;
       while (1) {
        HEAP8[$value$i19 >> 0] = 0;
        $add$ptr215$us = $bits$137$us + (0 - $39) | 0;
        if (($40 | 0) > 0) {
         $64 = 0;
         $i$433$us = 0;
         do {
          if (!($i$433$us & 7)) {
           if (!(FUNCTION_TABLE_iiiii[HEAP32[$read226 >> 2] & 7]($src, $value$i19, 1, 1) | 0)) break L93;
           $43 = HEAP8[$value$i19 >> 0] | 0;
          } else $43 = $64;
          $add$ptr237$us = $add$ptr215$us + ($i$433$us << 2) | 0;
          HEAP32[$add$ptr237$us >> 2] = ($43 << 24 >> 24 < 0 ? 0 : -16777216) | HEAP32[$add$ptr237$us >> 2];
          $64 = ($43 & 255) << 1 & 255;
          HEAP8[$value$i19 >> 0] = $64;
          $i$433$us = $i$433$us + 1 | 0;
          $45 = HEAP32[$w217 >> 2] | 0;
         } while (($i$433$us | 0) < ($45 | 0));
         $41 = HEAP32[$pixels >> 2] | 0;
         $63 = $45;
        } else {
         $41 = $62;
         $63 = $40;
        }
        if ($add$ptr215$us >>> 0 <= $41 >>> 0) {
         $retval$0 = $call83;
         break;
        }
        $39 = HEAP32[$pitch >> 2] | 0;
        $40 = $63;
        $62 = $41;
        $bits$137$us = $add$ptr215$us;
       }
       STACKTOP = sp;
       return $retval$0 | 0;
      } else {
       $46 = $37;
       $bits$137 = $add$ptr194;
       while (1) {
        HEAP8[$value$i19 >> 0] = 0;
        $add$ptr215 = $bits$137 + (0 - $46) | 0;
        if ((HEAP32[$w217 >> 2] | 0) > 0) {
         $65 = 0;
         $i$433 = 0;
         do {
          if (!($i$433 & 7)) {
           if (!(FUNCTION_TABLE_iiiii[HEAP32[$read226 >> 2] & 7]($src, $value$i19, 1, 1) | 0)) break L93;
           $49 = HEAP8[$value$i19 >> 0] | 0;
          } else $49 = $65;
          $add$ptr237 = $add$ptr215 + ($i$433 << 2) | 0;
          HEAP32[$add$ptr237 >> 2] = ($49 << 24 >> 24 < 0 ? 0 : -16777216) | HEAP32[$add$ptr237 >> 2];
          $65 = ($49 & 255) << 1 & 255;
          HEAP8[$value$i19 >> 0] = $65;
          $i$433 = $i$433 + 1 | 0;
         } while (($i$433 | 0) < (HEAP32[$w217 >> 2] | 0));
        }
        if ($cmp24834) {
         $i$535 = 0;
         do {
          FUNCTION_TABLE_iiiii[HEAP32[$read226 >> 2] & 7]($src, $padbyte246, 1, 1) | 0;
          $i$535 = $i$535 + 1 | 0;
         } while (($i$535 | 0) != ($spec$select10 | 0));
        }
        if ($add$ptr215 >>> 0 <= (HEAP32[$pixels >> 2] | 0) >>> 0) {
         $retval$0 = $call83;
         break;
        }
        $46 = HEAP32[$pitch >> 2] | 0;
        $bits$137 = $add$ptr215;
       }
       STACKTOP = sp;
       return $retval$0 | 0;
      } while (0);
      _SDL_SetError(4380, $vararg_buffer7) | 0;
      label = 87;
     }
     if ((label | 0) == 87) {
      FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, $1, $2, 0) | 0;
      getTempRet0() | 0;
     }
     _SDL_FreeSurface($call83);
     $retval$0 = 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   }
  }
 } else label = 4; while (0);
 if ((label | 0) == 4) {
  HEAP32[$vararg_buffer >> 2] = ($type | 0) == 1 ? 4241 : 4245;
  _SDL_SetError(4249, $vararg_buffer) | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, $1, $2, 0) | 0;
 getTempRet0() | 0;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$013 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$012 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk340 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd635 = 0, $fd74 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  $2 = HEAP32[4741] | 0;
  if ($add$ptr5 >>> 0 < $2 >>> 0) _abort();
  if ((HEAP32[4742] | 0) == ($add$ptr5 | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $27 = HEAP32[$head201 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[4739] = $add6;
   HEAP32[$head201 >> 2] = $27 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   $arrayidx = 18988 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($2 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[4737] = HEAP32[4737] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd53$pre$phiZ2D = $5 + 8 | 0; else {
    if ($2 >>> 0 > $5 >>> 0) _abort();
    $fd43 = $5 + 8 | 0;
    if ((HEAP32[$fd43 >> 2] | 0) == ($add$ptr5 | 0)) $fd53$pre$phiZ2D = $fd43; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd53$pre$phiZ2D >> 2] = $4;
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
   break;
  }
  $9 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx86;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx95 >> 2] | 0;
    if (!$16) {
     $arrayidx100 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx100 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx100;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx95;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($2 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   if ($2 >>> 0 > $11 >>> 0) _abort();
   $bk70 = $11 + 12 | 0;
   if ((HEAP32[$bk70 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   $fd74 = $10 + 8 | 0;
   if ((HEAP32[$fd74 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$bk70 >> 2] = $10;
    HEAP32[$fd74 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  } else {
   $18 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 19252 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx118 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4738] = HEAP32[4738] & ~(1 << $18);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    }
   } else if ((HEAP32[4741] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx138 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx138 >> 2] | 0) == ($add$ptr5 | 0) ? $arrayidx138 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    } else break;
   } while (0);
   $23 = HEAP32[4741] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child161 = $add$ptr5 + 16 | 0;
   $24 = HEAP32[$child161 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child161 + 4 >> 2] | 0;
   if (!$25) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   } else if ((HEAP32[4741] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $28 = HEAP32[4741] | 0;
 if ($add$ptr >>> 0 < $28 >>> 0) _abort();
 $head223 = $add$ptr + 4 | 0;
 $29 = HEAP32[$head223 >> 2] | 0;
 if (!($29 & 2)) {
  if ((HEAP32[4743] | 0) == ($add$ptr | 0)) {
   $add230 = (HEAP32[4740] | 0) + $psize$addr$1 | 0;
   HEAP32[4740] = $add230;
   HEAP32[4743] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != (HEAP32[4742] | 0)) return;
   HEAP32[4742] = 0;
   HEAP32[4739] = 0;
   return;
  }
  if ((HEAP32[4742] | 0) == ($add$ptr | 0)) {
   $add248 = (HEAP32[4739] | 0) + $psize$addr$1 | 0;
   HEAP32[4739] = $add248;
   HEAP32[4742] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($29 & -8) + $psize$addr$1 | 0;
  $shr259 = $29 >>> 3;
  L99 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr + 12 >> 2] | 0;
   $arrayidx271 = 18988 + ($shr259 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx271 | 0)) {
    if ($28 >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[4737] = HEAP32[4737] & ~(1 << $shr259);
    break;
   }
   if (($36 | 0) == ($arrayidx271 | 0)) $fd318$pre$phiZ2D = $36 + 8 | 0; else {
    if ($28 >>> 0 > $36 >>> 0) _abort();
    $fd307 = $36 + 8 | 0;
    if ((HEAP32[$fd307 >> 2] | 0) == ($add$ptr | 0)) $fd318$pre$phiZ2D = $fd307; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd318$pre$phiZ2D >> 2] = $35;
  } else {
   $40 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $41 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($41 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $45 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$45) {
     $46 = HEAP32[$child358 >> 2] | 0;
     if (!$46) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1$ph = $46;
      $RP357$1$ph = $child358;
     }
    } else {
     $R328$1$ph = $45;
     $RP357$1$ph = $arrayidx359;
    }
    $R328$1 = $R328$1$ph;
    $RP357$1 = $RP357$1$ph;
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $47 = HEAP32[$arrayidx371 >> 2] | 0;
     if (!$47) {
      $arrayidx376 = $R328$1 + 16 | 0;
      $48 = HEAP32[$arrayidx376 >> 2] | 0;
      if (!$48) break; else {
       $R328$1$be = $48;
       $RP357$1$be = $arrayidx376;
      }
     } else {
      $R328$1$be = $47;
      $RP357$1$be = $arrayidx371;
     }
     $R328$1 = $R328$1$be;
     $RP357$1 = $RP357$1$be;
    }
    if ($28 >>> 0 > $RP357$1 >>> 0) _abort(); else {
     HEAP32[$RP357$1 >> 2] = 0;
     $R328$3 = $R328$1;
     break;
    }
   } else {
    $42 = HEAP32[$add$ptr + 8 >> 2] | 0;
    if ($28 >>> 0 > $42 >>> 0) _abort();
    $bk340 = $42 + 12 | 0;
    if ((HEAP32[$bk340 >> 2] | 0) != ($add$ptr | 0)) _abort();
    $fd344 = $41 + 8 | 0;
    if ((HEAP32[$fd344 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$bk340 >> 2] = $41;
     HEAP32[$fd344 >> 2] = $42;
     $R328$3 = $41;
     break;
    } else _abort();
   } while (0);
   if ($40 | 0) {
    $49 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 19252 + ($49 << 2) | 0;
    do if ((HEAP32[$arrayidx399 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[4738] = HEAP32[4738] & ~(1 << $49);
      break L99;
     }
    } else if ((HEAP32[4741] | 0) >>> 0 > $40 >>> 0) _abort(); else {
     $arrayidx420 = $40 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx420 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx420 : $40 + 20 | 0) >> 2] = $R328$3;
     if (!$R328$3) break L99; else break;
    } while (0);
    $54 = HEAP32[4741] | 0;
    if ($54 >>> 0 > $R328$3 >>> 0) _abort();
    HEAP32[$R328$3 + 24 >> 2] = $40;
    $child445 = $add$ptr + 16 | 0;
    $55 = HEAP32[$child445 >> 2] | 0;
    do if ($55 | 0) if ($54 >>> 0 > $55 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 16 >> 2] = $55;
     HEAP32[$55 + 24 >> 2] = $R328$3;
     break;
    } while (0);
    $56 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($56 | 0) if ((HEAP32[4741] | 0) >>> 0 > $56 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 20 >> 2] = $56;
     HEAP32[$56 + 24 >> 2] = $R328$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[4742] | 0)) {
   HEAP32[4739] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $29 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 18988 + ($shr507 << 1 << 2) | 0;
  $59 = HEAP32[4737] | 0;
  $shl519 = 1 << $shr507;
  if (!($59 & $shl519)) {
   HEAP32[4737] = $59 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  } else {
   $60 = $arrayidx516 + 8 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ((HEAP32[4741] | 0) >>> 0 > $61 >>> 0) _abort(); else {
    $$pre$phiZ2D = $60;
    $F517$0 = $61;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if (!$shr546) $I545$0 = 0; else if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 }
 $arrayidx579 = 19252 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $63 = HEAP32[4738] | 0;
 $shl586 = 1 << $I545$0;
 if (!($63 & $shl586)) {
  HEAP32[4738] = $63 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $64 = HEAP32[$arrayidx579 >> 2] | 0;
 L189 : do if ((HEAP32[$64 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) $T$0$lcssa = $64; else {
  $K597$013 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
  $T$012 = $64;
  while (1) {
   $arrayidx613 = $T$012 + 16 + ($K597$013 >>> 31 << 2) | 0;
   $66 = HEAP32[$arrayidx613 >> 2] | 0;
   if (!$66) break;
   if ((HEAP32[$66 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
    $T$0$lcssa = $66;
    break L189;
   } else {
    $K597$013 = $K597$013 << 1;
    $T$012 = $66;
   }
  }
  if ((HEAP32[4741] | 0) >>> 0 > $arrayidx613 >>> 0) _abort();
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$012;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } while (0);
 $fd635 = $T$0$lcssa + 8 | 0;
 $69 = HEAP32[$fd635 >> 2] | 0;
 $70 = HEAP32[4741] | 0;
 if (!($70 >>> 0 <= $69 >>> 0 & $70 >>> 0 <= $T$0$lcssa >>> 0)) _abort();
 HEAP32[$69 + 12 >> 2] = $p$addr$1;
 HEAP32[$fd635 >> 2] = $p$addr$1;
 HEAP32[$p$addr$1 + 8 >> 2] = $69;
 HEAP32[$p$addr$1 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$p$addr$1 + 24 >> 2] = 0;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $125 = 0, $127 = 0, $13 = 0, $135 = 0, $143 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $5 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $base$addr$1 = 0, $base$addr$1135 = 0, $base$addr$1136 = 0, $c$0 = 0, $c$1 = 0, $c$1137 = 0, $c$3185 = 0, $c$4$lcssa = 0, $c$6$lcssa = 0, $c$7168 = 0, $c$8 = 0, $cmp25 = 0, $cond = 0, $cond128 = 0, $cond162 = 0, $cond202 = 0, $cond233 = 0, $cond262 = 0, $cond301 = 0, $cond328 = 0, $cond44 = 0, $cond59 = 0, $conv176 = 0, $conv179159 = 0, $conv179162 = 0, $conv207152$pre$phiZ2D = 0, $conv238177 = 0, $conv238180 = 0, $conv267166$pre$phiZ2D = 0, $neg$0 = 0, $neg$1 = 0, $rpos = 0, $shend = 0, $spec$select132 = 0, $sub = 0, $sub111191 = 0, $sub111194 = 0, $sub131187 = 0, $tobool65 = 0, $x$0193 = 0, $x$1161 = 0, $x$2179 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $148 = 0;
  $149 = 0;
 } else {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $2 = HEAP32[$rpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $2 + 1;
    $cond = HEAPU8[$2 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L11 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub = (($cond | 0) == 45) << 31 >> 31;
    $5 = HEAP32[$rpos >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $5 + 1;
     $c$0 = HEAPU8[$5 >> 0] | 0;
     $neg$0 = $sub;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $sub;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $neg$0 = 0;
   }
  } while (0);
  $cmp25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $cond44 = HEAPU8[$10 >> 0] | 0;
   } else $cond44 = ___shgetc($f) | 0;
   if (($cond44 | 32 | 0) != 120) if ($cmp25) {
    $base$addr$1135 = 8;
    $c$1137 = $cond44;
    label = 47;
    break;
   } else {
    $base$addr$1 = $base;
    $c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $13 + 1;
    $cond59 = HEAPU8[$13 >> 0] | 0;
   } else $cond59 = ___shgetc($f) | 0;
   if ((HEAPU8[1649 + $cond59 >> 0] | 0) > 15) {
    $tobool65 = (HEAP32[$shend >> 2] | 0) == 0;
    if (!$tobool65) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0, 0);
     $148 = 0;
     $149 = 0;
     break L1;
    }
    if ($tobool65) {
     $148 = 0;
     $149 = 0;
     break L1;
    }
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $148 = 0;
    $149 = 0;
    break L1;
   } else {
    $base$addr$1135 = 16;
    $c$1137 = $cond59;
    label = 47;
   }
  } else {
   $spec$select132 = $cmp25 ? 10 : $base;
   if ($spec$select132 >>> 0 > (HEAPU8[1649 + $c$0 >> 0] | 0) >>> 0) {
    $base$addr$1 = $spec$select132;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    ___shlim($f, 0, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $148 = 0;
    $149 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($base$addr$1 | 0) == 10) {
   $sub111191 = $c$1 + -48 | 0;
   if ($sub111191 >>> 0 < 10) {
    $sub111194 = $sub111191;
    $x$0193 = 0;
    do {
     $x$0193 = ($x$0193 * 10 | 0) + $sub111194 | 0;
     $23 = HEAP32[$rpos >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $23 + 1;
      $cond128 = HEAPU8[$23 >> 0] | 0;
     } else $cond128 = ___shgetc($f) | 0;
     $sub111194 = $cond128 + -48 | 0;
    } while ($sub111194 >>> 0 < 10 & $x$0193 >>> 0 < 429496729);
    if ($sub111194 >>> 0 < 10) {
     $27 = $x$0193;
     $28 = 0;
     $c$3185 = $cond128;
     $sub131187 = $sub111194;
     while (1) {
      $29 = ___muldi3($27 | 0, $28 | 0, 10, 0) | 0;
      $30 = getTempRet0() | 0;
      $32 = (($sub131187 | 0) < 0) << 31 >> 31;
      $34 = ~$32;
      if ($30 >>> 0 > $34 >>> 0 | ($30 | 0) == ($34 | 0) & $29 >>> 0 > ~$sub131187 >>> 0) {
       $150 = $27;
       $151 = $28;
       $base$addr$1136 = 10;
       $c$8 = $c$3185;
       label = 76;
       break L43;
      }
      $27 = _i64Add($29 | 0, $30 | 0, $sub131187 | 0, $32 | 0) | 0;
      $28 = getTempRet0() | 0;
      $42 = HEAP32[$rpos >> 2] | 0;
      if ($42 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $42 + 1;
       $cond162 = HEAPU8[$42 >> 0] | 0;
      } else $cond162 = ___shgetc($f) | 0;
      $sub131187 = $cond162 + -48 | 0;
      if (!($sub131187 >>> 0 < 10 & ($28 >>> 0 < 429496729 | ($28 | 0) == 429496729 & $27 >>> 0 < 2576980378))) break; else $c$3185 = $cond162;
     }
     if ($sub131187 >>> 0 > 9) {
      $125 = $28;
      $127 = $27;
      $neg$1 = $neg$0;
     } else {
      $150 = $27;
      $151 = $28;
      $base$addr$1136 = 10;
      $c$8 = $cond162;
      label = 76;
     }
    } else {
     $125 = 0;
     $127 = $x$0193;
     $neg$1 = $neg$0;
    }
   } else {
    $125 = 0;
    $127 = 0;
    $neg$1 = $neg$0;
   }
  } else {
   $base$addr$1135 = $base$addr$1;
   $c$1137 = $c$1;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($base$addr$1135 + -1 & $base$addr$1135)) {
    $conv176 = HEAP8[6904 + (($base$addr$1135 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $51 = HEAP8[1649 + $c$1137 >> 0] | 0;
    $conv179159 = $51 & 255;
    if ($base$addr$1135 >>> 0 > $conv179159 >>> 0) {
     $conv179162 = $conv179159;
     $x$1161 = 0;
     do {
      $x$1161 = $conv179162 | $x$1161 << $conv176;
      $52 = HEAP32[$rpos >> 2] | 0;
      if ($52 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $52 + 1;
       $cond202 = HEAPU8[$52 >> 0] | 0;
      } else $cond202 = ___shgetc($f) | 0;
      $55 = HEAP8[1649 + $cond202 >> 0] | 0;
      $conv179162 = $55 & 255;
     } while ($x$1161 >>> 0 < 134217728 & $base$addr$1135 >>> 0 > $conv179162 >>> 0);
     $152 = $55;
     $60 = 0;
     $62 = $x$1161;
     $c$4$lcssa = $cond202;
     $conv207152$pre$phiZ2D = $conv179162;
    } else {
     $152 = $51;
     $60 = 0;
     $62 = 0;
     $c$4$lcssa = $c$1137;
     $conv207152$pre$phiZ2D = $conv179159;
    }
    $57 = _bitshift64Lshr(-1, -1, $conv176 | 0) | 0;
    $58 = getTempRet0() | 0;
    if ($base$addr$1135 >>> 0 <= $conv207152$pre$phiZ2D >>> 0 | ($58 >>> 0 < $60 >>> 0 | ($58 | 0) == ($60 | 0) & $57 >>> 0 < $62 >>> 0)) {
     $150 = $62;
     $151 = $60;
     $base$addr$1136 = $base$addr$1135;
     $c$8 = $c$4$lcssa;
     label = 76;
     break;
    }
    $66 = $62;
    $67 = $60;
    $71 = $152;
    while (1) {
     $68 = _bitshift64Shl($66 | 0, $67 | 0, $conv176 | 0) | 0;
     $69 = getTempRet0() | 0;
     $72 = $68 | $71 & 255;
     $73 = HEAP32[$rpos >> 2] | 0;
     if ($73 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $73 + 1;
      $cond233 = HEAPU8[$73 >> 0] | 0;
     } else $cond233 = ___shgetc($f) | 0;
     $71 = HEAP8[1649 + $cond233 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($71 & 255) >>> 0 | ($69 >>> 0 > $58 >>> 0 | ($69 | 0) == ($58 | 0) & $72 >>> 0 > $57 >>> 0)) {
      $150 = $72;
      $151 = $69;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond233;
      label = 76;
      break L63;
     } else {
      $66 = $72;
      $67 = $69;
     }
    }
   }
   $82 = HEAP8[1649 + $c$1137 >> 0] | 0;
   $conv238177 = $82 & 255;
   if ($base$addr$1135 >>> 0 > $conv238177 >>> 0) {
    $conv238180 = $conv238177;
    $x$2179 = 0;
    do {
     $x$2179 = $conv238180 + (Math_imul($x$2179, $base$addr$1135) | 0) | 0;
     $83 = HEAP32[$rpos >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $83 + 1;
      $cond262 = HEAPU8[$83 >> 0] | 0;
     } else $cond262 = ___shgetc($f) | 0;
     $86 = HEAP8[1649 + $cond262 >> 0] | 0;
     $conv238180 = $86 & 255;
    } while ($x$2179 >>> 0 < 119304647 & $base$addr$1135 >>> 0 > $conv238180 >>> 0);
    $153 = $86;
    $154 = $x$2179;
    $155 = 0;
    $c$6$lcssa = $cond262;
    $conv267166$pre$phiZ2D = $conv238180;
   } else {
    $153 = $82;
    $154 = 0;
    $155 = 0;
    $c$6$lcssa = $c$1137;
    $conv267166$pre$phiZ2D = $conv238177;
   }
   if ($base$addr$1135 >>> 0 > $conv267166$pre$phiZ2D >>> 0) {
    $88 = ___udivdi3(-1, -1, $base$addr$1135 | 0, 0) | 0;
    $89 = getTempRet0() | 0;
    $100 = $153;
    $91 = $155;
    $93 = $154;
    $c$7168 = $c$6$lcssa;
    while (1) {
     if ($91 >>> 0 > $89 >>> 0 | ($91 | 0) == ($89 | 0) & $93 >>> 0 > $88 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $97 = ___muldi3($93 | 0, $91 | 0, $base$addr$1135 | 0, 0) | 0;
     $98 = getTempRet0() | 0;
     $99 = $100 & 255;
     if ($98 >>> 0 > 4294967295 | ($98 | 0) == -1 & $97 >>> 0 > ~$99 >>> 0) {
      $150 = $93;
      $151 = $91;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $c$7168;
      label = 76;
      break L63;
     }
     $107 = _i64Add($97 | 0, $98 | 0, $99 | 0, 0) | 0;
     $108 = getTempRet0() | 0;
     $109 = HEAP32[$rpos >> 2] | 0;
     if ($109 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $109 + 1;
      $cond301 = HEAPU8[$109 >> 0] | 0;
     } else $cond301 = ___shgetc($f) | 0;
     $100 = HEAP8[1649 + $cond301 >> 0] | 0;
     if ($base$addr$1135 >>> 0 <= ($100 & 255) >>> 0) {
      $150 = $107;
      $151 = $108;
      $base$addr$1136 = $base$addr$1135;
      $c$8 = $cond301;
      label = 76;
      break;
     } else {
      $91 = $108;
      $93 = $107;
      $c$7168 = $cond301;
     }
    }
   } else {
    $150 = $154;
    $151 = $155;
    $base$addr$1136 = $base$addr$1135;
    $c$8 = $c$6$lcssa;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($base$addr$1136 >>> 0 > (HEAPU8[1649 + $c$8 >> 0] | 0) >>> 0) {
   do {
    $114 = HEAP32[$rpos >> 2] | 0;
    if ($114 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $114 + 1;
     $cond328 = HEAPU8[$114 >> 0] | 0;
    } else $cond328 = ___shgetc($f) | 0;
   } while ($base$addr$1136 >>> 0 > (HEAPU8[1649 + $cond328 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $125 = $1;
   $127 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $125 = $151;
   $127 = $150;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!($125 >>> 0 < $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $135 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $148 = getTempRet0() | 0;
    $149 = $135;
    break;
   }
   if ($125 >>> 0 > $1 >>> 0 | ($125 | 0) == ($1 | 0) & $127 >>> 0 > $0 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $148 = $1;
    $149 = $0;
    break;
   }
  }
  $143 = (($neg$1 | 0) < 0) << 31 >> 31;
  $146 = _i64Subtract($127 ^ $neg$1 | 0, $125 ^ $143 | 0, $neg$1 | 0, $143 | 0) | 0;
  $148 = getTempRet0() | 0;
  $149 = $146;
 } while (0);
 setTempRet0($148 | 0);
 return $149 | 0;
}

function _emscripten_webgl1_get_proc_address($name) {
 $name = $name | 0;
 var $retval$0 = 0, $tobool638 = 0;
 do if (!(_strcmp($name, 8747) | 0)) $retval$0 = 14; else if (!(_strcmp($name, 8763) | 0)) $retval$0 = 4; else if (!(_strcmp($name, 8778) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 8799) | 0)) $retval$0 = 5; else if (!(_strcmp($name, 8812) | 0)) $retval$0 = 6; else if (!(_strcmp($name, 8830) | 0)) $retval$0 = 7; else if (!(_strcmp($name, 8849) | 0)) $retval$0 = 8; else if (!(_strcmp($name, 8863) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 8876) | 0)) $retval$0 = 15; else if (!(_strcmp($name, 8892) | 0)) $retval$0 = 9; else if (!(_strcmp($name, 8916) | 0)) $retval$0 = 10; else if (!(_strcmp($name, 8928) | 0)) $retval$0 = 10; else if (!(_strcmp($name, 8948) | 0)) $retval$0 = 11; else if (!(_strcmp($name, 8961) | 0)) $retval$0 = 12; else if (!(_strcmp($name, 8977) | 0)) $retval$0 = 41; else if (!(_strcmp($name, 9002) | 0)) $retval$0 = 16; else if (!(_strcmp($name, 9010) | 0)) $retval$0 = 2; else if (!(_strcmp($name, 9023) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 9037) | 0)) $retval$0 = 17; else {
  if (!(_strcmp($name, 9052) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 9064) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 9080) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 9103) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 9129) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 9146) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 9166) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 9182) | 0)) {
   $retval$0 = 42;
   break;
  }
  if (!(_strcmp($name, 9197) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 9208) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 9224) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 9245) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 9261) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 9283) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 9298) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 9315) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 9327) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 9339) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 9353) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 9368) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 9378) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 9405) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 9418) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 9433) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 9442) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 9468) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 9477) | 0)) {
   $retval$0 = 5;
   break;
  }
  if (!(_strcmp($name, 9485) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 9511) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 9534) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 9546) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 9559) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 9576) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 9594) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 9613) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 9627) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 9645) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 9664) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 9685) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 9705) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 9719) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 9742) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 9753) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 9765) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 9803) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 9817) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 9832) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 9852) | 0)) {
   $retval$0 = 5;
   break;
  }
  if (!(_strcmp($name, 9881) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 9895) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 9914) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 9941) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 9959) | 0)) {
   $retval$0 = 43;
   break;
  }
  if (!(_strcmp($name, 9971) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 9991) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 10011) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 10026) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 10041) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 10062) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 10082) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 10102) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 10128) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 10135) | 0)) {
   $retval$0 = 44;
   break;
  }
  if (!(_strcmp($name, 10146) | 0)) {
   $retval$0 = 45;
   break;
  }
  if (!(_strcmp($name, 10158) | 0)) {
   $retval$0 = 46;
   break;
  }
  if (!(_strcmp($name, 10174) | 0)) {
   $retval$0 = 47;
   break;
  }
  if (!(_strcmp($name, 10186) | 0)) {
   $retval$0 = 48;
   break;
  }
  if (!(_strcmp($name, 10203) | 0)) {
   $retval$0 = 49;
   break;
  }
  if (!(_strcmp($name, 10214) | 0)) {
   $retval$0 = 50;
   break;
  }
  if (!(_strcmp($name, 10226) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 10238) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 10252) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 10266) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 10282) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 10295) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 10319) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 10341) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 10358) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 10368) | 0)) {
   $retval$0 = 5;
   break;
  }
  if (!(_strcmp($name, 10383) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 10398) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 10412) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 10434) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 10448) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 10470) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 10482) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 10502) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 10515) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 10531) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 10548) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 10564) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 10581) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 10597) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 10609) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 10622) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 10634) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 10647) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 10659) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 10672) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 10684) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 10697) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 10709) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 10722) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 10734) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 10747) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 10759) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 10772) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 10784) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 10797) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 10816) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 10835) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 10854) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 10867) | 0)) {
   $retval$0 = 33;
   break;
  }
  if (!(_strcmp($name, 10885) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 10902) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 10920) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 10937) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 10955) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 10972) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 10990) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 11007) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 11025) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 11047) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 11058) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 11074) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 11093) | 0)) {
   $retval$0 = 51;
   break;
  }
  if (!(_strcmp($name, 11106) | 0)) {
   $retval$0 = 33;
   break;
  }
  if (!(_strcmp($name, 11122) | 0)) {
   $retval$0 = 34;
   break;
  }
  if (!(_strcmp($name, 11136) | 0)) {
   $retval$0 = 34;
   break;
  }
  if (!(_strcmp($name, 11154) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 11170) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 11192) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 11215) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 11239) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 11264) | 0)) {
   $retval$0 = 35;
   break;
  }
  if (!(_strcmp($name, 11285) | 0)) {
   $retval$0 = 35;
   break;
  }
  if (!(_strcmp($name, 11309) | 0)) {
   $retval$0 = 36;
   break;
  }
  if (!(_strcmp($name, 11330) | 0)) {
   $retval$0 = 52;
   break;
  }
  if (!(_strcmp($name, 11349) | 0)) {
   $retval$0 = 37;
   break;
  }
  if (!(_strcmp($name, 11368) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 11395) | 0)) {
   $retval$0 = 7;
   break;
  }
  $tobool638 = (_strcmp($name, 11424) | 0) == 0;
  return ($tobool638 ? 3 : 0) | 0;
 } while (0);
 return $retval$0 | 0;
}

function _hexfloat($f, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$pre = 0, $0 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $55 = 0, $56 = 0, $6 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $80 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $cmp206 = 0, $cmp54 = 0, $cond29 = 0, $cond46 = 0, $conv241112 = 0.0, $conv253$pre$phiZ2D = 0.0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0, $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $mul143 = 0, $or$cond = 0, $or$cond103 = 0, $retval$0 = 0.0, $rpos = 0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub239111 = 0, $sub260 = 0.0, $tobool108 = 0, $tobool138 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, label = 0, $46$looptemp = 0, $47$looptemp = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $c$0$ph = HEAPU8[$0 >> 0] | 0;
 } else $c$0$ph = ___shgetc($f) | 0;
 $c$0 = $c$0$ph;
 $gotdig$0 = 0;
 L5 : while (1) {
  switch ($c$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $106 = 0;
    $107 = 0;
    $c$3$ph = $c$0;
    $gotdig$3$ph = $gotdig$0;
    $gotrad$1$ph = 0;
    break L5;
   }
  }
  $3 = HEAP32[$rpos >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $3 + 1;
   $c$0$be = HEAPU8[$3 >> 0] | 0;
  } else $c$0$be = ___shgetc($f) | 0;
  $c$0 = $c$0$be;
  $gotdig$0 = 1;
 }
 if ((label | 0) == 10) {
  $6 = HEAP32[$rpos >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $6 + 1;
   $cond29 = HEAPU8[$6 >> 0] | 0;
  } else $cond29 = ___shgetc($f) | 0;
  if (($cond29 | 0) == 48) {
   $12 = 0;
   $13 = 0;
   while (1) {
    $9 = HEAP32[$rpos >> 2] | 0;
    if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $9 + 1;
     $cond46 = HEAPU8[$9 >> 0] | 0;
    } else $cond46 = ___shgetc($f) | 0;
    $14 = _i64Add($12 | 0, $13 | 0, -1, -1) | 0;
    $15 = getTempRet0() | 0;
    if (($cond46 | 0) == 48) {
     $12 = $14;
     $13 = $15;
    } else {
     $106 = $14;
     $107 = $15;
     $c$3$ph = $cond46;
     $gotdig$3$ph = 1;
     $gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;
   $107 = 0;
   $c$3$ph = $cond29;
   $gotdig$3$ph = $gotdig$0;
   $gotrad$1$ph = 1;
  }
 }
 $17 = 0;
 $19 = 0;
 $38 = $106;
 $40 = $107;
 $c$3 = $c$3$ph;
 $gotdig$3 = $gotdig$3$ph;
 $gotrad$1 = $gotrad$1$ph;
 $gottail$0 = 0;
 $scale$0 = 1.0;
 $x$0 = 0;
 $y$0 = 0.0;
 while (1) {
  $sub = $c$3 + -48 | 0;
  $$pre = $c$3 | 32;
  if ($sub >>> 0 < 10) label = 24; else {
   $cmp54 = ($c$3 | 0) == 46;
   if (!($cmp54 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) if (!$gotrad$1) {
    $108 = $19;
    $109 = $17;
    $110 = $19;
    $111 = $17;
    $gotdig$4 = $gotdig$3;
    $gotrad$2 = 1;
    $gottail$2 = $gottail$0;
    $scale$2 = $scale$0;
    $x$2 = $x$0;
    $y$2 = $y$0;
   } else {
    $c$3$lcssa = 46;
    break;
   } else label = 24;
  }
  if ((label | 0) == 24) {
   label = 0;
   $d$0 = ($c$3 | 0) > 57 ? $$pre + -87 | 0 : $sub;
   do if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
    $gottail$1 = $gottail$0;
    $scale$1 = $scale$0;
    $x$1 = $d$0 + ($x$0 << 4) | 0;
    $y$1 = $y$0;
   } else if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 14) {
    $div = $scale$0 * .0625;
    $gottail$1 = $gottail$0;
    $scale$1 = $div;
    $x$1 = $x$0;
    $y$1 = $y$0 + $div * +($d$0 | 0);
    break;
   } else {
    $or$cond = ($gottail$0 | 0) != 0 | ($d$0 | 0) == 0;
    $gottail$1 = $or$cond ? $gottail$0 : 1;
    $scale$1 = $scale$0;
    $x$1 = $x$0;
    $y$1 = $or$cond ? $y$0 : $y$0 + $scale$0 * .5;
    break;
   } while (0);
   $28 = _i64Add($19 | 0, $17 | 0, 1, 0) | 0;
   $108 = $38;
   $109 = $40;
   $110 = $28;
   $111 = getTempRet0() | 0;
   $gotdig$4 = 1;
   $gotrad$2 = $gotrad$1;
   $gottail$2 = $gottail$1;
   $scale$2 = $scale$1;
   $x$2 = $x$1;
   $y$2 = $y$1;
  }
  $30 = HEAP32[$rpos >> 2] | 0;
  if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $30 + 1;
   $c$3$be = HEAPU8[$30 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
  $17 = $111;
  $19 = $110;
  $38 = $108;
  $40 = $109;
  $c$3 = $c$3$be;
  $gotdig$3 = $gotdig$4;
  $gotrad$1 = $gotrad$2;
  $gottail$0 = $gottail$2;
  $scale$0 = $scale$2;
  $x$0 = $x$2;
  $y$0 = $y$2;
 }
 do if (!$gotdig$3) {
  $tobool108 = (HEAP32[$shend >> 2] | 0) == 0;
  if (!$tobool108) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!$pok) ___shlim($f, 0, 0); else if (!$tobool108) {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (!(($gotrad$1 | 0) == 0 | $tobool108)) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  }
  $retval$0 = +($sign | 0) * 0.0;
 } else {
  $tobool138 = ($gotrad$1 | 0) == 0;
  $37 = $tobool138 ? $19 : $38;
  $39 = $tobool138 ? $17 : $40;
  if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
   $46 = $19;
   $47 = $17;
   $x$3125 = $x$0;
   while (1) {
    $mul143 = $x$3125 << 4;
    $46$looptemp = $46;
    $46 = _i64Add($46 | 0, $47 | 0, 1, 0) | 0;
    $47$looptemp = $47;
    $47 = getTempRet0() | 0;
    if (!(($47$looptemp | 0) < 0 | ($47$looptemp | 0) == 0 & $46$looptemp >>> 0 < 7)) {
     $x$3$lcssa = $mul143;
     break;
    } else $x$3125 = $mul143;
   }
  } else $x$3$lcssa = $x$0;
  if (($c$3$lcssa | 32 | 0) == 112) {
   $55 = _scanexp($f, $pok) | 0;
   $56 = getTempRet0() | 0;
   if (($55 | 0) == 0 & ($56 | 0) == -2147483648) {
    if (!$pok) {
     ___shlim($f, 0, 0);
     $retval$0 = 0.0;
     break;
    }
    if (!(HEAP32[$shend >> 2] | 0)) {
     $68 = 0;
     $69 = 0;
    } else {
     HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $68 = 0;
     $69 = 0;
    }
   } else {
    $68 = $55;
    $69 = $56;
   }
  } else if (!(HEAP32[$shend >> 2] | 0)) {
   $68 = 0;
   $69 = 0;
  } else {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   $68 = 0;
   $69 = 0;
  }
  $64 = _bitshift64Shl($37 | 0, $39 | 0, 2) | 0;
  $66 = _i64Add($64 | 0, getTempRet0() | 0, -32, -1) | 0;
  $70 = _i64Add($66 | 0, getTempRet0() | 0, $68 | 0, $69 | 0) | 0;
  $71 = getTempRet0() | 0;
  if (!$x$3$lcssa) {
   $retval$0 = +($sign | 0) * 0.0;
   break;
  }
  $sub182 = 0 - $emin | 0;
  $73 = (($sub182 | 0) < 0) << 31 >> 31;
  if (($71 | 0) > ($73 | 0) | ($71 | 0) == ($73 | 0) & $70 >>> 0 > $sub182 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $retval$0 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub192 = $emin + -106 | 0;
  $80 = (($sub192 | 0) < 0) << 31 >> 31;
  if (($71 | 0) < ($80 | 0) | ($71 | 0) == ($80 | 0) & $70 >>> 0 < $sub192 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $retval$0 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($x$3$lcssa | 0) > -1) {
   $86 = $70;
   $87 = $71;
   $x$4119 = $x$3$lcssa;
   $y$3120 = $y$0;
   while (1) {
    $cmp206 = !($y$3120 >= .5);
    $x$5 = $x$4119 << 1 | ($cmp206 ^ 1) & 1;
    $y$4 = $y$3120 + ($cmp206 ? $y$3120 : $y$3120 + -1.0);
    $88 = _i64Add($86 | 0, $87 | 0, -1, -1) | 0;
    $89 = getTempRet0() | 0;
    if (($x$5 | 0) > -1) {
     $86 = $88;
     $87 = $89;
     $x$4119 = $x$5;
     $y$3120 = $y$4;
    } else {
     $96 = $88;
     $97 = $89;
     $x$4$lcssa = $x$5;
     $y$3$lcssa = $y$4;
     break;
    }
   }
  } else {
   $96 = $70;
   $97 = $71;
   $x$4$lcssa = $x$3$lcssa;
   $y$3$lcssa = $y$0;
  }
  $91 = (($bits | 0) < 0) << 31 >> 31;
  $94 = _i64Subtract(32, 0, $emin | 0, (($emin | 0) < 0) << 31 >> 31 | 0) | 0;
  $98 = _i64Add($94 | 0, getTempRet0() | 0, $96 | 0, $97 | 0) | 0;
  $99 = getTempRet0() | 0;
  if (($99 | 0) < ($91 | 0) | ($99 | 0) == ($91 | 0) & $98 >>> 0 < $bits >>> 0) if (($98 | 0) > 0) {
   $bits$addr$0 = $98;
   label = 65;
  } else {
   $bits$addr$0110 = 0;
   $sub239111 = 84;
   label = 67;
  } else {
   $bits$addr$0 = $bits;
   label = 65;
  }
  if ((label | 0) == 65) if (($bits$addr$0 | 0) < 53) {
   $bits$addr$0110 = $bits$addr$0;
   $sub239111 = 84 - $bits$addr$0 | 0;
   label = 67;
  } else {
   $bias$0 = 0.0;
   $bits$addr$0109 = $bits$addr$0;
   $conv253$pre$phiZ2D = +($sign | 0);
  }
  if ((label | 0) == 67) {
   $conv241112 = +($sign | 0);
   $bias$0 = +_copysignl(+_scalbn(1.0, $sub239111), $conv241112);
   $bits$addr$0109 = $bits$addr$0110;
   $conv253$pre$phiZ2D = $conv241112;
  }
  $or$cond103 = ($x$4$lcssa & 1 | 0) == 0 & ($y$3$lcssa != 0.0 & ($bits$addr$0109 | 0) < 32);
  $sub260 = ($or$cond103 ? 0.0 : $y$3$lcssa) * $conv253$pre$phiZ2D + ($bias$0 + $conv253$pre$phiZ2D * +(($x$4$lcssa + ($or$cond103 & 1) | 0) >>> 0)) - $bias$0;
  if (!($sub260 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
  $retval$0 = +_scalbnl($sub260, $96);
 } while (0);
 return +$retval$0;
}
function _SDL_UpdateFullscreenMode($window, $fullscreen) {
 $window = $window | 0;
 $fullscreen = $fullscreen | 0;
 var $25 = 0, $26 = 0, $3 = 0, $34 = 0, $35 = 0, $6 = 0, $call$i54 = 0, $call$i58 = 0, $call$i58$us = 0, $current_mode$i79 = 0, $current_mode31$i = 0, $current_mode31$i81 = 0, $desktop_mode$i = 0, $desktop_mode$i80 = 0, $display_mode$i78 = 0, $flags69 = 0, $fullscreen_mode = 0, $fullscreen_window = 0, $other$0$lcssa106 = 0, $other$0107 = 0, $other$0109 = 0, $other$0109$us = 0, $resized$0 = 0, $retval$0$i = 0, $retval$0$i63 = 0, $retval$0$i63$us = 0, $retval$2$ph = 0, $retval$5 = 0, $tobool6 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $w = 0, $w60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $display_mode$i78 = sp + 84 | 0;
 $current_mode$i79 = sp + 64 | 0;
 $fullscreen_mode = sp + 44 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  $retval$5 = -1;
  STACKTOP = sp;
  return $retval$5 | 0;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  $tobool6 = ($fullscreen | 0) != 0;
  if ($tobool6 & (HEAP32[$window + 116 >> 2] | 0) != 0) {
   $retval$5 = 0;
   STACKTOP = sp;
   return $retval$5 | 0;
  }
  $call$i54 = _SDL_GetWindowDisplayIndex($window) | 0;
  if (($call$i54 | 0) > -1) $retval$0$i = (HEAP32[76] | 0) + ($call$i54 * 72 | 0) | 0; else $retval$0$i = 0;
  $fullscreen_window = $retval$0$i + 60 | 0;
  do if ($tobool6) {
   $3 = HEAP32[$fullscreen_window >> 2] | 0;
   if (!(($3 | 0) == 0 | ($3 | 0) == ($window | 0))) {
    if (!0) {
     _SDL_SetError(4403, $vararg_buffer3) | 0;
     break;
    }
    if ((HEAP32[$3 >> 2] | 0) != (316 | 0)) {
     _SDL_SetError(4444, $vararg_buffer5) | 0;
     break;
    }
    if (!(HEAP32[$3 + 48 >> 2] & 64)) {
     _SDL_UpdateFullscreenMode($3, 0) | 0;
     $6 = HEAP32[25] | 0;
     if ($6 | 0) FUNCTION_TABLE_vii[$6 & 63](0, $3);
    }
   }
  } while (0);
  if (((HEAP32[$fullscreen_window >> 2] | 0) == ($window | 0) | 0) == ($fullscreen | 0)) if (!((HEAP32[$window + 48 >> 2] ^ HEAP32[$window + 52 >> 2]) & 4097)) {
   $retval$5 = 0;
   STACKTOP = sp;
   return $retval$5 | 0;
  }
  $other$0107 = HEAP32[77] | 0;
  L30 : do if ($other$0107 | 0) {
   L32 : do if (!$fullscreen) {
    $other$0109$us = $other$0107;
    while (1) {
     if (($other$0109$us | 0) != ($window | 0)) if ((HEAP32[$other$0109$us + 48 >> 2] & 69 | 0) == 5) {
      $call$i58$us = _SDL_GetWindowDisplayIndex($other$0109$us) | 0;
      if (($call$i58$us | 0) > -1) $retval$0$i63$us = (HEAP32[76] | 0) + ($call$i58$us * 72 | 0) | 0; else $retval$0$i63$us = 0;
      if (($retval$0$i63$us | 0) == ($retval$0$i | 0)) {
       _SDL_memset($fullscreen_mode, 0, 20) | 0;
       if (!(_SDL_GetWindowDisplayMode($other$0109$us, $fullscreen_mode) | 0)) {
        $other$0$lcssa106 = $other$0109$us;
        break L32;
       }
      }
     }
     $other$0109$us = HEAP32[$other$0109$us + 152 >> 2] | 0;
     if (!$other$0109$us) break L30;
    }
   } else {
    $other$0109 = $other$0107;
    while (1) {
     if (($other$0109 | 0) == ($window | 0)) label = 37; else if ((HEAP32[$other$0109 + 48 >> 2] & 69 | 0) == 5) {
      $call$i58 = _SDL_GetWindowDisplayIndex($other$0109) | 0;
      if (($call$i58 | 0) > -1) $retval$0$i63 = (HEAP32[76] | 0) + ($call$i58 * 72 | 0) | 0; else $retval$0$i63 = 0;
      if (($retval$0$i63 | 0) == ($retval$0$i | 0)) label = 37;
     }
     if ((label | 0) == 37) {
      label = 0;
      _SDL_memset($fullscreen_mode, 0, 20) | 0;
      if (!(_SDL_GetWindowDisplayMode($other$0109, $fullscreen_mode) | 0)) {
       $other$0$lcssa106 = $other$0109;
       break L32;
      }
     }
     $other$0109 = HEAP32[$other$0109 + 152 >> 2] | 0;
     if (!$other$0109) break L30;
    }
   } while (0);
   $w = $other$0$lcssa106 + 24 | 0;
   $w60 = $fullscreen_mode + 4 | 0;
   if ((HEAP32[$w >> 2] | 0) == (HEAP32[$w60 >> 2] | 0)) $resized$0 = (HEAP32[$other$0$lcssa106 + 28 >> 2] | 0) != (HEAP32[$fullscreen_mode + 8 >> 2] | 0) & 1; else $resized$0 = 1;
   $flags69 = $window + 48 | 0;
   L62 : do if ((HEAP32[$flags69 >> 2] & 4097 | 0) == 4097) {
    $desktop_mode$i = $retval$0$i + 16 | 0;
    HEAP32[$display_mode$i78 >> 2] = HEAP32[$desktop_mode$i >> 2];
    HEAP32[$display_mode$i78 + 4 >> 2] = HEAP32[$desktop_mode$i + 4 >> 2];
    HEAP32[$display_mode$i78 + 8 >> 2] = HEAP32[$desktop_mode$i + 8 >> 2];
    HEAP32[$display_mode$i78 + 12 >> 2] = HEAP32[$desktop_mode$i + 12 >> 2];
    HEAP32[$display_mode$i78 + 16 >> 2] = HEAP32[$desktop_mode$i + 16 >> 2];
    $current_mode31$i = $retval$0$i + 36 | 0;
    HEAP32[$current_mode$i79 >> 2] = HEAP32[$current_mode31$i >> 2];
    HEAP32[$current_mode$i79 + 4 >> 2] = HEAP32[$current_mode31$i + 4 >> 2];
    HEAP32[$current_mode$i79 + 8 >> 2] = HEAP32[$current_mode31$i + 8 >> 2];
    HEAP32[$current_mode$i79 + 12 >> 2] = HEAP32[$current_mode31$i + 12 >> 2];
    HEAP32[$current_mode$i79 + 16 >> 2] = HEAP32[$current_mode31$i + 16 >> 2];
    do if (_SDL_memcmp($display_mode$i78, $current_mode$i79, 20) | 0) {
     $25 = HEAP32[8] | 0;
     if (!$25) if ((_SDL_SetError(5206, $vararg_buffer7) | 0) < 0) {
      $retval$2$ph = -1;
      break L62;
     } else {
      label = 49;
      break L62;
     }
     if ((FUNCTION_TABLE_iiii[$25 & 15](0, $retval$0$i, $display_mode$i78) | 0) < 0) {
      $retval$2$ph = -1;
      break L62;
     } else {
      HEAP32[$current_mode31$i >> 2] = HEAP32[$display_mode$i78 >> 2];
      HEAP32[$current_mode31$i + 4 >> 2] = HEAP32[$display_mode$i78 + 4 >> 2];
      HEAP32[$current_mode31$i + 8 >> 2] = HEAP32[$display_mode$i78 + 8 >> 2];
      HEAP32[$current_mode31$i + 12 >> 2] = HEAP32[$display_mode$i78 + 12 >> 2];
      HEAP32[$current_mode31$i + 16 >> 2] = HEAP32[$display_mode$i78 + 16 >> 2];
      break;
     }
    } while (0);
    label = 49;
   } else if ((_SDL_SetDisplayModeForDisplay($retval$0$i, $fullscreen_mode) | 0) < 0) $retval$2$ph = -1; else label = 49; while (0);
   if ((label | 0) == 49) {
    $26 = HEAP32[29] | 0;
    if ($26 | 0) FUNCTION_TABLE_viiii[$26 & 63](0, $other$0$lcssa106, $retval$0$i, 1);
    HEAP32[$fullscreen_window >> 2] = $other$0$lcssa106;
    if (!$resized$0) {
     HEAP32[$other$0$lcssa106 + 112 >> 2] = 0;
     _SDL_SendWindowEvent($other$0$lcssa106, 6, HEAP32[$w >> 2] | 0, HEAP32[$other$0$lcssa106 + 28 >> 2] | 0) | 0;
    } else _SDL_SendWindowEvent($other$0$lcssa106, 5, HEAP32[$w60 >> 2] | 0, HEAP32[$fullscreen_mode + 8 >> 2] | 0) | 0;
    if ((_SDL_GetMouseFocus() | 0) == ($other$0$lcssa106 | 0)) {
     _SDL_GetMouseState($display_mode$i78, $current_mode$i79) | 0;
     _SDL_WarpMouseInWindow($other$0$lcssa106, HEAP32[$display_mode$i78 >> 2] | 0, HEAP32[$current_mode$i79 >> 2] | 0);
    }
    HEAP32[$window + 52 >> 2] = HEAP32[$flags69 >> 2];
    $retval$2$ph = 0;
   }
   $retval$5 = $retval$2$ph;
   STACKTOP = sp;
   return $retval$5 | 0;
  } while (0);
  $desktop_mode$i80 = $retval$0$i + 16 | 0;
  HEAP32[$display_mode$i78 >> 2] = HEAP32[$desktop_mode$i80 >> 2];
  HEAP32[$display_mode$i78 + 4 >> 2] = HEAP32[$desktop_mode$i80 + 4 >> 2];
  HEAP32[$display_mode$i78 + 8 >> 2] = HEAP32[$desktop_mode$i80 + 8 >> 2];
  HEAP32[$display_mode$i78 + 12 >> 2] = HEAP32[$desktop_mode$i80 + 12 >> 2];
  HEAP32[$display_mode$i78 + 16 >> 2] = HEAP32[$desktop_mode$i80 + 16 >> 2];
  $current_mode31$i81 = $retval$0$i + 36 | 0;
  HEAP32[$current_mode$i79 >> 2] = HEAP32[$current_mode31$i81 >> 2];
  HEAP32[$current_mode$i79 + 4 >> 2] = HEAP32[$current_mode31$i81 + 4 >> 2];
  HEAP32[$current_mode$i79 + 8 >> 2] = HEAP32[$current_mode31$i81 + 8 >> 2];
  HEAP32[$current_mode$i79 + 12 >> 2] = HEAP32[$current_mode31$i81 + 12 >> 2];
  HEAP32[$current_mode$i79 + 16 >> 2] = HEAP32[$current_mode31$i81 + 16 >> 2];
  do if (_SDL_memcmp($display_mode$i78, $current_mode$i79, 20) | 0) {
   $34 = HEAP32[8] | 0;
   if (!$34) {
    _SDL_SetError(5206, $vararg_buffer9) | 0;
    break;
   }
   if ((FUNCTION_TABLE_iiii[$34 & 15](0, $retval$0$i, $display_mode$i78) | 0) >= 0) {
    HEAP32[$current_mode31$i81 >> 2] = HEAP32[$display_mode$i78 >> 2];
    HEAP32[$current_mode31$i81 + 4 >> 2] = HEAP32[$display_mode$i78 + 4 >> 2];
    HEAP32[$current_mode31$i81 + 8 >> 2] = HEAP32[$display_mode$i78 + 8 >> 2];
    HEAP32[$current_mode31$i81 + 12 >> 2] = HEAP32[$display_mode$i78 + 12 >> 2];
    HEAP32[$current_mode31$i81 + 16 >> 2] = HEAP32[$display_mode$i78 + 16 >> 2];
   }
  } while (0);
  $35 = HEAP32[29] | 0;
  if ($35 | 0) FUNCTION_TABLE_viiii[$35 & 63](0, $window, $retval$0$i, 0);
  HEAP32[$fullscreen_window >> 2] = 0;
  HEAP32[$window + 112 >> 2] = 0;
  _SDL_SendWindowEvent($window, 6, HEAP32[$window + 24 >> 2] | 0, HEAP32[$window + 28 >> 2] | 0) | 0;
  if ((_SDL_GetMouseFocus() | 0) == ($window | 0)) {
   _SDL_GetMouseState($display_mode$i78, $current_mode$i79) | 0;
   _SDL_WarpMouseInWindow($window, HEAP32[$display_mode$i78 >> 2] | 0, HEAP32[$current_mode$i79 >> 2] | 0);
  }
  HEAP32[$window + 52 >> 2] = HEAP32[$window + 48 >> 2];
  $retval$5 = 0;
  STACKTOP = sp;
  return $retval$5 | 0;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 $retval$5 = -1;
 STACKTOP = sp;
 return $retval$5 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function _twoway_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $12 = 0, $14 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add13165 = 0, $add46157 = 0, $add90 = 0, $add99 = 0, $arrayidx8 = 0, $byteset = 0, $call108 = 0, $cmp156 = 0, $cmp160 = 0, $cmp85 = 0, $cond162 = 0, $conv125 = 0, $conv5 = 0, $h$addr$0 = 0, $inc177 = 0, $ip$0$lcssa179 = 0, $ip$0161 = 0, $ip$1 = 0, $ip$2$ip$0 = 0, $ip$2$lcssa = 0, $ip$2153 = 0, $ip$3 = 0, $jp$0162 = 0, $jp$1 = 0, $jp$2154 = 0, $jp$3 = 0, $k$0163 = 0, $k$1 = 0, $k$2155 = 0, $k$3 = 0, $k$4$sink = 0, $k$5148 = 0, $k$6150 = 0, $l$0$lcssa176178 = 0, $l$0169 = 0, $mem$0 = 0, $mem$0$be = 0, $mem0$0 = 0, $or107 = 0, $p$0$lcssa180 = 0, $p$0164 = 0, $p$1 = 0, $p$2$lcssa = 0, $p$2$p$0 = 0, $p$2156 = 0, $p$3 = 0, $p$5 = 0, $retval$3 = 0, $shift = 0, $sub$ptr$rhs$cast = 0, $sub101 = 0, $sub123 = 0, $sub139 = 0, $sub148$pre$phiZ2D = 0, $sub94 = 0, $tobool142 = 0, $z$0 = 0, $z$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $byteset = sp + 1024 | 0;
 $shift = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$n >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) {
  $ip$0$lcssa179 = -1;
  $ip$2$lcssa = -1;
  $l$0$lcssa176178 = 0;
  $p$0$lcssa180 = 1;
  $p$2$lcssa = 1;
  label = 25;
 } else {
  $2 = $0;
  $l$0169 = 0;
  do {
   if (!(HEAP8[$h + $l$0169 >> 0] | 0)) {
    $retval$3 = 0;
    break L1;
   }
   $conv5 = $2 & 255;
   $arrayidx8 = $byteset + ($conv5 >>> 5 << 2) | 0;
   HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv5 & 31);
   $l$0169 = $l$0169 + 1 | 0;
   HEAP32[$shift + ($conv5 << 2) >> 2] = $l$0169;
   $2 = HEAP8[$n + $l$0169 >> 0] | 0;
  } while ($2 << 24 >> 24 != 0);
  $cmp160 = $l$0169 >>> 0 > 1;
  if ($cmp160) {
   $add13165 = 1;
   $ip$0161 = -1;
   $jp$0162 = 0;
   $k$0163 = 1;
   $p$0164 = 1;
   while (1) {
    $5 = HEAP8[$n + ($k$0163 + $ip$0161) >> 0] | 0;
    $6 = HEAP8[$n + $add13165 >> 0] | 0;
    do if ($5 << 24 >> 24 == $6 << 24 >> 24) if (($k$0163 | 0) == ($p$0164 | 0)) {
     $ip$1 = $ip$0161;
     $jp$1 = $p$0164 + $jp$0162 | 0;
     $k$1 = 1;
     $p$1 = $p$0164;
     break;
    } else {
     $ip$1 = $ip$0161;
     $jp$1 = $jp$0162;
     $k$1 = $k$0163 + 1 | 0;
     $p$1 = $p$0164;
     break;
    } else if (($5 & 255) > ($6 & 255)) {
     $ip$1 = $ip$0161;
     $jp$1 = $add13165;
     $k$1 = 1;
     $p$1 = $add13165 - $ip$0161 | 0;
     break;
    } else {
     $ip$1 = $jp$0162;
     $jp$1 = $jp$0162 + 1 | 0;
     $k$1 = 1;
     $p$1 = 1;
     break;
    } while (0);
    $add13165 = $k$1 + $jp$1 | 0;
    if ($add13165 >>> 0 >= $l$0169 >>> 0) break; else {
     $ip$0161 = $ip$1;
     $jp$0162 = $jp$1;
     $k$0163 = $k$1;
     $p$0164 = $p$1;
    }
   }
   if ($cmp160) {
    $add46157 = 1;
    $ip$2153 = -1;
    $jp$2154 = 0;
    $k$2155 = 1;
    $p$2156 = 1;
    while (1) {
     $7 = HEAP8[$n + ($k$2155 + $ip$2153) >> 0] | 0;
     $8 = HEAP8[$n + $add46157 >> 0] | 0;
     do if ($7 << 24 >> 24 == $8 << 24 >> 24) if (($k$2155 | 0) == ($p$2156 | 0)) {
      $ip$3 = $ip$2153;
      $jp$3 = $p$2156 + $jp$2154 | 0;
      $k$3 = 1;
      $p$3 = $p$2156;
      break;
     } else {
      $ip$3 = $ip$2153;
      $jp$3 = $jp$2154;
      $k$3 = $k$2155 + 1 | 0;
      $p$3 = $p$2156;
      break;
     } else if (($7 & 255) < ($8 & 255)) {
      $ip$3 = $ip$2153;
      $jp$3 = $add46157;
      $k$3 = 1;
      $p$3 = $add46157 - $ip$2153 | 0;
      break;
     } else {
      $ip$3 = $jp$2154;
      $jp$3 = $jp$2154 + 1 | 0;
      $k$3 = 1;
      $p$3 = 1;
      break;
     } while (0);
     $add46157 = $k$3 + $jp$3 | 0;
     if ($add46157 >>> 0 >= $l$0169 >>> 0) {
      $ip$0$lcssa179 = $ip$1;
      $ip$2$lcssa = $ip$3;
      $l$0$lcssa176178 = $l$0169;
      $p$0$lcssa180 = $p$1;
      $p$2$lcssa = $p$3;
      label = 25;
      break;
     } else {
      $ip$2153 = $ip$3;
      $jp$2154 = $jp$3;
      $k$2155 = $k$3;
      $p$2156 = $p$3;
     }
    }
   } else {
    $ip$0$lcssa179 = $ip$1;
    $ip$2$lcssa = -1;
    $l$0$lcssa176178 = $l$0169;
    $p$0$lcssa180 = $p$1;
    $p$2$lcssa = 1;
    label = 25;
   }
  } else {
   $ip$0$lcssa179 = -1;
   $ip$2$lcssa = -1;
   $l$0$lcssa176178 = $l$0169;
   $p$0$lcssa180 = 1;
   $p$2$lcssa = 1;
   label = 25;
  }
 } while (0);
 L34 : do if ((label | 0) == 25) {
  $cmp85 = ($ip$2$lcssa + 1 | 0) >>> 0 > ($ip$0$lcssa179 + 1 | 0) >>> 0;
  $p$2$p$0 = $cmp85 ? $p$2$lcssa : $p$0$lcssa180;
  $ip$2$ip$0 = $cmp85 ? $ip$2$lcssa : $ip$0$lcssa179;
  $add90 = $ip$2$ip$0 + 1 | 0;
  if (!(_memcmp($n, $n + $p$2$p$0 | 0, $add90) | 0)) {
   $sub101 = $l$0$lcssa176178 - $p$2$p$0 | 0;
   $mem0$0 = $sub101;
   $p$5 = $p$2$p$0;
   $sub148$pre$phiZ2D = $sub101;
  } else {
   $sub94 = $l$0$lcssa176178 - $ip$2$ip$0 + -1 | 0;
   $add99 = ($ip$2$ip$0 >>> 0 > $sub94 >>> 0 ? $ip$2$ip$0 : $sub94) + 1 | 0;
   $mem0$0 = 0;
   $p$5 = $add99;
   $sub148$pre$phiZ2D = $l$0$lcssa176178 - $add99 | 0;
  }
  $or107 = $l$0$lcssa176178 | 63;
  $sub123 = $l$0$lcssa176178 + -1 | 0;
  $tobool142 = ($mem0$0 | 0) != 0;
  $h$addr$0 = $h;
  $mem$0 = 0;
  $z$0 = $h;
  while (1) {
   $sub$ptr$rhs$cast = $h$addr$0;
   do if (($z$0 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
    $call108 = _memchr($z$0, 0, $or107) | 0;
    if (!$call108) {
     $z$3 = $z$0 + $or107 | 0;
     break;
    } else if (($call108 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
     $retval$3 = 0;
     break L34;
    } else {
     $z$3 = $call108;
     break;
    }
   } else $z$3 = $z$0; while (0);
   $conv125 = HEAPU8[$h$addr$0 + $sub123 >> 0] | 0;
   L48 : do if (!(1 << ($conv125 & 31) & HEAP32[$byteset + ($conv125 >>> 5 << 2) >> 2])) {
    $k$4$sink = $l$0$lcssa176178;
    $mem$0$be = 0;
   } else {
    $sub139 = $l$0$lcssa176178 - (HEAP32[$shift + ($conv125 << 2) >> 2] | 0) | 0;
    if ($sub139 | 0) {
     $k$4$sink = $tobool142 & ($mem$0 | 0) != 0 & $sub139 >>> 0 < $p$5 >>> 0 ? $sub148$pre$phiZ2D : $sub139;
     $mem$0$be = 0;
     break;
    }
    $cmp156 = $add90 >>> 0 > $mem$0 >>> 0;
    $cond162 = $cmp156 ? $add90 : $mem$0;
    $12 = HEAP8[$n + $cond162 >> 0] | 0;
    L53 : do if ($12 << 24 >> 24) {
     $14 = $12;
     $k$5148 = $cond162;
     while (1) {
      if ($14 << 24 >> 24 != (HEAP8[$h$addr$0 + $k$5148 >> 0] | 0)) break;
      $inc177 = $k$5148 + 1 | 0;
      $14 = HEAP8[$n + $inc177 >> 0] | 0;
      if (!($14 << 24 >> 24)) break L53; else $k$5148 = $inc177;
     }
     $k$4$sink = $k$5148 - $ip$2$ip$0 | 0;
     $mem$0$be = 0;
     break L48;
    } while (0);
    if (!$cmp156) {
     $retval$3 = $h$addr$0;
     break L34;
    }
    $k$6150 = $add90;
    while (1) {
     $k$6150 = $k$6150 + -1 | 0;
     if ((HEAP8[$n + $k$6150 >> 0] | 0) != (HEAP8[$h$addr$0 + $k$6150 >> 0] | 0)) {
      $k$4$sink = $p$5;
      $mem$0$be = $mem0$0;
      break L48;
     }
     if ($k$6150 >>> 0 <= $mem$0 >>> 0) {
      $retval$3 = $h$addr$0;
      break L34;
     }
    }
   } while (0);
   $h$addr$0 = $h$addr$0 + $k$4$sink | 0;
   $mem$0 = $mem$0$be;
   $z$0 = $z$3;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($agg$result, $m1, $m2) {
 $agg$result = $agg$result | 0;
 $m1 = $m1 | 0;
 $m2 = $m2 | 0;
 var $0 = 0, $SrcA0$sroa$0$0$copyload = 0.0, $SrcA0$sroa$11$0$copyload = 0.0, $SrcA0$sroa$15$0$copyload = 0.0, $SrcA0$sroa$7$0$copyload = 0.0, $SrcA1$sroa$0$0$copyload = 0.0, $SrcA1$sroa$11$0$copyload = 0.0, $SrcA1$sroa$15$0$copyload = 0.0, $SrcA1$sroa$7$0$copyload = 0.0, $SrcA2$sroa$0$0$copyload = 0.0, $SrcA2$sroa$11$0$copyload = 0.0, $SrcA2$sroa$15$0$copyload = 0.0, $SrcA2$sroa$7$0$copyload = 0.0, $SrcA3$sroa$0$0$copyload = 0.0, $SrcA3$sroa$11$0$copyload = 0.0, $SrcA3$sroa$15$0$copyload = 0.0, $SrcA3$sroa$7$0$copyload = 0.0, $SrcB0$sroa$0$0$copyload = 0.0, $SrcB0$sroa$4$0$copyload = 0.0, $SrcB0$sroa$5$0$copyload = 0.0, $SrcB0$sroa$6$0$copyload = 0.0, $SrcB1$sroa$0$0$copyload = 0.0, $SrcB1$sroa$4$0$copyload = 0.0, $SrcB1$sroa$5$0$copyload = 0.0, $SrcB1$sroa$6$0$copyload = 0.0, $SrcB2$sroa$0$0$copyload = 0.0, $SrcB2$sroa$4$0$copyload = 0.0, $SrcB2$sroa$5$0$copyload = 0.0, $SrcB2$sroa$6$0$copyload = 0.0, $SrcB3$sroa$0$0$copyload = 0.0, $SrcB3$sroa$4$0$copyload = 0.0, $SrcB3$sroa$5$0$copyload = 0.0, $SrcB3$sroa$6$0$copyload = 0.0;
 $SrcA0$sroa$0$0$copyload = +HEAPF32[$m1 >> 2];
 $SrcA0$sroa$7$0$copyload = +HEAPF32[$m1 + 4 >> 2];
 $SrcA0$sroa$11$0$copyload = +HEAPF32[$m1 + 8 >> 2];
 $SrcA0$sroa$15$0$copyload = +HEAPF32[$m1 + 12 >> 2];
 $SrcA1$sroa$0$0$copyload = +HEAPF32[$m1 + 16 >> 2];
 $SrcA1$sroa$7$0$copyload = +HEAPF32[$m1 + 20 >> 2];
 $SrcA1$sroa$11$0$copyload = +HEAPF32[$m1 + 24 >> 2];
 $SrcA1$sroa$15$0$copyload = +HEAPF32[$m1 + 28 >> 2];
 $SrcA2$sroa$0$0$copyload = +HEAPF32[$m1 + 32 >> 2];
 $SrcA2$sroa$7$0$copyload = +HEAPF32[$m1 + 36 >> 2];
 $SrcA2$sroa$11$0$copyload = +HEAPF32[$m1 + 40 >> 2];
 $SrcA2$sroa$15$0$copyload = +HEAPF32[$m1 + 44 >> 2];
 $SrcA3$sroa$0$0$copyload = +HEAPF32[$m1 + 48 >> 2];
 $SrcA3$sroa$7$0$copyload = +HEAPF32[$m1 + 52 >> 2];
 $SrcA3$sroa$11$0$copyload = +HEAPF32[$m1 + 56 >> 2];
 $SrcA3$sroa$15$0$copyload = +HEAPF32[$m1 + 60 >> 2];
 $SrcB0$sroa$0$0$copyload = +HEAPF32[$m2 >> 2];
 $SrcB0$sroa$4$0$copyload = +HEAPF32[$m2 + 4 >> 2];
 $SrcB0$sroa$5$0$copyload = +HEAPF32[$m2 + 8 >> 2];
 $SrcB0$sroa$6$0$copyload = +HEAPF32[$m2 + 12 >> 2];
 $SrcB1$sroa$0$0$copyload = +HEAPF32[$m2 + 16 >> 2];
 $SrcB1$sroa$4$0$copyload = +HEAPF32[$m2 + 20 >> 2];
 $SrcB1$sroa$5$0$copyload = +HEAPF32[$m2 + 24 >> 2];
 $SrcB1$sroa$6$0$copyload = +HEAPF32[$m2 + 28 >> 2];
 $SrcB2$sroa$0$0$copyload = +HEAPF32[$m2 + 32 >> 2];
 $SrcB2$sroa$4$0$copyload = +HEAPF32[$m2 + 36 >> 2];
 $SrcB2$sroa$5$0$copyload = +HEAPF32[$m2 + 40 >> 2];
 $SrcB2$sroa$6$0$copyload = +HEAPF32[$m2 + 44 >> 2];
 $SrcB3$sroa$0$0$copyload = +HEAPF32[$m2 + 48 >> 2];
 $SrcB3$sroa$4$0$copyload = +HEAPF32[$m2 + 52 >> 2];
 $SrcB3$sroa$5$0$copyload = +HEAPF32[$m2 + 56 >> 2];
 $SrcB3$sroa$6$0$copyload = +HEAPF32[$m2 + 60 >> 2];
 $0 = $agg$result + 32 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAPF32[$agg$result >> 2] = $SrcA0$sroa$0$0$copyload * $SrcB0$sroa$0$0$copyload + $SrcA1$sroa$0$0$copyload * $SrcB0$sroa$4$0$copyload + $SrcA2$sroa$0$0$copyload * $SrcB0$sroa$5$0$copyload + $SrcA3$sroa$0$0$copyload * $SrcB0$sroa$6$0$copyload;
 HEAPF32[$agg$result + 4 >> 2] = $SrcA0$sroa$7$0$copyload * $SrcB0$sroa$0$0$copyload + $SrcA1$sroa$7$0$copyload * $SrcB0$sroa$4$0$copyload + $SrcA2$sroa$7$0$copyload * $SrcB0$sroa$5$0$copyload + $SrcA3$sroa$7$0$copyload * $SrcB0$sroa$6$0$copyload;
 HEAPF32[$agg$result + 8 >> 2] = $SrcA0$sroa$11$0$copyload * $SrcB0$sroa$0$0$copyload + $SrcA1$sroa$11$0$copyload * $SrcB0$sroa$4$0$copyload + $SrcA2$sroa$11$0$copyload * $SrcB0$sroa$5$0$copyload + $SrcA3$sroa$11$0$copyload * $SrcB0$sroa$6$0$copyload;
 HEAPF32[$agg$result + 12 >> 2] = $SrcA0$sroa$15$0$copyload * $SrcB0$sroa$0$0$copyload + $SrcA1$sroa$15$0$copyload * $SrcB0$sroa$4$0$copyload + $SrcA2$sroa$15$0$copyload * $SrcB0$sroa$5$0$copyload + $SrcA3$sroa$15$0$copyload * $SrcB0$sroa$6$0$copyload;
 HEAPF32[$agg$result + 16 >> 2] = $SrcA0$sroa$0$0$copyload * $SrcB1$sroa$0$0$copyload + $SrcA1$sroa$0$0$copyload * $SrcB1$sroa$4$0$copyload + $SrcA2$sroa$0$0$copyload * $SrcB1$sroa$5$0$copyload + $SrcA3$sroa$0$0$copyload * $SrcB1$sroa$6$0$copyload;
 HEAPF32[$agg$result + 20 >> 2] = $SrcA0$sroa$7$0$copyload * $SrcB1$sroa$0$0$copyload + $SrcA1$sroa$7$0$copyload * $SrcB1$sroa$4$0$copyload + $SrcA2$sroa$7$0$copyload * $SrcB1$sroa$5$0$copyload + $SrcA3$sroa$7$0$copyload * $SrcB1$sroa$6$0$copyload;
 HEAPF32[$agg$result + 24 >> 2] = $SrcA0$sroa$11$0$copyload * $SrcB1$sroa$0$0$copyload + $SrcA1$sroa$11$0$copyload * $SrcB1$sroa$4$0$copyload + $SrcA2$sroa$11$0$copyload * $SrcB1$sroa$5$0$copyload + $SrcA3$sroa$11$0$copyload * $SrcB1$sroa$6$0$copyload;
 HEAPF32[$agg$result + 28 >> 2] = $SrcA0$sroa$15$0$copyload * $SrcB1$sroa$0$0$copyload + $SrcA1$sroa$15$0$copyload * $SrcB1$sroa$4$0$copyload + $SrcA2$sroa$15$0$copyload * $SrcB1$sroa$5$0$copyload + $SrcA3$sroa$15$0$copyload * $SrcB1$sroa$6$0$copyload;
 HEAPF32[$agg$result + 32 >> 2] = $SrcA0$sroa$0$0$copyload * $SrcB2$sroa$0$0$copyload + $SrcA1$sroa$0$0$copyload * $SrcB2$sroa$4$0$copyload + $SrcA2$sroa$0$0$copyload * $SrcB2$sroa$5$0$copyload + $SrcA3$sroa$0$0$copyload * $SrcB2$sroa$6$0$copyload;
 HEAPF32[$agg$result + 36 >> 2] = $SrcA0$sroa$7$0$copyload * $SrcB2$sroa$0$0$copyload + $SrcA1$sroa$7$0$copyload * $SrcB2$sroa$4$0$copyload + $SrcA2$sroa$7$0$copyload * $SrcB2$sroa$5$0$copyload + $SrcA3$sroa$7$0$copyload * $SrcB2$sroa$6$0$copyload;
 HEAPF32[$agg$result + 40 >> 2] = $SrcA0$sroa$11$0$copyload * $SrcB2$sroa$0$0$copyload + $SrcA1$sroa$11$0$copyload * $SrcB2$sroa$4$0$copyload + $SrcA2$sroa$11$0$copyload * $SrcB2$sroa$5$0$copyload + $SrcA3$sroa$11$0$copyload * $SrcB2$sroa$6$0$copyload;
 HEAPF32[$agg$result + 44 >> 2] = $SrcA0$sroa$15$0$copyload * $SrcB2$sroa$0$0$copyload + $SrcA1$sroa$15$0$copyload * $SrcB2$sroa$4$0$copyload + $SrcA2$sroa$15$0$copyload * $SrcB2$sroa$5$0$copyload + $SrcA3$sroa$15$0$copyload * $SrcB2$sroa$6$0$copyload;
 HEAPF32[$agg$result + 48 >> 2] = $SrcA0$sroa$0$0$copyload * $SrcB3$sroa$0$0$copyload + $SrcA1$sroa$0$0$copyload * $SrcB3$sroa$4$0$copyload + $SrcA2$sroa$0$0$copyload * $SrcB3$sroa$5$0$copyload + $SrcA3$sroa$0$0$copyload * $SrcB3$sroa$6$0$copyload;
 HEAPF32[$agg$result + 52 >> 2] = $SrcA0$sroa$7$0$copyload * $SrcB3$sroa$0$0$copyload + $SrcA1$sroa$7$0$copyload * $SrcB3$sroa$4$0$copyload + $SrcA2$sroa$7$0$copyload * $SrcB3$sroa$5$0$copyload + $SrcA3$sroa$7$0$copyload * $SrcB3$sroa$6$0$copyload;
 HEAPF32[$agg$result + 56 >> 2] = $SrcA0$sroa$11$0$copyload * $SrcB3$sroa$0$0$copyload + $SrcA1$sroa$11$0$copyload * $SrcB3$sroa$4$0$copyload + $SrcA2$sroa$11$0$copyload * $SrcB3$sroa$5$0$copyload + $SrcA3$sroa$11$0$copyload * $SrcB3$sroa$6$0$copyload;
 HEAPF32[$agg$result + 60 >> 2] = $SrcA0$sroa$15$0$copyload * $SrcB3$sroa$0$0$copyload + $SrcA1$sroa$15$0$copyload * $SrcB3$sroa$4$0$copyload + $SrcA2$sroa$15$0$copyload * $SrcB3$sroa$5$0$copyload + $SrcA3$sroa$15$0$copyload * $SrcB3$sroa$6$0$copyload;
 return;
}

function _SDL_PrivateSendMouseMotion($window, $mouseID, $relative, $x, $y) {
 $window = $window | 0;
 $mouseID = $mouseID | 0;
 $relative = $relative | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $$pr = 0.0, $$pr149 = 0.0, $13 = 0.0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $8 = 0.0, $add$i = 0.0, $add$i110 = 0.0, $add$i128 = 0.0, $add$i92 = 0.0, $center_x = 0, $center_y = 0, $cmp = 0, $cmp65 = 0, $cmp70 = 0, $cmp75 = 0, $cmp80 = 0, $cond = 0, $conv4$i = 0.0, $conv4$i112 = 0.0, $conv4$i130 = 0.0, $conv4$i94 = 0.0, $dec = 0, $dec63 = 0, $div = 0, $div5 = 0, $or$cond87 = 0, $posted$0 = 0, $retval$1 = 0, $spec$select$i = 0, $storemerge = 0, $storemerge84 = 0, $tobool13 = 0, $value$addr$0$i = 0, $value$addr$0$i101 = 0, $value$addr$0$i119 = 0, $value$addr$0$i137 = 0, $value$addr$0$in$i = 0.0, $value$addr$0$in$i100 = 0.0, $value$addr$0$in$i118 = 0.0, $value$addr$0$in$i136 = 0.0, $x$addr$0 = 0, $x$addr$1 = 0, $xrel$0 = 0, $xrel$1 = 0, $xrel$2 = 0, $y$addr$0 = 0, $y$addr$1 = 0, $yrel$0 = 0, $yrel$1 = 0, $yrel$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $center_x = sp;
 $center_y = sp + 56 | 0;
 $cmp = ($mouseID | 0) == -1;
 if ($cmp & (HEAP32[4001] | 0) == 0) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (!($cmp | (HEAP32[3994] | 0) == 0)) {
  HEAP32[$center_x >> 2] = 0;
  HEAP32[$center_y >> 2] = 0;
  _SDL_GetWindowSize($window, $center_x, $center_y);
  $div = (HEAP32[$center_x >> 2] | 0) / 2 | 0;
  HEAP32[$center_x >> 2] = $div;
  $div5 = (HEAP32[$center_y >> 2] | 0) / 2 | 0;
  HEAP32[$center_y >> 2] = $div5;
  if (($div | 0) == ($x | 0) & ($div5 | 0) == ($y | 0)) {
   HEAP32[3987] = $x;
   HEAP32[3988] = $y;
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  $spec$select$i = ($window | 0) == 0 ? HEAP32[3982] | 0 : $window;
  do if ($spec$select$i | 0) {
   $5 = HEAP32[3976] | 0;
   if ($5 | 0) {
    FUNCTION_TABLE_viii[$5 & 63]($spec$select$i, $div, $div5);
    break;
   }
   $6 = HEAP32[3981] | 0;
   if (_SDL_UpdateMouseFocus($spec$select$i, $div, $div5) | 0) _SDL_PrivateSendMouseMotion($spec$select$i, $6, 0, $div, $div5) | 0;
  } while (0);
 }
 $tobool13 = ($relative | 0) != 0;
 if ($tobool13) {
  if (!(HEAP32[3993] | 0)) {
   $13 = +HEAPF32[3995];
   if ($13 != 1.0) {
    $add$i110 = $13 * +($x | 0) + +HEAPF32[3997];
    HEAPF32[3997] = $add$i110;
    $conv4$i112 = $add$i110;
    if (!($add$i110 >= 0.0)) $value$addr$0$in$i118 = +_SDL_ceil($conv4$i112); else $value$addr$0$in$i118 = +_SDL_floor($conv4$i112);
    $value$addr$0$i119 = ~~$value$addr$0$in$i118;
    HEAPF32[3997] = +HEAPF32[3997] - +($value$addr$0$i119 | 0);
    $$pr149 = +HEAPF32[3995];
    if ($$pr149 != 1.0) {
     $add$i128 = $$pr149 * +($y | 0) + +HEAPF32[3998];
     HEAPF32[3998] = $add$i128;
     $conv4$i130 = $add$i128;
     if (!($add$i128 >= 0.0)) $value$addr$0$in$i136 = +_SDL_ceil($conv4$i130); else $value$addr$0$in$i136 = +_SDL_floor($conv4$i130);
     $value$addr$0$i137 = ~~$value$addr$0$in$i136;
     HEAPF32[3998] = +HEAPF32[3998] - +($value$addr$0$i137 | 0);
     $x$addr$0 = $value$addr$0$i119;
     $y$addr$0 = $value$addr$0$i137;
    } else {
     $x$addr$0 = $value$addr$0$i119;
     $y$addr$0 = $y;
    }
   } else {
    $x$addr$0 = $x;
    $y$addr$0 = $y;
   }
  } else {
   $8 = +HEAPF32[3996];
   if ($8 != 1.0) {
    $add$i = $8 * +($x | 0) + +HEAPF32[3997];
    HEAPF32[3997] = $add$i;
    $conv4$i = $add$i;
    if (!($add$i >= 0.0)) $value$addr$0$in$i = +_SDL_ceil($conv4$i); else $value$addr$0$in$i = +_SDL_floor($conv4$i);
    $value$addr$0$i = ~~$value$addr$0$in$i;
    HEAPF32[3997] = +HEAPF32[3997] - +($value$addr$0$i | 0);
    $$pr = +HEAPF32[3996];
    if ($$pr != 1.0) {
     $add$i92 = $$pr * +($y | 0) + +HEAPF32[3998];
     HEAPF32[3998] = $add$i92;
     $conv4$i94 = $add$i92;
     if (!($add$i92 >= 0.0)) $value$addr$0$in$i100 = +_SDL_ceil($conv4$i94); else $value$addr$0$in$i100 = +_SDL_floor($conv4$i94);
     $value$addr$0$i101 = ~~$value$addr$0$in$i100;
     HEAPF32[3998] = +HEAPF32[3998] - +($value$addr$0$i101 | 0);
     $x$addr$0 = $value$addr$0$i;
     $y$addr$0 = $value$addr$0$i101;
    } else {
     $x$addr$0 = $value$addr$0$i;
     $y$addr$0 = $y;
    }
   } else {
    $x$addr$0 = $x;
    $y$addr$0 = $y;
   }
  }
  $x$addr$1 = (HEAP32[3987] | 0) + $x$addr$0 | 0;
  $xrel$0 = $x$addr$0;
  $y$addr$1 = (HEAP32[3988] | 0) + $y$addr$0 | 0;
  $yrel$0 = $y$addr$0;
 } else {
  $x$addr$1 = $x;
  $xrel$0 = $x - (HEAP32[3987] | 0) | 0;
  $y$addr$1 = $y;
  $yrel$0 = $y - (HEAP32[3988] | 0) | 0;
 }
 if (!($yrel$0 | $xrel$0)) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (!(HEAP32[3992] | 0)) {
  HEAP32[3992] = 1;
  $xrel$1 = 0;
  $yrel$1 = 0;
 } else {
  $xrel$1 = $xrel$0;
  $yrel$1 = $yrel$0;
 }
 $or$cond87 = $cmp & (HEAP32[3991] | 0) == 0;
 $xrel$2 = $or$cond87 ? 0 : $xrel$1;
 $yrel$2 = $or$cond87 ? 0 : $yrel$1;
 $26 = HEAP32[3993] | 0;
 if (!$26) {
  HEAP32[3983] = $x$addr$1;
  $storemerge = $y$addr$1;
 } else {
  HEAP32[3983] = (HEAP32[3983] | 0) + $xrel$2;
  $storemerge = (HEAP32[3984] | 0) + $yrel$2 | 0;
 }
 HEAP32[3984] = $storemerge;
 if (!$window) $43 = $26; else if (!(HEAP32[$window + 48 >> 2] & 16384)) {
  HEAP32[$center_x >> 2] = 0;
  HEAP32[$center_y >> 2] = 0;
  _SDL_GetWindowSize(HEAP32[3982] | 0, $center_x, $center_y);
  $31 = HEAP32[$center_x >> 2] | 0;
  $dec = $31 + -1 | 0;
  HEAP32[$center_x >> 2] = $dec;
  $32 = HEAP32[$center_y >> 2] | 0;
  $dec63 = $32 + -1 | 0;
  HEAP32[$center_y >> 2] = $dec63;
  $33 = HEAP32[3983] | 0;
  $cmp65 = ($33 | 0) < ($31 | 0);
  $34 = $cmp65 ? $33 : $dec;
  $cmp70 = ($34 | 0) < 0;
  if ($cmp70 | $cmp65 ^ 1) HEAP32[3983] = $cmp70 ? 0 : $34;
  $37 = HEAP32[3984] | 0;
  $cmp75 = ($37 | 0) >= ($32 | 0);
  $38 = $cmp75 ? $dec63 : $37;
  $cmp80 = ($38 | 0) < 0;
  if ($cmp75 | $cmp80) HEAP32[3984] = $cmp80 ? 0 : $38;
  $43 = HEAP32[3993] | 0;
 } else $43 = $26;
 HEAP32[3985] = (HEAP32[3985] | 0) + $xrel$2;
 HEAP32[3986] = (HEAP32[3986] | 0) + $yrel$2;
 if ((HEAP32[4007] | 0) != 0 & ($43 | 0) == 0) {
  $44 = HEAP32[3974] | 0;
  if ($44 | 0) {
   $45 = HEAP32[4006] | 0;
   if ($45 | 0) FUNCTION_TABLE_vi[$44 & 63]($45);
  }
 }
 if ((_SDL_EventState(1024, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[$center_x >> 2] = 1024;
  $46 = HEAP32[3982] | 0;
  if (!$46) $cond = 0; else $cond = HEAP32[$46 + 4 >> 2] | 0;
  HEAP32[$center_x + 8 >> 2] = $cond;
  HEAP32[$center_x + 12 >> 2] = $mouseID;
  HEAP32[$center_x + 16 >> 2] = HEAP32[3991];
  HEAP32[$center_x + 20 >> 2] = HEAP32[3983];
  HEAP32[$center_x + 24 >> 2] = HEAP32[3984];
  HEAP32[$center_x + 28 >> 2] = $xrel$2;
  HEAP32[$center_x + 32 >> 2] = $yrel$2;
  $posted$0 = (_SDL_PushEvent($center_x) | 0) > 0 & 1;
 } else $posted$0 = 0;
 if ($tobool13) {
  HEAP32[3987] = HEAP32[3983];
  $storemerge84 = HEAP32[3984] | 0;
 } else {
  HEAP32[3987] = $x$addr$1;
  $storemerge84 = $y$addr$1;
 }
 HEAP32[3988] = $storemerge84;
 $retval$1 = $posted$0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $17 = 0, $18 = 0, $__flags34 = 0, $add$ptr = 0, $add$ptr64 = 0, $does_dst_type_point_to_our_static_type$0 = 0, $does_dst_type_point_to_our_static_type$1 = 0, $does_dst_type_point_to_our_static_type$273 = 0, $does_dst_type_point_to_our_static_type$274 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, label = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $17 = HEAP32[$this + 12 >> 2] | 0;
   $add$ptr64 = $this + 16 + ($17 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $incdec$ptr69 = $this + 24 | 0;
   if (($17 | 0) <= 1) break;
   $18 = HEAP32[$this + 8 >> 2] | 0;
   if (!($18 & 2)) {
    $number_to_static_ptr76 = $info + 36 | 0;
    if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $search_done110 = $info + 54 | 0;
      $p65$2 = $incdec$ptr69;
      while (1) {
       if (HEAP8[$search_done110 >> 0] | 0) break L1;
       if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p65$2 = $p65$2 + 8 | 0;
       if ($p65$2 >>> 0 >= $add$ptr64 >>> 0) break L1;
      }
     }
     $path_dst_ptr_to_static_ptr99 = $info + 24 | 0;
     $search_done92 = $info + 54 | 0;
     $p65$1 = $incdec$ptr69;
     while (1) {
      if (HEAP8[$search_done92 >> 0] | 0) break L1;
      if ((HEAP32[$number_to_static_ptr76 >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$1 = $p65$1 + 8 | 0;
      if ($p65$1 >>> 0 >= $add$ptr64 >>> 0) break L1;
     }
    }
   }
   $search_done79 = $info + 54 | 0;
   $p65$0 = $incdec$ptr69;
   while (1) {
    if (HEAP8[$search_done79 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p65$0 = $p65$0 + 8 | 0;
    if ($p65$0 >>> 0 >= $add$ptr64 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $add$ptr = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
     $found_our_static_ptr = $info + 52 | 0;
     $found_any_static_type = $info + 53 | 0;
     $search_done = $info + 54 | 0;
     $__flags34 = $this + 8 | 0;
     $path_dst_ptr_to_static_ptr = $info + 24 | 0;
     $does_dst_type_point_to_our_static_type$0 = 0;
     $is_dst_type_derived_from_static_type13$0$off0 = 0;
     $p$0 = $this + 16 | 0;
     L33 : while (1) {
      if ($p$0 >>> 0 >= $add$ptr >>> 0) {
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr >> 0] = 0;
      HEAP8[$found_any_static_type >> 0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
      if (HEAP8[$search_done >> 0] | 0) {
       label = 18;
       break;
      }
      do if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
       $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
       $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
      } else {
       if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) if (!(HEAP32[$__flags34 >> 2] & 1)) {
        $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
        break;
       }
       if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       }
       if (!(HEAP32[$__flags34 >> 2] & 2)) {
        $does_dst_type_point_to_our_static_type$274 = 1;
        label = 19;
        break L33;
       } else {
        $does_dst_type_point_to_our_static_type$1 = 1;
        $is_dst_type_derived_from_static_type13$1$off0 = 1;
       }
      } while (0);
      $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;
      $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
      $p$0 = $p$0 + 8 | 0;
     }
     if ((label | 0) == 18) if ($is_dst_type_derived_from_static_type13$0$off0) {
      $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
      label = 19;
     } else {
      $12 = 4;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
     }
     if ((label | 0) == 19) {
      $12 = 3;
      $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
     }
     HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
     if ($does_dst_type_point_to_our_static_type$273 & 1) break;
    }
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr303 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add105 = 0, $add58 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $bk164 = 0, $child = 0, $child249 = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd167 = 0, $head = 0, $head299 = 0, $head318 = 0, $head6 = 0, $head79 = 0, $head92 = 0, $newp$2 = 0, $shr = 0, $storemerge = 0, $storemerge3 = 0, $sub = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0;
 $head = $p + 4 | 0;
 $0 = HEAP32[$head >> 2] | 0;
 $and = $0 & -8;
 $add$ptr = $p + $and | 0;
 $1 = HEAP32[4741] | 0;
 $and2 = $0 & 3;
 if (!(($and2 | 0) != 1 & $1 >>> 0 <= $p >>> 0 & $add$ptr >>> 0 > $p >>> 0)) _abort();
 $head6 = $add$ptr + 4 | 0;
 $2 = HEAP32[$head6 >> 2] | 0;
 if (!($2 & 1)) _abort();
 if (!$and2) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($and >>> 0 >= ($nb + 4 | 0) >>> 0) if (($and - $nb | 0) >>> 0 <= HEAP32[4857] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($and >>> 0 >= $nb >>> 0) {
  $sub = $and - $nb | 0;
  if ($sub >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $add$ptr17 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr17 + 4 >> 2] = $sub | 3;
  HEAP32[$head6 >> 2] = HEAP32[$head6 >> 2] | 1;
  _dispose_chunk($add$ptr17, $sub);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[4743] | 0) == ($add$ptr | 0)) {
  $add = (HEAP32[4740] | 0) + $and | 0;
  $sub40 = $add - $nb | 0;
  $add$ptr41 = $p + $nb | 0;
  if ($add >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr41 + 4 >> 2] = $sub40 | 1;
  HEAP32[4743] = $add$ptr41;
  HEAP32[4740] = $sub40;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[4742] | 0) == ($add$ptr | 0)) {
  $add58 = (HEAP32[4739] | 0) + $and | 0;
  if ($add58 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $sub62 = $add58 - $nb | 0;
  if ($sub62 >>> 0 > 15) {
   $add$ptr66 = $p + $nb | 0;
   $add$ptr67 = $p + $add58 | 0;
   HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
   HEAP32[$add$ptr66 + 4 >> 2] = $sub62 | 1;
   HEAP32[$add$ptr67 >> 2] = $sub62;
   $head79 = $add$ptr67 + 4 | 0;
   HEAP32[$head79 >> 2] = HEAP32[$head79 >> 2] & -2;
   $storemerge = $add$ptr66;
   $storemerge3 = $sub62;
  } else {
   HEAP32[$head >> 2] = $0 & 1 | $add58 | 2;
   $head92 = $p + $add58 + 4 | 0;
   HEAP32[$head92 >> 2] = HEAP32[$head92 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[4739] = $storemerge3;
  HEAP32[4742] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($2 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $add105 = ($2 & -8) + $and | 0;
 if ($add105 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $sub110 = $add105 - $nb | 0;
 $shr = $2 >>> 3;
 L49 : do if ($2 >>> 0 < 256) {
  $11 = HEAP32[$add$ptr + 8 >> 2] | 0;
  $12 = HEAP32[$add$ptr + 12 >> 2] | 0;
  $arrayidx = 18988 + ($shr << 1 << 2) | 0;
  if (($11 | 0) != ($arrayidx | 0)) {
   if ($1 >>> 0 > $11 >>> 0) _abort();
   if ((HEAP32[$11 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
  }
  if (($12 | 0) == ($11 | 0)) {
   HEAP32[4737] = HEAP32[4737] & ~(1 << $shr);
   break;
  }
  if (($12 | 0) == ($arrayidx | 0)) $fd148$pre$phiZ2D = $12 + 8 | 0; else {
   if ($1 >>> 0 > $12 >>> 0) _abort();
   $fd138 = $12 + 8 | 0;
   if ((HEAP32[$fd138 >> 2] | 0) == ($add$ptr | 0)) $fd148$pre$phiZ2D = $fd138; else _abort();
  }
  HEAP32[$11 + 12 >> 2] = $12;
  HEAP32[$fd148$pre$phiZ2D >> 2] = $11;
 } else {
  $16 = HEAP32[$add$ptr + 24 >> 2] | 0;
  $17 = HEAP32[$add$ptr + 12 >> 2] | 0;
  do if (($17 | 0) == ($add$ptr | 0)) {
   $child = $add$ptr + 16 | 0;
   $arrayidx179 = $child + 4 | 0;
   $21 = HEAP32[$arrayidx179 >> 2] | 0;
   if (!$21) {
    $22 = HEAP32[$child >> 2] | 0;
    if (!$22) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $22;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $21;
    $RP$1$ph = $arrayidx179;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx186 = $R$1 + 20 | 0;
    $23 = HEAP32[$arrayidx186 >> 2] | 0;
    if (!$23) {
     $arrayidx190 = $R$1 + 16 | 0;
     $24 = HEAP32[$arrayidx190 >> 2] | 0;
     if (!$24) break; else {
      $R$1$be = $24;
      $RP$1$be = $arrayidx190;
     }
    } else {
     $R$1$be = $23;
     $RP$1$be = $arrayidx186;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($1 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $18 = HEAP32[$add$ptr + 8 >> 2] | 0;
   if ($1 >>> 0 > $18 >>> 0) _abort();
   $bk164 = $18 + 12 | 0;
   if ((HEAP32[$bk164 >> 2] | 0) != ($add$ptr | 0)) _abort();
   $fd167 = $17 + 8 | 0;
   if ((HEAP32[$fd167 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$bk164 >> 2] = $17;
    HEAP32[$fd167 >> 2] = $18;
    $R$3 = $17;
    break;
   } else _abort();
  } while (0);
  if ($16 | 0) {
   $25 = HEAP32[$add$ptr + 28 >> 2] | 0;
   $arrayidx206 = 19252 + ($25 << 2) | 0;
   do if ((HEAP32[$arrayidx206 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$arrayidx206 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4738] = HEAP32[4738] & ~(1 << $25);
     break L49;
    }
   } else if ((HEAP32[4741] | 0) >>> 0 > $16 >>> 0) _abort(); else {
    $arrayidx226 = $16 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx226 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx226 : $16 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) break L49; else break;
   } while (0);
   $30 = HEAP32[4741] | 0;
   if ($30 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $16;
   $child249 = $add$ptr + 16 | 0;
   $31 = HEAP32[$child249 >> 2] | 0;
   do if ($31 | 0) if ($30 >>> 0 > $31 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $32 = HEAP32[$child249 + 4 >> 2] | 0;
   if ($32 | 0) if ((HEAP32[4741] | 0) >>> 0 > $32 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $32;
    HEAP32[$32 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($sub110 >>> 0 < 16) {
  HEAP32[$head >> 2] = $0 & 1 | $add105 | 2;
  $head299 = $p + $add105 + 4 | 0;
  HEAP32[$head299 >> 2] = HEAP32[$head299 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $add$ptr303 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr303 + 4 >> 2] = $sub110 | 3;
  $head318 = $p + $add105 + 4 | 0;
  HEAP32[$head318 >> 2] = HEAP32[$head318 >> 2] | 1;
  _dispose_chunk($add$ptr303, $sub110);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _SDL_GetErrorMsg($errstr) {
 $errstr = $errstr | 0;
 var $$lcssa = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $add$ptr22 = 0, $argi$0$be = 0, $argi$034 = 0, $argi$3 = 0, $argi$3$ph = 0, $call41 = 0, $call60 = 0, $call72 = 0, $call84 = 0, $call98 = 0, $cmp42 = 0, $cmp61 = 0, $cmp73 = 0, $cmp85 = 0, $cmp99 = 0, $fmt$0$be = 0, $fmt$0$pn$lcssa = 0, $fmt$0$pn24 = 0, $fmt$0$pn24$phi = 0, $fmt$032 = 0, $fmt$1 = 0, $fmt$120 = 0, $fmt$126 = 0, $incdec$ptr28 = 0, $incdec$ptr33 = 0, $incdec$ptr335 = 0, $incdec$ptr34 = 0, $incdec$ptr346 = 0, $incdec$ptr35 = 0, $incdec$ptr9 = 0, $maxlen$addr$0$be = 0, $maxlen$addr$030 = 0, $maxlen$addr$3 = 0, $maxlen$addr$3$ph = 0, $msg$0$be = 0, $msg$033 = 0, $msg$3 = 0, $msg$3$ph = 0, $spot$0$lcssa = 0, $spot$025 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer10 = sp + 64 | 0;
 $vararg_buffer7 = sp + 56 | 0;
 $vararg_buffer4 = sp + 48 | 0;
 $vararg_buffer1 = sp + 40 | 0;
 $vararg_buffer = sp + 32 | 0;
 $tmp = sp;
 HEAP8[$errstr >> 0] = 0;
 if (!(HEAP32[3716] | 0)) {
  STACKTOP = sp;
  return $errstr | 0;
 }
 $1 = HEAP8[14868] | 0;
 if (!($1 << 24 >> 24)) $16 = $errstr; else {
  $incdec$ptr9 = $tmp + 1 | 0;
  $add$ptr22 = $tmp + 30 | 0;
  $2 = $1;
  $argi$034 = 0;
  $fmt$032 = 14868;
  $maxlen$addr$030 = 1023;
  $msg$033 = $errstr;
  while (1) {
   do if ($2 << 24 >> 24 == 37) {
    HEAP8[$tmp >> 0] = 37;
    $fmt$120 = $fmt$032 + 1 | 0;
    $3 = HEAP8[$fmt$120 >> 0] | 0;
    L10 : do if ($3 << 24 >> 24 == 46 | ($3 + -48 & 255) < 10) {
     $5 = $3;
     $fmt$0$pn24 = $fmt$032;
     $fmt$126 = $fmt$120;
     $spot$025 = $incdec$ptr9;
     while (1) {
      if ($spot$025 >>> 0 >= $add$ptr22 >>> 0) break;
      $incdec$ptr28 = $spot$025 + 1 | 0;
      HEAP8[$spot$025 >> 0] = $5;
      $fmt$1 = $fmt$126 + 1 | 0;
      $6 = HEAP8[$fmt$1 >> 0] | 0;
      if ($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10) {
       $fmt$0$pn24$phi = $fmt$126;
       $5 = $6;
       $fmt$126 = $fmt$1;
       $spot$025 = $incdec$ptr28;
       $fmt$0$pn24 = $fmt$0$pn24$phi;
      } else {
       $$lcssa = $6;
       $fmt$0$pn$lcssa = $fmt$126;
       $spot$0$lcssa = $incdec$ptr28;
       label = 10;
       break L10;
      }
     }
     HEAP8[$spot$025 >> 0] = $5;
     $10 = $5;
     $incdec$ptr335 = $fmt$0$pn24 + 2 | 0;
     $incdec$ptr346 = $spot$025 + 1 | 0;
    } else {
     $$lcssa = $3;
     $fmt$0$pn$lcssa = $fmt$032;
     $spot$0$lcssa = $incdec$ptr9;
     label = 10;
    } while (0);
    if ((label | 0) == 10) {
     label = 0;
     $incdec$ptr33 = $fmt$0$pn$lcssa + 2 | 0;
     $incdec$ptr34 = $spot$0$lcssa + 1 | 0;
     HEAP8[$spot$0$lcssa >> 0] = $$lcssa;
     if ($$lcssa << 24 >> 24 == 108) {
      $incdec$ptr35 = $fmt$0$pn$lcssa + 3 | 0;
      $8 = HEAP8[$incdec$ptr33 >> 0] | 0;
      HEAP8[$incdec$ptr34 >> 0] = $8;
      HEAP8[$spot$0$lcssa + 2 >> 0] = 0;
      switch ($8 << 24 >> 24 | 0) {
      case 117:
      case 100:
      case 105:
       {
        HEAP32[$vararg_buffer >> 2] = HEAP32[15e3 + ($argi$034 << 7) >> 2];
        $call41 = _SDL_snprintf($msg$033, $maxlen$addr$030, $tmp, $vararg_buffer) | 0;
        $cmp42 = ($call41 | 0) > 0;
        $argi$3 = $argi$034 + 1 | 0;
        $maxlen$addr$3 = $maxlen$addr$030 - ($cmp42 ? $call41 : 0) | 0;
        $msg$3 = $cmp42 ? $msg$033 + $call41 | 0 : $msg$033;
        break;
       }
      default:
       {
        $argi$3 = $argi$034;
        $maxlen$addr$3 = $maxlen$addr$030;
        $msg$3 = $msg$033;
       }
      }
      $argi$0$be = $argi$3;
      $fmt$0$be = $incdec$ptr35;
      $maxlen$addr$0$be = $maxlen$addr$3;
      $msg$0$be = $msg$3;
      break;
     } else {
      $10 = $$lcssa;
      $incdec$ptr335 = $incdec$ptr33;
      $incdec$ptr346 = $incdec$ptr34;
     }
    }
    HEAP8[$incdec$ptr346 >> 0] = 0;
    switch ($10 << 24 >> 24 | 0) {
    case 37:
     {
      HEAP8[$msg$033 >> 0] = 37;
      $argi$3$ph = $argi$034;
      $maxlen$addr$3$ph = $maxlen$addr$030 + -1 | 0;
      $msg$3$ph = $msg$033 + 1 | 0;
      break;
     }
    case 88:
    case 120:
    case 111:
    case 117:
    case 100:
    case 105:
    case 99:
     {
      HEAP32[$vararg_buffer1 >> 2] = HEAP32[15e3 + ($argi$034 << 7) >> 2];
      $call60 = _SDL_snprintf($msg$033, $maxlen$addr$030, $tmp, $vararg_buffer1) | 0;
      $cmp61 = ($call60 | 0) > 0;
      $argi$3$ph = $argi$034 + 1 | 0;
      $maxlen$addr$3$ph = $maxlen$addr$030 - ($cmp61 ? $call60 : 0) | 0;
      $msg$3$ph = $cmp61 ? $msg$033 + $call60 | 0 : $msg$033;
      break;
     }
    case 102:
     {
      HEAPF64[$vararg_buffer4 >> 3] = +HEAPF64[15e3 + ($argi$034 << 7) >> 3];
      $call72 = _SDL_snprintf($msg$033, $maxlen$addr$030, $tmp, $vararg_buffer4) | 0;
      $cmp73 = ($call72 | 0) > 0;
      $argi$3$ph = $argi$034 + 1 | 0;
      $maxlen$addr$3$ph = $maxlen$addr$030 - ($cmp73 ? $call72 : 0) | 0;
      $msg$3$ph = $cmp73 ? $msg$033 + $call72 | 0 : $msg$033;
      break;
     }
    case 112:
     {
      HEAP32[$vararg_buffer7 >> 2] = HEAP32[15e3 + ($argi$034 << 7) >> 2];
      $call84 = _SDL_snprintf($msg$033, $maxlen$addr$030, $tmp, $vararg_buffer7) | 0;
      $cmp85 = ($call84 | 0) > 0;
      $argi$3$ph = $argi$034 + 1 | 0;
      $maxlen$addr$3$ph = $maxlen$addr$030 - ($cmp85 ? $call84 : 0) | 0;
      $msg$3$ph = $cmp85 ? $msg$033 + $call84 | 0 : $msg$033;
      break;
     }
    case 115:
     {
      HEAP32[$vararg_buffer10 >> 2] = 15e3 + ($argi$034 << 7);
      $call98 = _SDL_snprintf($msg$033, $maxlen$addr$030, $tmp, $vararg_buffer10) | 0;
      $cmp99 = ($call98 | 0) > 0;
      $argi$3$ph = $argi$034 + 1 | 0;
      $maxlen$addr$3$ph = $maxlen$addr$030 - ($cmp99 ? $call98 : 0) | 0;
      $msg$3$ph = $cmp99 ? $msg$033 + $call98 | 0 : $msg$033;
      break;
     }
    default:
     {
      $argi$3$ph = $argi$034;
      $maxlen$addr$3$ph = $maxlen$addr$030;
      $msg$3$ph = $msg$033;
     }
    }
    $argi$0$be = $argi$3$ph;
    $fmt$0$be = $incdec$ptr335;
    $maxlen$addr$0$be = $maxlen$addr$3$ph;
    $msg$0$be = $msg$3$ph;
   } else {
    HEAP8[$msg$033 >> 0] = $2;
    $argi$0$be = $argi$034;
    $fmt$0$be = $fmt$032 + 1 | 0;
    $maxlen$addr$0$be = $maxlen$addr$030 + -1 | 0;
    $msg$0$be = $msg$033 + 1 | 0;
   } while (0);
   $2 = HEAP8[$fmt$0$be >> 0] | 0;
   if (!(($maxlen$addr$0$be | 0) > 0 & $2 << 24 >> 24 != 0)) break; else {
    $argi$034 = $argi$0$be;
    $fmt$032 = $fmt$0$be;
    $maxlen$addr$030 = $maxlen$addr$0$be;
    $msg$033 = $msg$0$be;
   }
  }
  $16 = ($maxlen$addr$0$be | 0) < 0 ? $msg$0$be + ($maxlen$addr$0$be + -1) | 0 : $msg$0$be;
 }
 HEAP8[$16 >> 0] = 0;
 STACKTOP = sp;
 return $errstr | 0;
}

function _dollarNormalize($path, $points) {
 $path = $path | 0;
 $points = $points | 0;
 var $$pre = 0, $0 = 0.0, $11 = 0.0, $13 = 0.0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $29 = 0.0, $30 = 0.0, $5 = 0, $6 = 0, $add105 = 0.0, $add109 = 0.0, $add17 = 0.0, $add63 = 0.0, $add63$lcssa = 0.0, $add637 = 0.0, $add81 = 0.0, $add99 = 0.0, $centroid$sroa$0$017 = 0.0, $centroid$sroa$0$1$lcssa = 0.0, $centroid$sroa$0$19 = 0.0, $centroid$sroa$14$018 = 0.0, $centroid$sroa$14$1$lcssa = 0.0, $centroid$sroa$14$110 = 0.0, $conv158 = 0.0, $conv159 = 0.0, $conv164 = 0.0, $conv170 = 0.0, $conv189 = 0.0, $conv191 = 0.0, $conv62 = 0.0, $dist$020 = 0.0, $dist$112 = 0.0, $div = 0.0, $div128 = 0.0, $div131 = 0.0, $div71 = 0.0, $i$028 = 0, $i$121 = 0, $i$26 = 0, $i$31 = 0, $inc110 = 0, $length$027 = 0.0, $length$1 = 0.0, $mul161 = 0.0, $mul180 = 0.0, $numPoints$0$lcssa36 = 0, $numPoints$019 = 0, $numPoints$1$lcssa = 0, $numPoints$111 = 0, $numPoints21$phi$trans$insert = 0, $sub = 0, $sub14 = 0.0, $sub229 = 0.0, $sub230 = 0.0, $sub26 = 0, $sub32 = 0.0, $sub49 = 0.0, $sub7 = 0.0, $vararg_buffer = 0, $x153 = 0, $x236 = 0, $x28 = 0, $x31 = 0, $xmax$04 = 0.0, $xmin$05 = 0.0, $y155 = 0, $y244 = 0, $y45 = 0, $y48 = 0, $ymax$03 = 0.0, $ymin$02 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = +HEAPF32[$path >> 2];
 $numPoints21$phi$trans$insert = $path + 4 | 0;
 $$pre = HEAP32[$numPoints21$phi$trans$insert >> 2] | 0;
 if (!($0 <= 0.0)) {
  $6 = $$pre;
  $length$1 = $0;
  label = 5;
 } else if (($$pre | 0) > 1) {
  $i$028 = 1;
  $length$027 = $0;
  while (1) {
   $sub = $i$028 + -1 | 0;
   $sub7 = +HEAPF32[$path + 8 + ($i$028 << 3) >> 2] - +HEAPF32[$path + 8 + ($sub << 3) >> 2];
   $sub14 = +HEAPF32[$path + 8 + ($i$028 << 3) + 4 >> 2] - +HEAPF32[$path + 8 + ($sub << 3) + 4 >> 2];
   $add17 = $length$027 + +_SDL_sqrt($sub7 * $sub7 + $sub14 * $sub14);
   $i$028 = $i$028 + 1 | 0;
   $5 = HEAP32[$numPoints21$phi$trans$insert >> 2] | 0;
   if (($i$028 | 0) >= ($5 | 0)) {
    $6 = $5;
    $length$1 = $add17;
    label = 5;
    break;
   } else $length$027 = $add17;
  }
 } else $numPoints$0$lcssa36 = 0;
 if ((label | 0) == 5) {
  $div = $length$1 / 63.0;
  if (($6 | 0) > 1) {
   $centroid$sroa$0$017 = 0.0;
   $centroid$sroa$14$018 = 0.0;
   $dist$020 = $div;
   $i$121 = 1;
   $numPoints$019 = 0;
   while (1) {
    $sub26 = $i$121 + -1 | 0;
    $x28 = $path + 8 + ($sub26 << 3) | 0;
    $x31 = $path + 8 + ($i$121 << 3) | 0;
    $sub32 = +HEAPF32[$x28 >> 2] - +HEAPF32[$x31 >> 2];
    $y45 = $path + 8 + ($sub26 << 3) + 4 | 0;
    $y48 = $path + 8 + ($i$121 << 3) + 4 | 0;
    $sub49 = +HEAPF32[$y45 >> 2] - +HEAPF32[$y48 >> 2];
    $conv62 = +_SDL_sqrt($sub32 * $sub32 + $sub49 * $sub49);
    $add637 = $dist$020 + $conv62;
    if ($add637 > $div) {
     $centroid$sroa$0$19 = $centroid$sroa$0$017;
     $centroid$sroa$14$110 = $centroid$sroa$14$018;
     $dist$112 = $dist$020;
     $numPoints$111 = $numPoints$019;
     while (1) {
      $11 = +HEAPF32[$x28 >> 2];
      $div71 = ($div - $dist$112) / $conv62;
      $add81 = $11 + $div71 * (+HEAPF32[$x31 >> 2] - $11);
      HEAPF32[$points + ($numPoints$111 << 3) >> 2] = $add81;
      $13 = +HEAPF32[$y45 >> 2];
      $add99 = $13 + $div71 * (+HEAPF32[$y48 >> 2] - $13);
      HEAPF32[$points + ($numPoints$111 << 3) + 4 >> 2] = $add99;
      $add105 = $centroid$sroa$0$19 + $add81;
      $add109 = $centroid$sroa$14$110 + $add99;
      $inc110 = $numPoints$111 + 1 | 0;
      $dist$112 = $dist$112 - $div;
      $add63 = $dist$112 + $conv62;
      if (!($add63 > $div)) {
       $add63$lcssa = $add63;
       $centroid$sroa$0$1$lcssa = $add105;
       $centroid$sroa$14$1$lcssa = $add109;
       $numPoints$1$lcssa = $inc110;
       break;
      } else {
       $centroid$sroa$0$19 = $add105;
       $centroid$sroa$14$110 = $add109;
       $numPoints$111 = $inc110;
      }
     }
    } else {
     $add63$lcssa = $add637;
     $centroid$sroa$0$1$lcssa = $centroid$sroa$0$017;
     $centroid$sroa$14$1$lcssa = $centroid$sroa$14$018;
     $numPoints$1$lcssa = $numPoints$019;
    }
    $i$121 = $i$121 + 1 | 0;
    $15 = HEAP32[$numPoints21$phi$trans$insert >> 2] | 0;
    if (($i$121 | 0) >= ($15 | 0)) break; else {
     $centroid$sroa$0$017 = $centroid$sroa$0$1$lcssa;
     $centroid$sroa$14$018 = $centroid$sroa$14$1$lcssa;
     $dist$020 = $add63$lcssa;
     $numPoints$019 = $numPoints$1$lcssa;
    }
   }
   if (($numPoints$1$lcssa | 0) < 63) $numPoints$0$lcssa36 = $numPoints$1$lcssa; else {
    $16 = $path + 8 + ($15 + -1 << 3) | 0;
    $21 = HEAP32[$16 + 4 >> 2] | 0;
    $22 = $points + 504 | 0;
    HEAP32[$22 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$22 + 4 >> 2] = $21;
    $div128 = $centroid$sroa$0$1$lcssa * .015625;
    $div131 = $centroid$sroa$14$1$lcssa * .015625;
    $conv159 = +_SDL_atan2($div131 - +HEAPF32[$points + 4 >> 2], $div128 - +HEAPF32[$points >> 2]);
    $conv170 = $div128;
    $conv189 = $div131;
    $i$26 = 0;
    $xmax$04 = $div128;
    $xmin$05 = $div128;
    $ymax$03 = $div131;
    $ymin$02 = $div131;
    do {
     $x153 = $points + ($i$26 << 3) | 0;
     $y155 = $points + ($i$26 << 3) + 4 | 0;
     $29 = +HEAPF32[$y155 >> 2];
     $conv158 = +HEAPF32[$x153 >> 2] - $div128;
     $mul161 = +_SDL_cos($conv159) * $conv158;
     $conv164 = $29 - $div131;
     HEAPF32[$x153 >> 2] = $mul161 - +_SDL_sin($conv159) * $conv164 + $conv170;
     $mul180 = +_SDL_sin($conv159) * $conv158;
     $conv191 = $mul180 + +_SDL_cos($conv159) * $conv164 + $conv189;
     HEAPF32[$y155 >> 2] = $conv191;
     $30 = +HEAPF32[$x153 >> 2];
     $xmin$05 = $30 < $xmin$05 ? $30 : $xmin$05;
     $xmax$04 = $30 > $xmax$04 ? $30 : $xmax$04;
     $ymin$02 = $ymin$02 > $conv191 ? $conv191 : $ymin$02;
     $ymax$03 = $ymax$03 < $conv191 ? $conv191 : $ymax$03;
     $i$26 = $i$26 + 1 | 0;
    } while (($i$26 | 0) != 64);
    $sub229 = $xmax$04 - $xmin$05;
    $sub230 = $ymax$03 - $ymin$02;
    $i$31 = 0;
    do {
     $x236 = $points + ($i$31 << 3) | 0;
     HEAPF32[$x236 >> 2] = (+HEAPF32[$x236 >> 2] - $div128) * 256.0 / $sub229;
     $y244 = $points + ($i$31 << 3) + 4 | 0;
     HEAPF32[$y244 >> 2] = (+HEAPF32[$y244 >> 2] - $div131) * 256.0 / $sub230;
     $i$31 = $i$31 + 1 | 0;
    } while (($i$31 | 0) != 64);
    STACKTOP = sp;
    return;
   }
  } else $numPoints$0$lcssa36 = 0;
 }
 HEAP32[$vararg_buffer >> 2] = $numPoints$0$lcssa36;
 _SDL_SetError(5051, $vararg_buffer) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_UnRLESurface($surface, $recode) {
 $surface = $surface | 0;
 $recode = $recode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $27 = 0, $29 = 0, $32 = 0, $add$ptr18$us$us$i = 0, $add$ptr25$i = 0, $add$ptr52$i = 0, $add$ptr52$us$i = 0, $add49$i = 0, $add49$us$i = 0, $call = 0, $call$i = 0, $cmp$i = 0, $conv17$us$us$i = 0, $conv24$i = 0, $conv51$i = 0, $conv51$us$i = 0, $dst$0$i = 0, $dst$0$us$i = 0, $flags33 = 0, $full = 0, $h = 0, $h$i = 0, $map = 0, $ofs$0$i = 0, $ofs$0$us$us$i = 0, $ofs$1$i = 0, $ofs$1$us$us$i = 0, $ofs$2$i = 0, $ofs$2$us$us$i = 0, $ofs$4$i = 0, $ofs$4$us$i = 0, $ofs$5$i = 0, $ofs$5$us$i = 0, $pitch$i = 0, $pixels$i = 0, $srcbuf$0$i = 0, $srcbuf$0$us$i = 0, $srcbuf$1$i = 0, $srcbuf$1$us$us$i = 0, $srcbuf$3$i = 0, $srcbuf$3$us$us$i = 0, $srcbuf$6$i = 0, $srcbuf$6$us$i = 0, $srcbuf$7$i = 0, $srcbuf$7$us$i = 0, $uncopy_opaque_16$uncopy_32$i = 0, $uncopy_transl_16$uncopy_32$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $full = sp;
 $0 = HEAP32[$surface >> 2] | 0;
 if (!($0 & 2)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$surface >> 2] = $0 & -3;
 $map = $surface + 52 | 0;
 L4 : do if (($recode | 0) != 0 & ($0 & 1 | 0) == 0) {
  $1 = HEAP32[$map >> 2] | 0;
  if (HEAP32[$1 + 68 >> 2] & 8192 | 0) {
   $h = $surface + 12 | 0;
   $call = _SDL_malloc(Math_imul(HEAP32[$surface + 16 >> 2] | 0, HEAP32[$h >> 2] | 0) | 0) | 0;
   HEAP32[$surface + 20 >> 2] = $call;
   if ($call | 0) {
    _SDL_FillRect($surface, 0, HEAP32[(HEAP32[$map >> 2] | 0) + 72 >> 2] | 0) | 0;
    HEAP32[$full + 4 >> 2] = 0;
    HEAP32[$full >> 2] = 0;
    HEAP32[$full + 8 >> 2] = HEAP32[$surface + 8 >> 2];
    HEAP32[$full + 12 >> 2] = HEAP32[$h >> 2];
    _SDL_RLEBlit($surface, $full, $surface, $full) | 0;
    break;
   }
   HEAP32[$surface >> 2] = HEAP32[$surface >> 2] | 2;
   STACKTOP = sp;
   return;
  }
  $10 = HEAP32[$surface + 4 >> 2] | 0;
  $11 = HEAP32[$1 + 12 >> 2] | 0;
  $12 = HEAP32[$surface + 8 >> 2] | 0;
  $cmp$i = (HEAP8[$11 >> 0] | 0) == 2;
  $uncopy_opaque_16$uncopy_32$i = $cmp$i ? 1 : 2;
  $uncopy_transl_16$uncopy_32$i = $cmp$i ? 3 : 2;
  $h$i = $surface + 12 | 0;
  $pitch$i = $surface + 16 | 0;
  $call$i = _SDL_malloc(Math_imul(HEAP32[$pitch$i >> 2] | 0, HEAP32[$h$i >> 2] | 0) | 0) | 0;
  $pixels$i = $surface + 20 | 0;
  HEAP32[$pixels$i >> 2] = $call$i;
  if (!$call$i) {
   HEAP32[$surface >> 2] = HEAP32[$surface >> 2] | 2;
   STACKTOP = sp;
   return;
  }
  _SDL_memset($call$i, 0, Math_imul(HEAP32[$pitch$i >> 2] | 0, HEAP32[$h$i >> 2] | 0) | 0) | 0;
  $18 = HEAP32[$pixels$i >> 2] | 0;
  $19 = $11 + 28 | 0;
  if ($cmp$i) {
   $dst$0$us$i = $18;
   $srcbuf$0$us$i = $19;
   while (1) {
    $ofs$0$us$us$i = 0;
    $srcbuf$1$us$us$i = $srcbuf$0$us$i;
    while (1) {
     $24 = HEAP8[$srcbuf$1$us$us$i + 1 >> 0] | 0;
     $conv17$us$us$i = $24 & 255;
     $add$ptr18$us$us$i = $srcbuf$1$us$us$i + 2 | 0;
     $ofs$1$us$us$i = $ofs$0$us$us$i + (HEAPU8[$srcbuf$1$us$us$i >> 0] | 0) | 0;
     if (!($24 << 24 >> 24)) if (!$ofs$1$us$us$i) break L4; else {
      $ofs$2$us$us$i = $ofs$1$us$us$i;
      $srcbuf$3$us$us$i = $add$ptr18$us$us$i;
     } else {
      $ofs$2$us$us$i = $ofs$1$us$us$i + $conv17$us$us$i | 0;
      $srcbuf$3$us$us$i = $add$ptr18$us$us$i + (FUNCTION_TABLE_iiiiii[$uncopy_opaque_16$uncopy_32$i & 7]($dst$0$us$i + ($ofs$1$us$us$i << 2) | 0, $add$ptr18$us$us$i, $conv17$us$us$i, $11, $10) | 0) | 0;
     }
     if (($ofs$2$us$us$i | 0) < ($12 | 0)) {
      $ofs$0$us$us$i = $ofs$2$us$us$i;
      $srcbuf$1$us$us$i = $srcbuf$3$us$us$i;
     } else break;
    }
    $ofs$4$us$i = 0;
    $srcbuf$6$us$i = $srcbuf$3$us$us$i + ($srcbuf$3$us$us$i & 2) | 0;
    while (1) {
     $add49$us$i = $ofs$4$us$i + (HEAPU16[$srcbuf$6$us$i >> 1] | 0) | 0;
     $21 = HEAP16[$srcbuf$6$us$i + 2 >> 1] | 0;
     $conv51$us$i = $21 & 65535;
     $add$ptr52$us$i = $srcbuf$6$us$i + 4 | 0;
     if (!($21 << 16 >> 16)) {
      $ofs$5$us$i = $add49$us$i;
      $srcbuf$7$us$i = $add$ptr52$us$i;
     } else {
      $ofs$5$us$i = $add49$us$i + $conv51$us$i | 0;
      $srcbuf$7$us$i = $add$ptr52$us$i + (FUNCTION_TABLE_iiiiii[$uncopy_transl_16$uncopy_32$i & 7]($dst$0$us$i + ($add49$us$i << 2) | 0, $add$ptr52$us$i, $conv51$us$i, $11, $10) | 0) | 0;
     }
     if (($ofs$5$us$i | 0) < ($12 | 0)) {
      $ofs$4$us$i = $ofs$5$us$i;
      $srcbuf$6$us$i = $srcbuf$7$us$i;
     } else break;
    }
    $dst$0$us$i = $dst$0$us$i + (HEAP32[$pitch$i >> 2] >> 2 << 2) | 0;
    $srcbuf$0$us$i = $srcbuf$7$us$i;
   }
  } else {
   $dst$0$i = $18;
   $srcbuf$0$i = $19;
   while (1) {
    $ofs$0$i = 0;
    $srcbuf$1$i = $srcbuf$0$i;
    while (1) {
     $27 = HEAP16[$srcbuf$1$i + 2 >> 1] | 0;
     $conv24$i = $27 & 65535;
     $add$ptr25$i = $srcbuf$1$i + 4 | 0;
     $ofs$1$i = $ofs$0$i + (HEAPU16[$srcbuf$1$i >> 1] | 0) | 0;
     if (!($27 << 16 >> 16)) if (!$ofs$1$i) break L4; else {
      $ofs$2$i = $ofs$1$i;
      $srcbuf$3$i = $add$ptr25$i;
     } else {
      $ofs$2$i = $ofs$1$i + $conv24$i | 0;
      $srcbuf$3$i = $add$ptr25$i + (FUNCTION_TABLE_iiiiii[$uncopy_opaque_16$uncopy_32$i & 7]($dst$0$i + ($ofs$1$i << 2) | 0, $add$ptr25$i, $conv24$i, $11, $10) | 0) | 0;
     }
     if (($ofs$2$i | 0) < ($12 | 0)) {
      $ofs$0$i = $ofs$2$i;
      $srcbuf$1$i = $srcbuf$3$i;
     } else break;
    }
    $ofs$4$i = 0;
    $srcbuf$6$i = $srcbuf$3$i;
    while (1) {
     $add49$i = $ofs$4$i + (HEAPU16[$srcbuf$6$i >> 1] | 0) | 0;
     $29 = HEAP16[$srcbuf$6$i + 2 >> 1] | 0;
     $conv51$i = $29 & 65535;
     $add$ptr52$i = $srcbuf$6$i + 4 | 0;
     if (!($29 << 16 >> 16)) {
      $ofs$5$i = $add49$i;
      $srcbuf$7$i = $add$ptr52$i;
     } else {
      $ofs$5$i = $add49$i + $conv51$i | 0;
      $srcbuf$7$i = $add$ptr52$i + (FUNCTION_TABLE_iiiiii[$uncopy_transl_16$uncopy_32$i & 7]($dst$0$i + ($add49$i << 2) | 0, $add$ptr52$i, $conv51$i, $11, $10) | 0) | 0;
     }
     if (($ofs$5$i | 0) < ($12 | 0)) {
      $ofs$4$i = $ofs$5$i;
      $srcbuf$6$i = $srcbuf$7$i;
     } else break;
    }
    $dst$0$i = $dst$0$i + (HEAP32[$pitch$i >> 2] >> 2 << 2) | 0;
    $srcbuf$0$i = $srcbuf$7$i;
   }
  }
 } while (0);
 $32 = HEAP32[$map >> 2] | 0;
 $flags33 = $32 + 68 | 0;
 HEAP32[$flags33 >> 2] = HEAP32[$flags33 >> 2] & -24577;
 _SDL_free(HEAP32[$32 + 12 >> 2] | 0);
 HEAP32[(HEAP32[$map >> 2] | 0) + 12 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _SDL_PeepEvents($events, $numevents, $action, $minType, $maxType) {
 $events = $events | 0;
 $numevents = $numevents | 0;
 $action = $action | 0;
 $minType = $minType | 0;
 $maxType = $maxType | 0;
 var $$in = 0, $$in4653$us = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $25 = 0, $4 = 0, $5 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call$i = 0, $call26$i = 0, $call45 = 0, $call5$i = 0, $cmp13 = 0, $entry1$0$i = 0, $i$050 = 0, $msg$i = 0, $next18 = 0, $next28 = 0, $next43 = 0, $prev$i39 = 0, $retval$0 = 0, $retval$0$i = 0, $spec$select = 0, $used$049 = 0, $used$155 = 0, $used$155$us = 0, $used$2 = 0, $used$3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $wmmsg$061 = 0, $wmmsg$1 = 0, dest = 0, sp = 0, src = 0, stop = 0, $$in4653$us$looptemp = 0, $$in$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!(_SDL_AtomicGet(3276) | 0)) {
  if (!$action) {
   $retval$0 = -1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  _SDL_SetError(5073, $vararg_buffer) | 0;
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = HEAP32[818] | 0;
 if ($0 | 0) if (_SDL_LockMutex($0) | 0) {
  $retval$0 = _SDL_SetError(5141, $vararg_buffer3) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 L13 : do if (!$action) if (($numevents | 0) > 0) {
  $i$050 = 0;
  $used$049 = 0;
  while (1) {
   $arrayidx = $events + ($i$050 * 56 | 0) | 0;
   $call$i = _SDL_AtomicGet(3280) | 0;
   do if (($call$i | 0) > 65534) {
    HEAP32[$vararg_buffer1 >> 2] = $call$i;
    _SDL_SetError(5109, $vararg_buffer1) | 0;
    $retval$0$i = 0;
   } else {
    $1 = HEAP32[824] | 0;
    if (!$1) {
     $call5$i = _SDL_malloc(80) | 0;
     if (!$call5$i) {
      $retval$0$i = 0;
      break;
     } else $entry1$0$i = $call5$i;
    } else {
     HEAP32[824] = HEAP32[$1 + 72 >> 2];
     $entry1$0$i = $1;
    }
    dest = $entry1$0$i;
    src = $arrayidx;
    stop = dest + 56 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    if ((HEAP32[$arrayidx >> 2] | 0) == 513) {
     $msg$i = $entry1$0$i + 56 | 0;
     $4 = HEAP32[$events + ($i$050 * 56 | 0) + 8 >> 2] | 0;
     HEAP32[$msg$i >> 2] = HEAP32[$4 >> 2];
     HEAP32[$msg$i + 4 >> 2] = HEAP32[$4 + 4 >> 2];
     HEAP32[$msg$i + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     HEAP32[$entry1$0$i + 8 >> 2] = $msg$i;
    }
    $5 = HEAP32[823] | 0;
    if (!$5) {
     HEAP32[822] = $entry1$0$i;
     HEAP32[823] = $entry1$0$i;
     HEAP32[$entry1$0$i + 68 >> 2] = 0;
    } else {
     HEAP32[$5 + 72 >> 2] = $entry1$0$i;
     HEAP32[$entry1$0$i + 68 >> 2] = $5;
     HEAP32[823] = $entry1$0$i;
    }
    HEAP32[$entry1$0$i + 72 >> 2] = 0;
    $call26$i = _SDL_AtomicAdd(3280, 1) | 0;
    if (($call26$i | 0) < (HEAP32[821] | 0)) $retval$0$i = 1; else {
     HEAP32[821] = $call26$i + 1;
     $retval$0$i = 1;
    }
   } while (0);
   $add = $retval$0$i + $used$049 | 0;
   $i$050 = $i$050 + 1 | 0;
   if (($i$050 | 0) == ($numevents | 0)) {
    $used$3 = $add;
    break;
   } else $used$049 = $add;
  }
 } else $used$3 = 0; else {
  $cmp13 = ($action | 0) == 2;
  if ($cmp13) {
   $9 = HEAP32[825] | 0;
   if ($9 | 0) {
    $11 = HEAP32[826] | 0;
    $wmmsg$061 = $9;
    while (1) {
     $next18 = $wmmsg$061 + 12 | 0;
     $10 = HEAP32[$next18 >> 2] | 0;
     HEAP32[$next18 >> 2] = $11;
     if (!$10) break; else {
      $11 = $wmmsg$061;
      $wmmsg$061 = $10;
     }
    }
    HEAP32[826] = $wmmsg$061;
   }
   HEAP32[825] = 0;
  }
  $13 = HEAP32[822] | 0;
  if (!$13) $used$3 = 0; else {
   if (!$events) {
    $$in4653$us = $13;
    $used$155$us = 0;
    while (1) {
     $$in4653$us$looptemp = $$in4653$us;
     $$in4653$us = HEAP32[$$in4653$us + 72 >> 2] | 0;
     $15 = HEAP32[$$in4653$us$looptemp >> 2] | 0;
     $spec$select = $used$155$us + ($15 >>> 0 <= $maxType >>> 0 & $15 >>> 0 >= $minType >>> 0 & 1) | 0;
     if (!$$in4653$us) {
      $used$3 = $spec$select;
      break L13;
     } else $used$155$us = $spec$select;
    }
   }
   $$in = $13;
   $used$155 = 0;
   while (1) {
    if (($used$155 | 0) >= ($numevents | 0)) {
     $used$3 = $used$155;
     break L13;
    }
    $next28 = $$in + 72 | 0;
    $$in$looptemp = $$in;
    $$in = HEAP32[$next28 >> 2] | 0;
    $17 = HEAP32[$$in$looptemp >> 2] | 0;
    if ($17 >>> 0 < $minType >>> 0 | $17 >>> 0 > $maxType >>> 0) $used$2 = $used$155; else {
     dest = $events + ($used$155 * 56 | 0) | 0;
     src = $$in$looptemp;
     stop = dest + 56 | 0;
     do {
      HEAP32[dest >> 2] = HEAP32[src >> 2];
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     if (($17 | 0) == 513) {
      $18 = HEAP32[826] | 0;
      if (!$18) {
       $call45 = _SDL_malloc(16) | 0;
       $$pre$phiZ2D = $call45 + 12 | 0;
       $wmmsg$1 = $call45;
      } else {
       $next43 = $18 + 12 | 0;
       HEAP32[826] = HEAP32[$next43 >> 2];
       $$pre$phiZ2D = $next43;
       $wmmsg$1 = $18;
      }
      $20 = HEAP32[$$in$looptemp + 8 >> 2] | 0;
      HEAP32[$wmmsg$1 >> 2] = HEAP32[$20 >> 2];
      HEAP32[$wmmsg$1 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
      HEAP32[$wmmsg$1 + 8 >> 2] = HEAP32[$20 + 8 >> 2];
      HEAP32[$$pre$phiZ2D >> 2] = HEAP32[825];
      HEAP32[825] = $wmmsg$1;
      HEAP32[$events + ($used$155 * 56 | 0) + 8 >> 2] = $wmmsg$1;
     }
     if ($cmp13) {
      $prev$i39 = $$in$looptemp + 68 | 0;
      $22 = HEAP32[$prev$i39 >> 2] | 0;
      if ($22 | 0) HEAP32[$22 + 72 >> 2] = HEAP32[$next28 >> 2];
      $25 = HEAP32[$next28 >> 2] | 0;
      if ($25 | 0) HEAP32[$25 + 68 >> 2] = $22;
      if ((HEAP32[822] | 0) == ($$in$looptemp | 0)) HEAP32[822] = $25;
      if ((HEAP32[823] | 0) == ($$in$looptemp | 0)) HEAP32[823] = HEAP32[$prev$i39 >> 2];
      HEAP32[$next28 >> 2] = HEAP32[824];
      HEAP32[824] = $$in$looptemp;
      _SDL_AtomicAdd(3280, -1) | 0;
     }
     $used$2 = $used$155 + 1 | 0;
    }
    if (!$$in) {
     $used$3 = $used$2;
     break;
    } else $used$155 = $used$2;
   }
  }
 } while (0);
 if (!(HEAP32[818] | 0)) {
  $retval$0 = $used$3;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $retval$0 = $used$3;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $17 = 0, $22 = 0, $3 = 0, $30 = 0, $7 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0, $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0, $tobool181 = 0, $tobool55 = 0, $tobool61 = 0, $trunc = 0, label = 0;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0 = 24;
   $emin$0 = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0 = 53;
   $emin$0 = -1074;
   label = 4;
   break;
  }
 default:
  $retval$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $rpos = $f + 4 | 0;
  $shend = $f + 104 | 0;
  do {
   $0 = HEAP32[$rpos >> 2] | 0;
   if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $0 + 1;
    $cond = HEAPU8[$0 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L13 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub13 = 1 - ((($cond | 0) == 45 & 1) << 1) | 0;
    $3 = HEAP32[$rpos >> 2] | 0;
    if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $3 + 1;
     $c$0 = HEAPU8[$3 >> 0] | 0;
     $sign$0 = $sub13;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $sub13;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $sign$0 = 1;
   }
  } while (0);
  $c$197 = $c$0;
  $i$096 = 0;
  while (1) {
   if (($c$197 | 32 | 0) != (HEAP8[6963 + $i$096 >> 0] | 0)) {
    $c$1$lcssa = $c$197;
    $trunc = $i$096;
    break;
   }
   do if ($i$096 >>> 0 < 7) {
    $7 = HEAP32[$rpos >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $7 + 1;
     $c$2 = HEAPU8[$7 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$197; while (0);
   $i$096 = $i$096 + 1 | 0;
   if ($i$096 >>> 0 >= 8) {
    $c$1$lcssa = $c$2;
    $trunc = 8;
    break;
   } else $c$197 = $c$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $tobool55 = ($pok | 0) != 0;
    if ($tobool55 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $c$395 = $c$1$lcssa;
     $i$294 = 0;
     while (1) {
      if (($c$395 | 32 | 0) != (HEAP8[6972 + $i$294 >> 0] | 0)) {
       $c$5 = $c$395;
       $i$3 = $i$294;
       break L34;
      }
      do if ($i$294 >>> 0 < 2) {
       $14 = HEAP32[$rpos >> 2] | 0;
       if ($14 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $14 + 1;
        $c$4 = HEAPU8[$14 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$395; while (0);
      $i$294 = $i$294 + 1 | 0;
      if ($i$294 >>> 0 >= 3) {
       $c$5 = $c$4;
       $i$3 = 3;
       break;
      } else $c$395 = $c$4;
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $trunc;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $17 = HEAP32[$rpos >> 2] | 0;
      if ($17 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $17 + 1;
       $cond135 = HEAPU8[$17 >> 0] | 0;
      } else $cond135 = ___shgetc($f) | 0;
      if (($cond135 | 0) != 40) {
       if (!(HEAP32[$shend >> 2] | 0)) {
        $retval$0 = nan;
        break L4;
       }
       HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while (1) {
       $22 = HEAP32[$rpos >> 2] | 0;
       if ($22 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $22 + 1;
        $cond159 = HEAPU8[$22 >> 0] | 0;
       } else $cond159 = ___shgetc($f) | 0;
       if (!(($cond159 + -48 | 0) >>> 0 < 10 | ($cond159 + -65 | 0) >>> 0 < 26)) if (!(($cond159 | 0) == 95 | ($cond159 + -97 | 0) >>> 0 < 26)) break;
       $i$4 = $i$4 + 1 | 0;
      }
      if (($cond159 | 0) == 41) {
       $retval$0 = nan;
       break L4;
      }
      $tobool181 = (HEAP32[$shend >> 2] | 0) == 0;
      if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      if (!$tobool55) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($f, 0, 0);
       $retval$0 = 0.0;
       break L4;
      }
      if (!$i$4) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while (1) {
       $dec19293$in = $dec19293$in + -1 | 0;
       if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       if (!$dec19293$in) {
        $retval$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($c$5 | 0) == 48) {
       $30 = HEAP32[$rpos >> 2] | 0;
       if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $30 + 1;
        $cond231 = HEAPU8[$30 >> 0] | 0;
       } else $cond231 = ___shgetc($f) | 0;
       if (($cond231 | 32 | 0) == 120) {
        $retval$0 = +_hexfloat($f, $bits$0, $emin$0, $sign$0, $pok);
        break L4;
       }
       if (!(HEAP32[$shend >> 2] | 0)) $c$6 = 48; else {
        HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
        $c$6 = 48;
       }
      } else $c$6 = $c$5;
      $retval$0 = +_decfloat($f, $c$6, $bits$0, $emin$0, $sign$0, $pok);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim($f, 0, 0);
      $retval$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $tobool61 = (HEAP32[$shend >> 2] | 0) == 0;
   if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $trunc >>> 0 > 3) {
    $i$190 = $trunc;
    do {
     if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $i$190 = $i$190 + -1 | 0;
    } while ($i$190 >>> 0 > 3);
   }
  }
  $retval$0 = +($sign$0 | 0) * inf;
 } while (0);
 return +$retval$0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0, $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $retval$0 = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv = $4 & 2047;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 getTempRet0() | 0;
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $10 = getTempRet0() | 0;
 L1 : do if (($9 | 0) == 0 & ($10 | 0) == 0) label = 3; else {
  $14 = ___DOUBLE_BITS_126($y) | 0;
  $16 = (getTempRet0() | 0) & 2147483647;
  if (($conv | 0) == 2047 | ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $14 >>> 0 > 0)) label = 3; else {
   $22 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $23 = getTempRet0() | 0;
   if (!($23 >>> 0 > $10 >>> 0 | ($23 | 0) == ($10 | 0) & $22 >>> 0 > $9 >>> 0)) return +(($22 | 0) == ($9 | 0) & ($23 | 0) == ($10 | 0) ? $x * 0.0 : $x);
   if (!$conv) {
    $32 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $33 = getTempRet0() | 0;
    if (($33 | 0) > -1 | ($33 | 0) == -1 & $32 >>> 0 > 4294967295) {
     $39 = $32;
     $40 = $33;
     $ex$081 = 0;
     while (1) {
      $dec = $ex$081 + -1 | 0;
      $39 = _bitshift64Shl($39 | 0, $40 | 0, 1) | 0;
      $40 = getTempRet0() | 0;
      if (!(($40 | 0) > -1 | ($40 | 0) == -1 & $39 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $dec;
       break;
      } else $ex$081 = $dec;
     }
    } else $ex$0$lcssa = 0;
    $48 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $72 = $48;
    $73 = getTempRet0() | 0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $72 = $0;
    $73 = $1 & 1048575 | 1048576;
    $ex$1 = $conv;
   }
   if (!$conv5) {
    $52 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $53 = getTempRet0() | 0;
    if (($53 | 0) > -1 | ($53 | 0) == -1 & $52 >>> 0 > 4294967295) {
     $59 = $52;
     $60 = $53;
     $ey$077 = 0;
     while (1) {
      $dec64 = $ey$077 + -1 | 0;
      $59 = _bitshift64Shl($59 | 0, $60 | 0, 1) | 0;
      $60 = getTempRet0() | 0;
      if (!(($60 | 0) > -1 | ($60 | 0) == -1 & $59 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $dec64;
       break;
      } else $ey$077 = $dec64;
     }
    } else $ey$0$lcssa = 0;
    $68 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $74 = $68;
    $75 = getTempRet0() | 0;
    $ey$1 = $ey$0$lcssa;
   } else {
    $74 = $2;
    $75 = $3 & 1048575 | 1048576;
    $ey$1 = $conv5;
   }
   $76 = _i64Subtract($72 | 0, $73 | 0, $74 | 0, $75 | 0) | 0;
   $77 = getTempRet0() | 0;
   $82 = ($77 | 0) > -1 | ($77 | 0) == -1 & $76 >>> 0 > 4294967295;
   L25 : do if (($ex$1 | 0) > ($ey$1 | 0)) {
    $136 = $72;
    $137 = $73;
    $84 = $76;
    $86 = $77;
    $cmp8571 = $82;
    $ex$268 = $ex$1;
    while (1) {
     if ($cmp8571) if (($84 | 0) == 0 & ($86 | 0) == 0) break; else {
      $88 = $84;
      $89 = $86;
     } else {
      $88 = $136;
      $89 = $137;
     }
     $90 = _bitshift64Shl($88 | 0, $89 | 0, 1) | 0;
     $91 = getTempRet0() | 0;
     $dec96 = $ex$268 + -1 | 0;
     $92 = _i64Subtract($90 | 0, $91 | 0, $74 | 0, $75 | 0) | 0;
     $93 = getTempRet0() | 0;
     $98 = ($93 | 0) > -1 | ($93 | 0) == -1 & $92 >>> 0 > 4294967295;
     if (($dec96 | 0) > ($ey$1 | 0)) {
      $136 = $90;
      $137 = $91;
      $84 = $92;
      $86 = $93;
      $cmp8571 = $98;
      $ex$268 = $dec96;
     } else {
      $100 = $92;
      $102 = $93;
      $134 = $90;
      $135 = $91;
      $cmp85$lcssa = $98;
      $ex$2$lcssa = $dec96;
      break L25;
     }
    }
    $retval$0 = $x * 0.0;
    break L1;
   } else {
    $100 = $76;
    $102 = $77;
    $134 = $72;
    $135 = $73;
    $cmp85$lcssa = $82;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($cmp85$lcssa) if (($100 | 0) == 0 & ($102 | 0) == 0) {
    $retval$0 = $x * 0.0;
    break;
   } else {
    $105 = $102;
    $107 = $100;
   } else {
    $105 = $135;
    $107 = $134;
   }
   if ($105 >>> 0 < 1048576 | ($105 | 0) == 1048576 & $107 >>> 0 < 0) {
    $111 = $107;
    $112 = $105;
    $ex$362 = $ex$2$lcssa;
    while (1) {
     $113 = _bitshift64Shl($111 | 0, $112 | 0, 1) | 0;
     $114 = getTempRet0() | 0;
     $dec117 = $ex$362 + -1 | 0;
     if ($114 >>> 0 < 1048576 | ($114 | 0) == 1048576 & $113 >>> 0 < 0) {
      $111 = $113;
      $112 = $114;
      $ex$362 = $dec117;
     } else {
      $120 = $113;
      $121 = $114;
      $ex$3$lcssa = $dec117;
      break;
     }
    }
   } else {
    $120 = $107;
    $121 = $105;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $122 = _i64Add($120 | 0, $121 | 0, 0, -1048576) | 0;
    $123 = getTempRet0() | 0;
    $124 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $131 = $123 | (getTempRet0() | 0);
    $132 = $122 | $124;
   } else {
    $128 = _bitshift64Lshr($120 | 0, $121 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $131 = getTempRet0() | 0;
    $132 = $128;
   }
   HEAP32[tempDoublePtr >> 2] = $132;
   HEAP32[tempDoublePtr + 4 >> 2] = $131 | $8;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $mul = $x * $y;
  $retval$0 = $mul / $mul;
 }
 return +$retval$0;
}

function _SDL_SendWindowEvent($window, $windowevent, $data1, $data2) {
 $window = $window | 0;
 $windowevent = $windowevent | 0;
 $data1 = $data1 | 0;
 $data2 = $data2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $8 = 0, $9 = 0, $event = 0, $flags = 0, $flags105 = 0, $flags113 = 0, $flags61 = 0, $flags71 = 0, $flags8 = 0, $flags81 = 0, $flags89 = 0, $flags97 = 0, $h53 = 0, $posted$0 = 0, $retval$0 = 0, $w49 = 0, $x31 = 0, $y34 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 if (!$window) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 L4 : do switch ($windowevent << 24 >> 24) {
 case 1:
  {
   $flags = $window + 48 | 0;
   $0 = HEAP32[$flags >> 2] | 0;
   if (!($0 & 4)) {
    HEAP32[$flags >> 2] = $0 & -13 | 4;
    _SDL_OnWindowShown($window);
    break L4;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 2:
  {
   $flags8 = $window + 48 | 0;
   $1 = HEAP32[$flags8 >> 2] | 0;
   if (!($1 & 4)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$flags8 >> 2] = $1 & -13 | 8;
    _SDL_OnWindowHidden($window);
    break L4;
   }
   break;
  }
 case 4:
  {
   if (($data1 & -65536 | 0) == 536805376 | ($data2 & -65536 | 0) == 536805376) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   if (!(HEAP32[$window + 48 >> 2] & 1)) {
    HEAP32[$window + 56 >> 2] = $data1;
    HEAP32[$window + 60 >> 2] = $data2;
   }
   $x31 = $window + 16 | 0;
   $y34 = $window + 20 | 0;
   if ((HEAP32[$x31 >> 2] | 0) == ($data1 | 0)) if ((HEAP32[$y34 >> 2] | 0) == ($data2 | 0)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   HEAP32[$x31 >> 2] = $data1;
   HEAP32[$y34 >> 2] = $data2;
   break;
  }
 case 5:
  {
   if (!(HEAP32[$window + 48 >> 2] & 1)) {
    HEAP32[$window + 64 >> 2] = $data1;
    HEAP32[$window + 68 >> 2] = $data2;
   }
   $w49 = $window + 24 | 0;
   $h53 = $window + 28 | 0;
   if ((HEAP32[$w49 >> 2] | 0) == ($data1 | 0)) if ((HEAP32[$h53 >> 2] | 0) == ($data2 | 0)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   HEAP32[$w49 >> 2] = $data1;
   HEAP32[$h53 >> 2] = $data2;
   _SDL_OnWindowResized($window);
   break;
  }
 case 7:
  {
   $flags61 = $window + 48 | 0;
   $8 = HEAP32[$flags61 >> 2] | 0;
   if (!($8 & 64)) {
    HEAP32[$flags61 >> 2] = $8 & -193 | 64;
    _SDL_OnWindowMinimized($window);
    break L4;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 8:
  {
   $flags71 = $window + 48 | 0;
   $9 = HEAP32[$flags71 >> 2] | 0;
   if (!($9 & 128)) {
    HEAP32[$flags71 >> 2] = $9 & -193 | 128;
    break L4;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 9:
  {
   $flags81 = $window + 48 | 0;
   $10 = HEAP32[$flags81 >> 2] | 0;
   if (!($10 & 192)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$flags81 >> 2] = $10 & -193;
    _SDL_OnWindowRestored($window);
    break L4;
   }
   break;
  }
 case 10:
  {
   $flags89 = $window + 48 | 0;
   $11 = HEAP32[$flags89 >> 2] | 0;
   if (!($11 & 1024)) {
    HEAP32[$flags89 >> 2] = $11 | 1024;
    _SDL_OnWindowEnter($window);
    break L4;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 11:
  {
   $flags97 = $window + 48 | 0;
   $12 = HEAP32[$flags97 >> 2] | 0;
   if (!($12 & 1024)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$flags97 >> 2] = $12 & -1025;
    break L4;
   }
   break;
  }
 case 12:
  {
   $flags105 = $window + 48 | 0;
   $13 = HEAP32[$flags105 >> 2] | 0;
   if (!($13 & 512)) {
    HEAP32[$flags105 >> 2] = $13 | 512;
    _SDL_OnWindowFocusGained($window);
    break L4;
   } else {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   break;
  }
 case 13:
  {
   $flags113 = $window + 48 | 0;
   $14 = HEAP32[$flags113 >> 2] | 0;
   if (!($14 & 512)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    HEAP32[$flags113 >> 2] = $14 & -513;
    _SDL_OnWindowFocusLost($window);
    break L4;
   }
   break;
  }
 default:
  {}
 } while (0);
 if ((_SDL_EventState(512, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[$event >> 2] = 512;
  HEAP8[$event + 12 >> 0] = $windowevent;
  HEAP32[$event + 16 >> 2] = $data1;
  HEAP32[$event + 20 >> 2] = $data2;
  HEAP32[$event + 8 >> 2] = HEAP32[$window + 4 >> 2];
  switch ($windowevent << 24 >> 24) {
  case 6:
   {
    _SDL_FilterEvents(4, $event);
    break;
   }
  case 4:
   {
    _SDL_FilterEvents(5, $event);
    break;
   }
  case 3:
   {
    _SDL_FilterEvents(6, $event);
    break;
   }
  default:
   {}
  }
  $posted$0 = (_SDL_PushEvent($event) | 0) > 0 & 1;
 } else $posted$0 = 0;
 if ($windowevent << 24 >> 24 != 14) {
  $retval$0 = $posted$0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (HEAP32[$window + 148 >> 2] | 0) {
  $retval$0 = $posted$0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (HEAP32[$window + 152 >> 2] | 0) {
  $retval$0 = $posted$0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _SDL_SendQuit() | 0;
 $retval$0 = $posted$0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_EnclosePoints($points, $count, $clip, $result) {
 $points = $points | 0;
 $count = $count | 0;
 $clip = $clip | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $added$095 = 0, $added$1 = 0, $cmp34 = 0, $cmp40 = 0, $cmp69 = 0, $cmp76 = 0, $i$094 = 0, $i$094$us = 0, $i$185 = 0, $maxx$096 = 0, $maxx$2 = 0, $maxx$486 = 0, $maxx$5 = 0, $maxx$6 = 0, $maxx$6109 = 0, $maxy$093 = 0, $maxy$1 = 0, $maxy$384 = 0, $maxy$4 = 0, $maxy$5 = 0, $maxy$5108 = 0, $minx$098 = 0, $minx$2 = 0, $minx$488 = 0, $minx$5 = 0, $minx$6 = 0, $minx$6111 = 0, $miny$097 = 0, $miny$1 = 0, $miny$387 = 0, $miny$4 = 0, $miny$5 = 0, $miny$5110 = 0, $retval$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$points) {
  HEAP32[$vararg_buffer >> 2] = 5410;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (($count | 0) < 1) {
  HEAP32[$vararg_buffer1 >> 2] = 5417;
  _SDL_SetError(5998, $vararg_buffer1) | 0;
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (!$clip) {
  if (!$result) {
   $retval$1 = 1;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  $8 = HEAP32[$points >> 2] | 0;
  $9 = HEAP32[$points + 4 >> 2] | 0;
  if (($count | 0) > 1) {
   $i$185 = 1;
   $maxx$486 = $8;
   $maxy$384 = $9;
   $minx$488 = $8;
   $miny$387 = $9;
   while (1) {
    $10 = HEAP32[$points + ($i$185 << 3) >> 2] | 0;
    $11 = HEAP32[$points + ($i$185 << 3) + 4 >> 2] | 0;
    $cmp69 = ($10 | 0) < ($minx$488 | 0);
    $maxx$5 = $cmp69 ? $maxx$486 : ($10 | 0) > ($maxx$486 | 0) ? $10 : $maxx$486;
    $minx$5 = $cmp69 ? $10 : $minx$488;
    $cmp76 = ($11 | 0) < ($miny$387 | 0);
    $maxy$4 = $cmp76 ? $maxy$384 : ($11 | 0) > ($maxy$384 | 0) ? $11 : $maxy$384;
    $miny$4 = $cmp76 ? $11 : $miny$387;
    $i$185 = $i$185 + 1 | 0;
    if (($i$185 | 0) == ($count | 0)) {
     $maxx$6 = $maxx$5;
     $maxy$5 = $maxy$4;
     $minx$6 = $minx$5;
     $miny$5 = $miny$4;
     label = 21;
     break;
    } else {
     $maxx$486 = $maxx$5;
     $maxy$384 = $maxy$4;
     $minx$488 = $minx$5;
     $miny$387 = $miny$4;
    }
   }
  } else {
   $maxx$6109 = $8;
   $maxy$5108 = $9;
   $minx$6111 = $8;
   $miny$5110 = $9;
  }
 } else {
  $0 = HEAP32[$clip >> 2] | 0;
  $1 = HEAP32[$clip + 4 >> 2] | 0;
  $2 = HEAP32[$clip + 8 >> 2] | 0;
  $add = $2 + $0 | 0;
  $3 = HEAP32[$clip + 12 >> 2] | 0;
  $add10 = $3 + $1 | 0;
  if (!(($2 | 0) > 0 & ($3 | 0) > 0)) {
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  if (!$result) {
   $i$094$us = 0;
   while (1) {
    $4 = HEAP32[$points + ($i$094$us << 3) >> 2] | 0;
    $5 = HEAP32[$points + ($i$094$us << 3) + 4 >> 2] | 0;
    if (($5 | 0) < ($add10 | 0) & ((($4 | 0) >= ($add | 0) | ($4 | 0) < ($0 | 0) | ($5 | 0) < ($1 | 0)) ^ 1)) {
     $retval$1 = 1;
     label = 23;
     break;
    }
    $i$094$us = $i$094$us + 1 | 0;
    if (($i$094$us | 0) >= ($count | 0)) {
     $retval$1 = 0;
     label = 23;
     break;
    }
   }
   if ((label | 0) == 23) {
    STACKTOP = sp;
    return $retval$1 | 0;
   }
  }
  $added$095 = 0;
  $i$094 = 0;
  $maxx$096 = 0;
  $maxy$093 = 0;
  $minx$098 = 0;
  $miny$097 = 0;
  while (1) {
   $6 = HEAP32[$points + ($i$094 << 3) >> 2] | 0;
   $7 = HEAP32[$points + ($i$094 << 3) + 4 >> 2] | 0;
   if (($7 | 0) < ($add10 | 0) & ((($6 | 0) >= ($add | 0) | ($6 | 0) < ($0 | 0) | ($7 | 0) < ($1 | 0)) ^ 1)) if (!$added$095) {
    $added$1 = 1;
    $maxx$2 = $6;
    $maxy$1 = $7;
    $minx$2 = $6;
    $miny$1 = $7;
   } else {
    $cmp34 = ($6 | 0) < ($minx$098 | 0);
    $cmp40 = ($7 | 0) < ($miny$097 | 0);
    $added$1 = $added$095;
    $maxx$2 = $cmp34 ? $maxx$096 : ($6 | 0) > ($maxx$096 | 0) ? $6 : $maxx$096;
    $maxy$1 = $cmp40 ? $maxy$093 : ($7 | 0) > ($maxy$093 | 0) ? $7 : $maxy$093;
    $minx$2 = $cmp34 ? $6 : $minx$098;
    $miny$1 = $cmp40 ? $7 : $miny$097;
   } else {
    $added$1 = $added$095;
    $maxx$2 = $maxx$096;
    $maxy$1 = $maxy$093;
    $minx$2 = $minx$098;
    $miny$1 = $miny$097;
   }
   $i$094 = $i$094 + 1 | 0;
   if (($i$094 | 0) == ($count | 0)) break; else {
    $added$095 = $added$1;
    $maxx$096 = $maxx$2;
    $maxy$093 = $maxy$1;
    $minx$098 = $minx$2;
    $miny$097 = $miny$1;
   }
  }
  if (!$added$1) {
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  } else {
   $maxx$6 = $maxx$2;
   $maxy$5 = $maxy$1;
   $minx$6 = $minx$2;
   $miny$5 = $miny$1;
   label = 21;
  }
 }
 if ((label | 0) == 21) if (!$result) {
  $retval$1 = 1;
  STACKTOP = sp;
  return $retval$1 | 0;
 } else {
  $maxx$6109 = $maxx$6;
  $maxy$5108 = $maxy$5;
  $minx$6111 = $minx$6;
  $miny$5110 = $miny$5;
 }
 HEAP32[$result >> 2] = $minx$6111;
 HEAP32[$result + 4 >> 2] = $miny$5110;
 HEAP32[$result + 8 >> 2] = $maxx$6109 + 1 - $minx$6111;
 HEAP32[$result + 12 >> 2] = $maxy$5108 + 1 - $miny$5110;
 $retval$1 = 1;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _SDL_MasksToPixelFormatEnum($bpp, $Rmask, $Gmask, $Bmask, $Amask) {
 $bpp = $bpp | 0;
 $Rmask = $Rmask | 0;
 $Gmask = $Gmask | 0;
 $Bmask = $Bmask | 0;
 $Amask = $Amask | 0;
 var $cmp101 = 0, $cmp117 = 0, $cmp124 = 0, $cmp158 = 0, $cmp162 = 0, $cmp167 = 0, $cmp198 = 0, $cmp207 = 0, $cmp34 = 0, $cmp36 = 0, $cmp38 = 0, $cmp41 = 0, $cmp52 = 0, $cmp56 = 0, $cmp61 = 0, $cmp65 = 0, $cmp92 = 0, $cmp95 = 0, $cmp97 = 0, $or$cond10 = 0, $or$cond46 = 0, $or$cond49 = 0, $or$cond52 = 0, $or$cond55 = 0, $or$cond7 = 0, $retval$0 = 0, label = 0;
 L1 : do switch ($bpp | 0) {
 case 1:
  {
   $retval$0 = 287310080;
   break;
  }
 case 4:
  {
   $retval$0 = 304088064;
   break;
  }
 case 8:
  {
   if (!$Rmask) $retval$0 = 318769153; else if (($Rmask | 0) == 224 & ($Gmask | 0) == 28 & ($Bmask | 0) == 3 & ($Amask | 0) == 0) $retval$0 = 336660481; else label = 34;
   break;
  }
 case 12:
  {
   if (!$Rmask) $retval$0 = 353504258; else if (($Rmask | 0) == 3840 & ($Gmask | 0) == 240 & ($Bmask | 0) == 15 & ($Amask | 0) == 0) $retval$0 = 353504258; else label = 34;
   break;
  }
 case 15:
  {
   if (!$Rmask) $retval$0 = 353570562; else label = 9;
   break;
  }
 case 16:
  {
   if (!$Rmask) $retval$0 = 353701890; else label = 9;
   break;
  }
 case 24:
  {
   if (($Rmask | 0) < 255) switch ($Rmask | 0) {
   case 0:
    {
     $retval$0 = 390076419;
     break L1;
     break;
    }
   default:
    {
     label = 25;
     break L1;
    }
   }
   if (($Rmask | 0) >= 16711680) switch ($Rmask | 0) {
   case 16711680:
    {
     $retval$0 = 390076419;
     break L1;
     break;
    }
   default:
    {
     label = 25;
     break L1;
    }
   }
   switch ($Rmask | 0) {
   case 255:
    break;
   default:
    {
     label = 25;
     break L1;
    }
   }
   $retval$0 = 386930691;
   break;
  }
 case 32:
  {
   if (!$Rmask) $retval$0 = 370546692; else label = 25;
   break;
  }
 default:
  label = 34;
 } while (0);
 if ((label | 0) == 9) {
  $cmp34 = ($Gmask | 0) == 992;
  $cmp36 = ($Bmask | 0) == 31;
  $or$cond7 = ($Rmask | 0) == 31744 & $cmp34 & $cmp36;
  $cmp38 = ($Amask | 0) == 0;
  if ($or$cond7 & $cmp38) $retval$0 = 353570562; else {
   $cmp41 = ($Rmask | 0) == 31;
   $or$cond10 = $cmp41 & $cmp34 & ($Bmask | 0) == 31744;
   if ($or$cond10 & $cmp38) $retval$0 = 357764866; else {
    $cmp52 = ($Gmask | 0) == 240;
    $cmp56 = ($Amask | 0) == 61440;
    if (($Rmask | 0) == 3840 & $cmp52 & ($Bmask | 0) == 15 & $cmp56) $retval$0 = 355602434; else {
     $cmp61 = ($Gmask | 0) == 3840;
     $cmp65 = ($Amask | 0) == 15;
     if (($Rmask | 0) == 61440 & $cmp61 & ($Bmask | 0) == 240 & $cmp65) $retval$0 = 356651010; else if (($Rmask | 0) == 15 & $cmp52 & ($Bmask | 0) == 3840 & $cmp56) $retval$0 = 359796738; else if (($Rmask | 0) == 240 & $cmp61 & ($Bmask | 0) == 61440 & $cmp65) $retval$0 = 360845314; else {
      $cmp92 = ($Amask | 0) == 32768;
      if ($or$cond7 & $cmp92) $retval$0 = 355667970; else {
       $cmp95 = ($Rmask | 0) == 63488;
       $cmp97 = ($Gmask | 0) == 1984;
       $cmp101 = ($Amask | 0) == 1;
       if ($cmp95 & $cmp97 & ($Bmask | 0) == 62 & $cmp101) $retval$0 = 356782082; else if ($or$cond10 & $cmp92) $retval$0 = 359862274; else {
        $cmp117 = ($Bmask | 0) == 63488;
        if (($Rmask | 0) == 62 & $cmp97 & $cmp117 & $cmp101) $retval$0 = 360976386; else {
         $cmp124 = ($Gmask | 0) == 2016;
         if ($cmp95 & $cmp124 & $cmp36 & $cmp38) $retval$0 = 353701890; else if ($cmp41 & $cmp124 & $cmp117 & $cmp38) $retval$0 = 357896194; else if (($Rmask | 0) == 63 & $cmp97 & $cmp117 & $cmp38) $retval$0 = 353701890; else label = 34;
        }
       }
      }
     }
    }
   }
  }
 } else if ((label | 0) == 25) {
  $cmp158 = ($Gmask | 0) == 65280;
  $or$cond46 = ($Rmask | 0) == 16711680 & $cmp158 & ($Bmask | 0) == 255;
  $cmp162 = ($Amask | 0) == 0;
  if ($or$cond46 & $cmp162) $retval$0 = 370546692; else {
   $cmp167 = ($Gmask | 0) == 16711680;
   $or$cond49 = ($Rmask | 0) == -16777216 & $cmp167 & ($Bmask | 0) == 65280;
   if ($or$cond49 & $cmp162) $retval$0 = 371595268; else {
    $or$cond52 = ($Rmask | 0) == 255 & $cmp158 & ($Bmask | 0) == 16711680;
    if ($or$cond52 & $cmp162) $retval$0 = 374740996; else {
     $or$cond55 = ($Rmask | 0) == 65280 & $cmp167 & ($Bmask | 0) == -16777216;
     if ($or$cond55 & $cmp162) $retval$0 = 375789572; else {
      $cmp198 = ($Amask | 0) == -16777216;
      if ($or$cond46 & $cmp198) $retval$0 = 372645892; else {
       $cmp207 = ($Amask | 0) == 255;
       if ($or$cond49 & $cmp207) $retval$0 = 373694468; else if ($or$cond52 & $cmp198) $retval$0 = 376840196; else if ($or$cond55 & $cmp207) $retval$0 = 377888772; else if (($Rmask | 0) == 1072693248 & ($Gmask | 0) == 1047552 & ($Bmask | 0) == 1023 & ($Amask | 0) == -1073741824) $retval$0 = 372711428; else label = 34;
      }
     }
    }
   }
  }
 }
 if ((label | 0) == 34) $retval$0 = 0;
 return $retval$0 | 0;
}

function _SDL_PixelFormatEnumToMasks($format, $bpp, $Rmask, $Gmask, $Bmask, $Amask) {
 $format = $format | 0;
 $bpp = $bpp | 0;
 $Rmask = $Rmask | 0;
 $Gmask = $Gmask | 0;
 $Bmask = $Bmask | 0;
 $Amask = $Amask | 0;
 var $masks$sroa$0$0 = 0, $masks$sroa$16$0 = 0, $masks$sroa$32$0 = 0, $masks$sroa$48$0 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($format | 0) == 0 | ($format & -268435456 | 0) == 268435456) {
  HEAP32[$bpp >> 2] = ($format & 255) >>> 0 < 3 ? $format >>> 8 & 255 : $format << 3 & 2040;
  HEAP32[$Amask >> 2] = 0;
  HEAP32[$Bmask >> 2] = 0;
  HEAP32[$Gmask >> 2] = 0;
  HEAP32[$Rmask >> 2] = 0;
  L3 : do if (($format | 0) < 390076419) {
   switch ($format | 0) {
   case 386930691:
    break;
   default:
    break L3;
   }
   HEAP32[$Rmask >> 2] = 255;
   HEAP32[$Gmask >> 2] = 65280;
   HEAP32[$Bmask >> 2] = 16711680;
   $retval$0 = 1;
   break L1;
  } else {
   switch ($format | 0) {
   case 390076419:
    break;
   default:
    break L3;
   }
   HEAP32[$Rmask >> 2] = 16711680;
   HEAP32[$Gmask >> 2] = 65280;
   HEAP32[$Bmask >> 2] = 255;
   $retval$0 = 1;
   break L1;
  } while (0);
  if ((($format >>> 24 & 15) + -4 | 0) >>> 0 < 3) {
   switch ($format >>> 16 & 15) {
   case 1:
    {
     $masks$sroa$0$0 = 0;
     $masks$sroa$16$0 = 224;
     $masks$sroa$32$0 = 28;
     $masks$sroa$48$0 = 3;
     break;
    }
   case 2:
    {
     $masks$sroa$0$0 = 61440;
     $masks$sroa$16$0 = 3840;
     $masks$sroa$32$0 = 240;
     $masks$sroa$48$0 = 15;
     break;
    }
   case 3:
    {
     $masks$sroa$0$0 = 32768;
     $masks$sroa$16$0 = 31744;
     $masks$sroa$32$0 = 992;
     $masks$sroa$48$0 = 31;
     break;
    }
   case 4:
    {
     $masks$sroa$0$0 = 63488;
     $masks$sroa$16$0 = 1984;
     $masks$sroa$32$0 = 62;
     $masks$sroa$48$0 = 1;
     break;
    }
   case 5:
    {
     $masks$sroa$0$0 = 0;
     $masks$sroa$16$0 = 63488;
     $masks$sroa$32$0 = 2016;
     $masks$sroa$48$0 = 31;
     break;
    }
   case 6:
    {
     $masks$sroa$0$0 = -16777216;
     $masks$sroa$16$0 = 16711680;
     $masks$sroa$32$0 = 65280;
     $masks$sroa$48$0 = 255;
     break;
    }
   case 7:
    {
     $masks$sroa$0$0 = -1073741824;
     $masks$sroa$16$0 = 1072693248;
     $masks$sroa$32$0 = 1047552;
     $masks$sroa$48$0 = 1023;
     break;
    }
   case 8:
    {
     $masks$sroa$0$0 = -4194304;
     $masks$sroa$16$0 = 4190208;
     $masks$sroa$32$0 = 4092;
     $masks$sroa$48$0 = 3;
     break;
    }
   default:
    {
     _SDL_SetError(5464, $vararg_buffer1) | 0;
     $retval$0 = 0;
     break L1;
    }
   }
   switch ($format >>> 20 & 15) {
   case 1:
    {
     HEAP32[$Rmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$32$0;
     HEAP32[$Bmask >> 2] = $masks$sroa$48$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 2:
    {
     HEAP32[$Rmask >> 2] = $masks$sroa$0$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Bmask >> 2] = $masks$sroa$32$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP32[$Amask >> 2] = $masks$sroa$0$0;
     HEAP32[$Rmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$32$0;
     HEAP32[$Bmask >> 2] = $masks$sroa$48$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 4:
    {
     HEAP32[$Rmask >> 2] = $masks$sroa$0$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Bmask >> 2] = $masks$sroa$32$0;
     HEAP32[$Amask >> 2] = $masks$sroa$48$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 5:
    {
     HEAP32[$Bmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$32$0;
     HEAP32[$Rmask >> 2] = $masks$sroa$48$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 6:
    {
     HEAP32[$Bmask >> 2] = $masks$sroa$0$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Rmask >> 2] = $masks$sroa$32$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 8:
    {
     HEAP32[$Bmask >> 2] = $masks$sroa$0$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Rmask >> 2] = $masks$sroa$32$0;
     HEAP32[$Amask >> 2] = $masks$sroa$48$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   case 7:
    {
     HEAP32[$Amask >> 2] = $masks$sroa$0$0;
     HEAP32[$Bmask >> 2] = $masks$sroa$16$0;
     HEAP32[$Gmask >> 2] = $masks$sroa$32$0;
     HEAP32[$Rmask >> 2] = $masks$sroa$48$0;
     $retval$0 = 1;
     break L1;
     break;
    }
   default:
    {
     _SDL_SetError(5464, $vararg_buffer3) | 0;
     $retval$0 = 0;
     break L1;
    }
   }
  } else $retval$0 = 1;
 } else {
  _SDL_SetError(4773, $vararg_buffer) | 0;
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _IMG_LoadTyped_RW($src, $freesrc, $type) {
 $src = $src | 0;
 $freesrc = $freesrc | 0;
 $type = $type | 0;
 var $13 = 0, $14 = 0, $15 = 0, $call$i = 0, $call12 = 0, $call15 = 0, $call49 = 0, $h = 0, $i$0$lcssa34 = 0, $i$035 = 0, $retval$1 = 0, $str1$addr$010$i = 0, $str2$addr$011$i = 0, $tobool1012$i = 0, $vararg_buffer3 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $w = sp + 24 | 0;
 $h = sp + 20 | 0;
 if (!$src) {
  _SDL_SetError(4050, sp) | 0;
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[$src + 4 >> 2] & 7]($src, 0, 0, 1) | 0;
 if ((getTempRet0() | 0) < 0) {
  _SDL_SetError(4076, sp + 8 | 0) | 0;
  if (!$freesrc) {
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  FUNCTION_TABLE_ii[HEAP32[$src + 16 >> 2] & 63]($src) | 0;
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 do if ((HEAP32[$src + 20 >> 2] | 0) == 2) {
  $call12 = _emscripten_get_preloaded_image_data_from_FILE(HEAP32[$src + 28 >> 2] | 0, $w | 0, $h | 0) | 0;
  if (!$call12) break;
  $call15 = _SDL_CreateRGBSurface(0, HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0, 32, 255, 65280, 16711680, -16777216) | 0;
  if ($call15 | 0) _memcpy(HEAP32[$call15 + 20 >> 2] | 0, $call12 | 0, Math_imul(HEAP32[$w >> 2] << 2, HEAP32[$h >> 2] | 0) | 0) | 0;
  _free($call12);
  if ($freesrc | 0) FUNCTION_TABLE_ii[HEAP32[$src + 16 >> 2] & 63]($src) | 0;
  $retval$1 = $call15;
  STACKTOP = sp;
  return $retval$1 | 0;
 } while (0);
 L25 : do if (!$type) if (!(_IMG_isCUR($src) | 0)) if (!(_IMG_isICO($src) | 0)) if (!(_IMG_isBMP($src) | 0)) if (!(_IMG_isGIF($src) | 0)) if (!(_IMG_isJPG($src) | 0)) if (!(_IMG_isLBM($src) | 0)) if (!(_IMG_isPCX($src) | 0)) if (!(_IMG_isPNG($src) | 0)) if (!(_IMG_isPNM($src) | 0)) if (!(_IMG_isTIF($src) | 0)) if (!(_IMG_isXCF($src) | 0)) if (!(_IMG_isXPM($src) | 0)) if (!(_IMG_isXV($src) | 0)) if (!(_IMG_isWEBP($src) | 0)) label = 27; else {
  $i$0$lcssa34 = 14;
  label = 24;
 } else {
  $i$0$lcssa34 = 13;
  label = 24;
 } else {
  $i$0$lcssa34 = 12;
  label = 24;
 } else {
  $i$0$lcssa34 = 11;
  label = 24;
 } else {
  $i$0$lcssa34 = 10;
  label = 24;
 } else {
  $i$0$lcssa34 = 9;
  label = 24;
 } else {
  $i$0$lcssa34 = 8;
  label = 24;
 } else {
  $i$0$lcssa34 = 7;
  label = 24;
 } else {
  $i$0$lcssa34 = 6;
  label = 24;
 } else {
  $i$0$lcssa34 = 5;
  label = 24;
 } else {
  $i$0$lcssa34 = 4;
  label = 24;
 } else {
  $i$0$lcssa34 = 3;
  label = 24;
 } else {
  $i$0$lcssa34 = 2;
  label = 24;
 } else {
  $i$0$lcssa34 = 1;
  label = 24;
 } else {
  $i$035 = 0;
  while (1) {
   L43 : do if (!$i$035) {
    $13 = HEAP8[$type >> 0] | 0;
    if ($13 << 24 >> 24) {
     $14 = $13;
     $15 = 84;
     $str1$addr$010$i = $type;
     $str2$addr$011$i = 4107;
     $tobool1012$i = 0;
     do {
      if ($tobool1012$i) break L43;
      $call$i = _toupper($14 & 255) | 0;
      if (($call$i | 0) != (_toupper($15 & 255) | 0)) break L43;
      $str1$addr$010$i = $str1$addr$010$i + 1 | 0;
      $str2$addr$011$i = $str2$addr$011$i + 1 | 0;
      $14 = HEAP8[$str1$addr$010$i >> 0] | 0;
      $15 = HEAP8[$str2$addr$011$i >> 0] | 0;
      $tobool1012$i = $15 << 24 >> 24 == 0;
     } while ($14 << 24 >> 24 != 0);
     if ($tobool1012$i) {
      $i$0$lcssa34 = 0;
      label = 24;
      break L25;
     }
    }
   } else if (FUNCTION_TABLE_ii[HEAP32[800 + ($i$035 * 12 | 0) + 4 >> 2] & 63]($src) | 0) {
    $i$0$lcssa34 = $i$035;
    label = 24;
    break L25;
   } while (0);
   $i$035 = $i$035 + 1 | 0;
   if ($i$035 >>> 0 >= 15) {
    label = 27;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $call49 = FUNCTION_TABLE_ii[HEAP32[800 + ($i$0$lcssa34 * 12 | 0) + 8 >> 2] & 63]($src) | 0;
  if (!$freesrc) {
   $retval$1 = $call49;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  FUNCTION_TABLE_ii[HEAP32[$src + 16 >> 2] & 63]($src) | 0;
  $retval$1 = $call49;
  STACKTOP = sp;
  return $retval$1 | 0;
 } else if ((label | 0) == 27) {
  if ($freesrc | 0) FUNCTION_TABLE_ii[HEAP32[$src + 16 >> 2] & 63]($src) | 0;
  _SDL_SetError(4111, $vararg_buffer3) | 0;
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 return 0;
}

function _SDL_SetError($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0.0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $ap = 0, $errmsg = 0, $fmt$addr$032 = 0, $fmt$addr$1 = 0, $fmt$addr$2 = 0, $fmt$addr$3 = 0, $inc = 0, $inc35 = 0, $inc42 = 0, $inc49 = 0, $inc64 = 0, $incdec$ptr = 0, $incdec$ptr1829 = 0, $incdec$ptr23 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $vararg_buffer = sp + 1040 | 0;
 $ap = sp + 1024 | 0;
 $errmsg = sp;
 if (!$fmt) {
  STACKTOP = sp;
  return -1;
 }
 HEAP32[3716] = 1;
 _SDL_strlcpy(14868, $fmt, 128) | 0;
 HEAP32[$ap >> 2] = $varargs;
 HEAP32[3749] = 0;
 $0 = HEAP8[$fmt >> 0] | 0;
 L4 : do if ($0 << 24 >> 24) {
  $$pr = 0;
  $1 = $0;
  $fmt$addr$032 = $fmt;
  while (1) {
   $incdec$ptr = $fmt$addr$032 + 1 | 0;
   if ($1 << 24 >> 24 == 37) {
    $fmt$addr$1 = $incdec$ptr;
    while (1) {
     $2 = HEAP8[$fmt$addr$1 >> 0] | 0;
     $incdec$ptr1829 = $fmt$addr$1 + 1 | 0;
     if ($2 << 24 >> 24 == 46 | ($2 + -48 & 255) < 10) $fmt$addr$1 = $incdec$ptr1829; else break;
    }
    L13 : do switch ($2 << 24 >> 24 | 0) {
    case 0:
     {
      $41 = $$pr;
      $fmt$addr$2 = $fmt$addr$1;
      break;
     }
    case 108:
     {
      $incdec$ptr23 = $fmt$addr$1 + 2 | 0;
      switch (HEAP8[$incdec$ptr1829 >> 0] | 0) {
      case 0:
       {
        $41 = $$pr;
        $fmt$addr$2 = $incdec$ptr1829;
        break L13;
        break;
       }
      case 117:
      case 100:
      case 105:
       {
        $10 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
        $11 = HEAP32[$10 >> 2] | 0;
        HEAP32[$ap >> 2] = $10 + 4;
        $inc = $$pr + 1 | 0;
        HEAP32[3749] = $inc;
        HEAP32[15e3 + ($$pr << 7) >> 2] = $11;
        $41 = $inc;
        $fmt$addr$2 = $incdec$ptr23;
        break L13;
        break;
       }
      default:
       {
        $41 = $$pr;
        $fmt$addr$2 = $incdec$ptr23;
        break L13;
       }
      }
      break;
     }
    case 88:
    case 120:
    case 111:
    case 117:
    case 100:
    case 105:
    case 99:
     {
      $17 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
      $18 = HEAP32[$17 >> 2] | 0;
      HEAP32[$ap >> 2] = $17 + 4;
      $inc35 = $$pr + 1 | 0;
      HEAP32[3749] = $inc35;
      HEAP32[15e3 + ($$pr << 7) >> 2] = $18;
      $41 = $inc35;
      $fmt$addr$2 = $incdec$ptr1829;
      break;
     }
    case 102:
     {
      $24 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
      $25 = +HEAPF64[$24 >> 3];
      HEAP32[$ap >> 2] = $24 + 8;
      $inc42 = $$pr + 1 | 0;
      HEAP32[3749] = $inc42;
      HEAPF64[15e3 + ($$pr << 7) >> 3] = $25;
      $41 = $inc42;
      $fmt$addr$2 = $incdec$ptr1829;
      break;
     }
    case 112:
     {
      $31 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
      $32 = HEAP32[$31 >> 2] | 0;
      HEAP32[$ap >> 2] = $31 + 4;
      $inc49 = $$pr + 1 | 0;
      HEAP32[3749] = $inc49;
      HEAP32[15e3 + ($$pr << 7) >> 2] = $32;
      $41 = $inc49;
      $fmt$addr$2 = $incdec$ptr1829;
      break;
     }
    case 115:
     {
      $38 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
      $39 = HEAP32[$38 >> 2] | 0;
      HEAP32[$ap >> 2] = $38 + 4;
      _SDL_strlcpy(15e3 + ($$pr << 7) | 0, ($39 | 0) == 0 ? 6923 : $39, 128) | 0;
      $inc64 = (HEAP32[3749] | 0) + 1 | 0;
      HEAP32[3749] = $inc64;
      $41 = $inc64;
      $fmt$addr$2 = $incdec$ptr1829;
      break;
     }
    default:
     {
      $41 = $$pr;
      $fmt$addr$2 = $incdec$ptr1829;
     }
    } while (0);
    if (($41 | 0) > 4) break L4; else {
     $43 = $41;
     $fmt$addr$3 = $fmt$addr$2;
    }
   } else {
    $43 = $$pr;
    $fmt$addr$3 = $incdec$ptr;
   }
   $1 = HEAP8[$fmt$addr$3 >> 0] | 0;
   if (!($1 << 24 >> 24)) break; else {
    $$pr = $43;
    $fmt$addr$032 = $fmt$addr$3;
   }
  }
 } while (0);
 if ((_SDL_LogGetPriority(1) | 0) >>> 0 >= 3) {
  STACKTOP = sp;
  return -1;
 }
 _SDL_GetErrorMsg($errmsg) | 0;
 HEAP32[$vararg_buffer >> 2] = $errmsg;
 _SDL_LogDebug(1, 4812, $vararg_buffer);
 STACKTOP = sp;
 return -1;
}

function _SDL_GetClosestDisplayModeForDisplay($display, $mode, $closest) {
 $display = $display | 0;
 $mode = $mode | 0;
 $closest = $closest | 0;
 var $$sink = 0, $$sink71 = 0, $0 = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $and56 = 0, $arrayidx = 0, $display_modes$i = 0, $h24 = 0, $i$0 = 0, $match$0 = 0, $match$1 = 0, $num_display_modes$i = 0, $refresh_rate = 0, $retval$0 = 0, $target_format$0 = 0, $target_refresh_rate$0 = 0, $tobool15 = 0, $w17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(($mode | 0) != 0 & ($closest | 0) != 0)) {
  _SDL_SetError(5298, sp) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = HEAP32[$mode >> 2] | 0;
 if (!$0) $target_format$0 = HEAP32[$display + 16 >> 2] | 0; else $target_format$0 = $0;
 $refresh_rate = $mode + 12 | 0;
 $2 = HEAP32[$refresh_rate >> 2] | 0;
 if (!$2) $target_refresh_rate$0 = HEAP32[$display + 28 >> 2] | 0; else $target_refresh_rate$0 = $2;
 $w17 = $mode + 4 | 0;
 $num_display_modes$i = $display + 8 | 0;
 $display_modes$i = $display + 12 | 0;
 $h24 = $mode + 8 | 0;
 $and56 = $target_format$0 >>> 8 & 255;
 $4 = HEAP32[$num_display_modes$i >> 2] | 0;
 $i$0 = 0;
 $match$0 = 0;
 while (1) {
  if (!$4) {
   $5 = HEAP32[7] | 0;
   if (!$5) $8 = 0; else {
    FUNCTION_TABLE_vii[$5 & 63](0, $display);
    _SDL_qsort(HEAP32[$display_modes$i >> 2] | 0, HEAP32[$num_display_modes$i >> 2] | 0, 20, 7);
    $8 = HEAP32[$num_display_modes$i >> 2] | 0;
   }
  } else $8 = $4;
  if (($i$0 | 0) >= ($8 | 0)) break;
  $9 = HEAP32[$display_modes$i >> 2] | 0;
  $arrayidx = $9 + ($i$0 * 20 | 0) | 0;
  $10 = HEAP32[$9 + ($i$0 * 20 | 0) + 4 >> 2] | 0;
  $tobool15 = ($10 | 0) == 0;
  if (!$tobool15) if (($10 | 0) < (HEAP32[$w17 >> 2] | 0)) break;
  $12 = HEAP32[$9 + ($i$0 * 20 | 0) + 8 >> 2] | 0;
  if (!$12) label = 18; else if (($12 | 0) < (HEAP32[$h24 >> 2] | 0)) if ($tobool15) $match$1 = $match$0; else if (($10 | 0) == (HEAP32[$w17 >> 2] | 0)) break; else $match$1 = $match$0; else label = 18;
  do if ((label | 0) == 18) {
   label = 0;
   if (!$match$0) $match$1 = $arrayidx; else if (($10 | 0) < (HEAP32[$match$0 + 4 >> 2] | 0)) $match$1 = $arrayidx; else if (($12 | 0) < (HEAP32[$match$0 + 8 >> 2] | 0)) $match$1 = $arrayidx; else {
    $17 = HEAP32[$arrayidx >> 2] | 0;
    if (($17 | 0) == (HEAP32[$match$0 >> 2] | 0)) {
     $20 = HEAP32[$9 + ($i$0 * 20 | 0) + 12 >> 2] | 0;
     $match$1 = (($20 | 0) < ($target_refresh_rate$0 | 0) ? 1 : ($20 | 0) == (HEAP32[$match$0 + 12 >> 2] | 0)) ? $match$0 : $arrayidx;
     break;
    }
    if (($17 | 0) != ($target_format$0 | 0)) {
     if (($17 >>> 8 & 255) >>> 0 < $and56 >>> 0) {
      $match$1 = $match$0;
      break;
     }
     if (($17 ^ $target_format$0) & 251658240 | 0) {
      $match$1 = $match$0;
      break;
     }
    }
    $match$1 = $arrayidx;
   }
  } while (0);
  $4 = $8;
  $i$0 = $i$0 + 1 | 0;
  $match$0 = $match$1;
 }
 if (!$match$0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $22 = HEAP32[$match$0 >> 2] | 0;
 if (!$22) $24 = HEAP32[$mode >> 2] | 0; else $24 = $22;
 HEAP32[$closest >> 2] = $24;
 $25 = HEAP32[$match$0 + 4 >> 2] | 0;
 if (!$25) label = 34; else {
  $26 = HEAP32[$match$0 + 8 >> 2] | 0;
  if (!$26) label = 34; else {
   HEAP32[$closest + 4 >> 2] = $25;
   $$sink = $26;
   $33 = $25;
  }
 }
 if ((label | 0) == 34) {
  $27 = HEAP32[$w17 >> 2] | 0;
  HEAP32[$closest + 4 >> 2] = $27;
  $$sink = HEAP32[$h24 >> 2] | 0;
  $33 = $27;
 }
 HEAP32[$closest + 8 >> 2] = $$sink;
 $29 = HEAP32[$match$0 + 12 >> 2] | 0;
 if (!$29) $$sink71 = HEAP32[$refresh_rate >> 2] | 0; else $$sink71 = $29;
 HEAP32[$closest + 12 >> 2] = $$sink71;
 HEAP32[$closest + 16 >> 2] = HEAP32[$match$0 + 16 >> 2];
 if (!$24) HEAP32[$closest >> 2] = 370546692;
 if (!$33) HEAP32[$closest + 4 >> 2] = 640;
 if ($$sink | 0) {
  $retval$0 = $closest;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$closest + 8 >> 2] = 480;
 $retval$0 = $closest;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_InitFormat($format, $pixel_format) {
 $format = $format | 0;
 $pixel_format = $pixel_format | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Aloss = 0, $Amask = 0, $Ashift = 0, $Bloss = 0, $Bmask = 0, $Bshift = 0, $Gloss = 0, $Gmask = 0, $Gshift = 0, $Rloss = 0, $Rmask = 0, $Rshift = 0, $bpp = 0, $mask$069 = 0, $mask$166 = 0, $mask$166$ph = 0, $mask$262 = 0, $mask$359 = 0, $mask$359$ph = 0, $mask$455 = 0, $mask$552 = 0, $mask$552$ph = 0, $mask$649 = 0, $mask$746 = 0, $mask$746$ph = 0, $retval$0 = 0, $shr = 0, $shr29 = 0, $shr52 = 0, $shr75 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $bpp = sp + 16 | 0;
 $Rmask = sp + 12 | 0;
 $Gmask = sp + 8 | 0;
 $Bmask = sp + 4 | 0;
 $Amask = sp;
 if (!(_SDL_PixelFormatEnumToMasks($pixel_format, $bpp, $Rmask, $Gmask, $Bmask, $Amask) | 0)) {
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _SDL_memset($format, 0, 44) | 0;
 HEAP32[$format >> 2] = $pixel_format;
 $0 = HEAP32[$bpp >> 2] | 0;
 HEAP8[$format + 8 >> 0] = $0;
 HEAP8[$format + 9 >> 0] = ($0 + 7 | 0) / 8 | 0;
 $1 = HEAP32[$Rmask >> 2] | 0;
 HEAP32[$format + 12 >> 2] = $1;
 $Rshift = $format + 32 | 0;
 HEAP8[$Rshift >> 0] = 0;
 $Rloss = $format + 28 | 0;
 HEAP8[$Rloss >> 0] = 8;
 do if ($1 | 0) {
  if (!($1 & 1)) {
   $2 = 0;
   $mask$069 = $1;
   while (1) {
    $2 = $2 + 1 << 24 >> 24;
    $shr = $mask$069 >>> 1;
    if ($mask$069 & 2 | 0) break; else $mask$069 = $shr;
   }
   HEAP8[$Rshift >> 0] = $2;
   if (!($mask$069 & 2)) break; else $mask$166$ph = $shr;
  } else $mask$166$ph = $1;
  $3 = 8;
  $mask$166 = $mask$166$ph;
  while (1) {
   $3 = $3 + -1 << 24 >> 24;
   if (!($mask$166 & 2)) break; else $mask$166 = $mask$166 >>> 1;
  }
  HEAP8[$Rloss >> 0] = $3;
 } while (0);
 $4 = HEAP32[$Gmask >> 2] | 0;
 HEAP32[$format + 16 >> 2] = $4;
 $Gshift = $format + 33 | 0;
 HEAP8[$Gshift >> 0] = 0;
 $Gloss = $format + 29 | 0;
 HEAP8[$Gloss >> 0] = 8;
 do if ($4 | 0) {
  if (!($4 & 1)) {
   $5 = 0;
   $mask$262 = $4;
   while (1) {
    $5 = $5 + 1 << 24 >> 24;
    $shr29 = $mask$262 >>> 1;
    if ($mask$262 & 2 | 0) break; else $mask$262 = $shr29;
   }
   HEAP8[$Gshift >> 0] = $5;
   if (!($mask$262 & 2)) break; else $mask$359$ph = $shr29;
  } else $mask$359$ph = $4;
  $6 = 8;
  $mask$359 = $mask$359$ph;
  while (1) {
   $6 = $6 + -1 << 24 >> 24;
   if (!($mask$359 & 2)) break; else $mask$359 = $mask$359 >>> 1;
  }
  HEAP8[$Gloss >> 0] = $6;
 } while (0);
 $7 = HEAP32[$Bmask >> 2] | 0;
 HEAP32[$format + 20 >> 2] = $7;
 $Bshift = $format + 34 | 0;
 HEAP8[$Bshift >> 0] = 0;
 $Bloss = $format + 30 | 0;
 HEAP8[$Bloss >> 0] = 8;
 do if ($7 | 0) {
  if (!($7 & 1)) {
   $8 = 0;
   $mask$455 = $7;
   while (1) {
    $8 = $8 + 1 << 24 >> 24;
    $shr52 = $mask$455 >>> 1;
    if ($mask$455 & 2 | 0) break; else $mask$455 = $shr52;
   }
   HEAP8[$Bshift >> 0] = $8;
   if (!($mask$455 & 2)) break; else $mask$552$ph = $shr52;
  } else $mask$552$ph = $7;
  $9 = 8;
  $mask$552 = $mask$552$ph;
  while (1) {
   $9 = $9 + -1 << 24 >> 24;
   if (!($mask$552 & 2)) break; else $mask$552 = $mask$552 >>> 1;
  }
  HEAP8[$Bloss >> 0] = $9;
 } while (0);
 $10 = HEAP32[$Amask >> 2] | 0;
 HEAP32[$format + 24 >> 2] = $10;
 $Ashift = $format + 35 | 0;
 HEAP8[$Ashift >> 0] = 0;
 $Aloss = $format + 31 | 0;
 HEAP8[$Aloss >> 0] = 8;
 do if ($10 | 0) {
  if (!($10 & 1)) {
   $11 = 0;
   $mask$649 = $10;
   while (1) {
    $11 = $11 + 1 << 24 >> 24;
    $shr75 = $mask$649 >>> 1;
    if ($mask$649 & 2 | 0) break; else $mask$649 = $shr75;
   }
   HEAP8[$Ashift >> 0] = $11;
   if (!($mask$649 & 2)) break; else $mask$746$ph = $shr75;
  } else $mask$746$ph = $10;
  $12 = 8;
  $mask$746 = $mask$746$ph;
  while (1) {
   $12 = $12 + -1 << 24 >> 24;
   if (!($mask$746 & 2)) break; else $mask$746 = $mask$746 >>> 1;
  }
  HEAP8[$Aloss >> 0] = $12;
 } while (0);
 HEAP32[$format + 4 >> 2] = 0;
 HEAP32[$format + 36 >> 2] = 1;
 HEAP32[$format + 40 >> 2] = 0;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_CreateRGBSurfaceWithFormat($flags, $width, $height, $depth, $format) {
 $flags = $flags | 0;
 $width = $width | 0;
 $height = $height | 0;
 $depth = $depth | 0;
 $format = $format | 0;
 var $0 = 0, $12 = 0, $15 = 0, $16 = 0, $26 = 0, $3 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $call34 = 0, $call76 = 0, $call91 = 0, $cond6$i = 0, $flags1$i = 0, $format3 = 0, $h = 0, $mul$i = 0, $or$i = 0, $pitch = 0, $pitch$0$i = 0, $retval$3 = 0, $w = 0;
 $call = _SDL_calloc(1, 60) | 0;
 if (!$call) {
  _SDL_Error(0) | 0;
  $retval$3 = 0;
  return $retval$3 | 0;
 }
 $call2 = _SDL_AllocFormat($format) | 0;
 $format3 = $call + 4 | 0;
 HEAP32[$format3 >> 2] = $call2;
 if (!$call2) {
  _SDL_FreeSurface($call);
  $retval$3 = 0;
  return $retval$3 | 0;
 }
 $w = $call + 8 | 0;
 HEAP32[$w >> 2] = $width;
 $h = $call + 12 | 0;
 HEAP32[$h >> 2] = $height;
 L9 : do if (($format | 0) == 0 | ($format & -268435456 | 0) == 268435456) $cond6$i = $format & 255; else {
  if (($format | 0) < 1498831189) switch ($format | 0) {
  case 844715353:
   {
    $cond6$i = 2;
    break L9;
    break;
   }
  default:
   {}
  } else switch ($format | 0) {
  case 1498831189:
   {
    $cond6$i = 2;
    break L9;
    break;
   }
  default:
   {}
  }
  $cond6$i = ($format | 0) == 1431918169 ? 2 : 1;
 } while (0);
 $mul$i = Math_imul($cond6$i, $width) | 0;
 switch (($format >>> 8 & 255) << 24 >> 24) {
 case 1:
  {
   $pitch$0$i = ($mul$i + 7 | 0) / 8 | 0;
   break;
  }
 case 4:
  {
   $pitch$0$i = ($mul$i + 1 | 0) / 2 | 0;
   break;
  }
 default:
  $pitch$0$i = $mul$i;
 }
 $pitch = $call + 16 | 0;
 HEAP32[$pitch >> 2] = $pitch$0$i + 3 & -4;
 HEAP32[$call + 36 >> 2] = 0;
 HEAP32[$call + 40 >> 2] = 0;
 HEAP32[$call + 44 >> 2] = $width;
 HEAP32[$call + 48 >> 2] = $height;
 $0 = HEAP32[$call2 >> 2] | 0;
 if (($0 | 0) == 0 | ($0 & -268435456 | 0) == 268435456) if ((($0 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
  $call34 = _SDL_AllocPalette(1 << (HEAPU8[$call2 + 8 >> 0] | 0)) | 0;
  if (!$call34) {
   _SDL_FreeSurface($call);
   $retval$3 = 0;
   return $retval$3 | 0;
  }
  if ((HEAP32[$call34 >> 2] | 0) == 2) {
   $3 = HEAP32[$call34 + 4 >> 2] | 0;
   HEAP8[$3 >> 0] = -1;
   HEAP8[$3 + 1 >> 0] = -1;
   HEAP8[$3 + 2 >> 0] = -1;
   HEAP8[$3 + 4 >> 0] = 0;
   HEAP8[$3 + 5 >> 0] = 0;
   HEAP8[$3 + 6 >> 0] = 0;
   if ((_SDL_SetPixelFormatPalette(HEAP32[$format3 >> 2] | 0, $call34) | 0) >= 0) _SDL_InvalidateMap(HEAP32[$call + 52 >> 2] | 0);
  } else if ((_SDL_SetPixelFormatPalette(HEAP32[$format3 >> 2] | 0, $call34) | 0) >= 0) _SDL_InvalidateMap(HEAP32[$call + 52 >> 2] | 0);
  _SDL_FreePalette($call34);
  $8 = HEAP32[$w >> 2] | 0;
 } else $8 = $width; else $8 = $width;
 do if ($8 | 0) {
  $9 = HEAP32[$h >> 2] | 0;
  if ($9 | 0) {
   $12 = HEAP32[$pitch >> 2] | 0;
   $15 = ___muldi3($12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0, $9 | 0, (($9 | 0) < 0) << 31 >> 31 | 0) | 0;
   $16 = getTempRet0() | 0;
   if ($16 >>> 0 > 0 | ($16 | 0) == 0 & $15 >>> 0 > 2147483647) {
    _SDL_FreeSurface($call);
    _SDL_Error(0) | 0;
    $retval$3 = 0;
    return $retval$3 | 0;
   }
   $call76 = _SDL_malloc($15) | 0;
   HEAP32[$call + 20 >> 2] = $call76;
   if ($call76 | 0) {
    _SDL_memset($call76, 0, Math_imul(HEAP32[$pitch >> 2] | 0, HEAP32[$h >> 2] | 0) | 0) | 0;
    break;
   }
   _SDL_FreeSurface($call);
   _SDL_Error(0) | 0;
   $retval$3 = 0;
   return $retval$3 | 0;
  }
 } while (0);
 $call91 = _SDL_AllocBlitMap() | 0;
 HEAP32[$call + 52 >> 2] = $call91;
 if (!$call91) {
  _SDL_FreeSurface($call);
  $retval$3 = 0;
  return $retval$3 | 0;
 }
 if (HEAP32[(HEAP32[$format3 >> 2] | 0) + 24 >> 2] | 0) {
  $flags1$i = $call91 + 68 | 0;
  $26 = HEAP32[$flags1$i >> 2] | 0;
  $or$i = $26 & -113 | 16;
  HEAP32[$flags1$i >> 2] = $or$i;
  if (($or$i | 0) != ($26 | 0)) _SDL_InvalidateMap($call91);
 }
 HEAP32[$call + 56 >> 2] = 1;
 $retval$3 = $call;
 return $retval$3 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type$0 = 0, $found_any_static_type$1$off0$in = 0, $found_any_static_type5 = 0, $found_our_static_ptr$0 = 0, $found_our_static_ptr$1$off0$in = 0, $found_our_static_ptr2 = 0, $or2438 = 0, $or37 = 0, $or5850 = 0, $or6651 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $3 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $or37 = $4 | $1;
  $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $or2438 = $5 | $2;
  L4 : do if (($3 | 0) > 1) {
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $__flags = $this + 8 | 0;
   $search_done = $info + 54 | 0;
   $12 = $5;
   $9 = $4;
   $found_any_static_type$0 = $or2438;
   $found_our_static_ptr$0 = $or37;
   $p$0 = $this + 24 | 0;
   while (1) {
    $7 = $found_any_static_type$0 & 1;
    $8 = $found_our_static_ptr$0 & 1;
    if (HEAP8[$search_done >> 0] | 0) {
     $found_any_static_type$1$off0$in = $7;
     $found_our_static_ptr$1$off0$in = $8;
     break L4;
    }
    if (!($9 << 24 >> 24)) {
     if ($12 << 24 >> 24) if (!(HEAP32[$__flags >> 2] & 1)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    } else {
     if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
     if (!(HEAP32[$__flags >> 2] & 2)) {
      $found_any_static_type$1$off0$in = $7;
      $found_our_static_ptr$1$off0$in = $8;
      break L4;
     }
    }
    HEAP8[$found_our_static_ptr2 >> 0] = 0;
    HEAP8[$found_any_static_type5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $9 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
    $or5850 = $9 | $8;
    $12 = HEAP8[$found_any_static_type5 >> 0] | 0;
    $or6651 = $12 | $7;
    $p$0 = $p$0 + 8 | 0;
    if ($p$0 >>> 0 >= $add$ptr >>> 0) {
     $found_any_static_type$1$off0$in = $or6651;
     $found_our_static_ptr$1$off0$in = $or5850;
     break;
    } else {
     $found_any_static_type$0 = $or6651;
     $found_our_static_ptr$0 = $or5850;
    }
   }
  } else {
   $found_any_static_type$1$off0$in = $or2438;
   $found_our_static_ptr$1$off0$in = $or37;
  } while (0);
  HEAP8[$found_our_static_ptr2 >> 0] = $found_our_static_ptr$1$off0$in << 24 >> 24 != 0 & 1;
  HEAP8[$found_any_static_type5 >> 0] = $found_any_static_type$1$off0$in << 24 >> 24 != 0 & 1;
 }
 return;
}

function _SDL_GetWindowDisplayIndex($window) {
 $window = $window | 0;
 var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $add69 = 0, $and = 0, $and12 = 0, $and17 = 0, $and25 = 0, $center = 0, $closest$0$lcssa54 = 0, $closest$044 = 0, $closest_dist$045 = 0, $cmp3247 = 0, $cmp70 = 0, $h59 = 0, $i$048 = 0, $i$146 = 0, $rect = 0, $retval$2 = 0, $sub = 0, $sub62 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $w53 = 0, $y41 = 0, $y58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $center = sp + 40 | 0;
 $rect = sp + 24 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  $retval$2 = -1;
  STACKTOP = sp;
  return $retval$2 | 0;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  $1 = HEAP32[$window + 16 >> 2] | 0;
  $and = $1 & -65536;
  if (($and | 0) < 805240832) switch ($and | 0) {
  case 536805376:
   {
    label = 7;
    break;
   }
  default:
   {}
  } else switch ($and | 0) {
  case 805240832:
   {
    label = 7;
    break;
   }
  default:
   {}
  }
  if ((label | 0) == 7) {
   $and12 = $1 & 65535;
   $retval$2 = ($and12 | 0) < (HEAP32[75] | 0) ? $and12 : 0;
   STACKTOP = sp;
   return $retval$2 | 0;
  }
  $3 = HEAP32[$window + 20 >> 2] | 0;
  $and17 = $3 & -65536;
  if (($and17 | 0) < 805240832) switch ($and17 | 0) {
  case 536805376:
   {
    label = 9;
    break;
   }
  default:
   {}
  } else switch ($and17 | 0) {
  case 805240832:
   {
    label = 9;
    break;
   }
  default:
   {}
  }
  if ((label | 0) == 9) {
   $and25 = $3 & 65535;
   $retval$2 = ($and25 | 0) < (HEAP32[75] | 0) ? $and25 : 0;
   STACKTOP = sp;
   return $retval$2 | 0;
  }
  $5 = HEAP32[75] | 0;
  $cmp3247 = ($5 | 0) > 0;
  L22 : do if ($cmp3247) {
   $6 = HEAP32[76] | 0;
   $i$048 = 0;
   while (1) {
    if ((HEAP32[$6 + ($i$048 * 72 | 0) + 60 >> 2] | 0) == ($window | 0)) {
     $retval$2 = $i$048;
     break;
    }
    $i$048 = $i$048 + 1 | 0;
    if (($i$048 | 0) >= ($5 | 0)) break L22;
   }
   STACKTOP = sp;
   return $retval$2 | 0;
  } while (0);
  HEAP32[$center >> 2] = ((HEAP32[$window + 24 >> 2] | 0) / 2 | 0) + $1;
  $y41 = $center + 4 | 0;
  HEAP32[$y41 >> 2] = ((HEAP32[$window + 28 >> 2] | 0) / 2 | 0) + $3;
  if ($cmp3247) {
   $w53 = $rect + 8 | 0;
   $y58 = $rect + 4 | 0;
   $h59 = $rect + 12 | 0;
   $closest$044 = -1;
   $closest_dist$045 = 2147483647;
   $i$146 = 0;
   while (1) {
    _SDL_GetDisplayBounds($i$146, $rect) | 0;
    if (_SDL_EnclosePoints($center, 1, $rect, 0) | 0) {
     $retval$2 = $i$146;
     label = 20;
     break;
    }
    $sub = (HEAP32[$center >> 2] | 0) - (HEAP32[$rect >> 2] | 0) + ((HEAP32[$w53 >> 2] | 0) / -2 | 0) | 0;
    $sub62 = (HEAP32[$y41 >> 2] | 0) - (HEAP32[$y58 >> 2] | 0) + ((HEAP32[$h59 >> 2] | 0) / -2 | 0) | 0;
    $add69 = (Math_imul($sub62, $sub62) | 0) + (Math_imul($sub, $sub) | 0) | 0;
    $cmp70 = ($add69 | 0) < ($closest_dist$045 | 0);
    $closest$044 = $cmp70 ? $i$146 : $closest$044;
    $i$146 = $i$146 + 1 | 0;
    if (($i$146 | 0) >= (HEAP32[75] | 0)) break; else $closest_dist$045 = $cmp70 ? $add69 : $closest_dist$045;
   }
   if ((label | 0) == 20) {
    STACKTOP = sp;
    return $retval$2 | 0;
   }
   if (($closest$044 | 0) < 0) $closest$0$lcssa54 = $closest$044; else {
    $retval$2 = $closest$044;
    STACKTOP = sp;
    return $retval$2 | 0;
   }
  } else $closest$0$lcssa54 = -1;
  _SDL_SetError(5383, $vararg_buffer3) | 0;
  $retval$2 = $closest$0$lcssa54;
  STACKTOP = sp;
  return $retval$2 | 0;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 $retval$2 = -1;
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $25 = 0, $3 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $9 = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv7 = 0, $neg$0 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub63 = 0, $tobool115 = 0, $x$047 = 0, label = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 104 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $cond = HEAPU8[$0 >> 0] | 0;
 } else $cond = ___shgetc($f) | 0;
 switch ($cond | 0) {
 case 43:
 case 45:
  {
   $conv7 = ($cond | 0) == 45 & 1;
   $3 = HEAP32[$rpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $3 + 1;
    $cond19 = HEAPU8[$3 >> 0] | 0;
   } else $cond19 = ___shgetc($f) | 0;
   $sub = $cond19 + -48 | 0;
   if (($pok | 0) != 0 & $sub >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
    $45 = -2147483648;
    $46 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    label = 14;
   } else {
    $c$0 = $cond19;
    $neg$0 = $conv7;
    $sub31$pre$phiZ2D = $sub;
    label = 12;
   }
   break;
  }
 default:
  {
   $c$0 = $cond;
   $neg$0 = 0;
   $sub31$pre$phiZ2D = $cond + -48 | 0;
   label = 12;
  }
 }
 if ((label | 0) == 12) if ($sub31$pre$phiZ2D >>> 0 > 9) label = 14; else {
  $c$146 = $c$0;
  $x$047 = 0;
  while (1) {
   $x$047 = $c$146 + -48 + ($x$047 * 10 | 0) | 0;
   $9 = HEAP32[$rpos >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $9 + 1;
    $cond60 = HEAPU8[$9 >> 0] | 0;
   } else $cond60 = ___shgetc($f) | 0;
   $sub43 = $cond60 + -48 | 0;
   if (!($sub43 >>> 0 < 10 & ($x$047 | 0) < 214748364)) break; else $c$146 = $cond60;
  }
  $14 = (($x$047 | 0) < 0) << 31 >> 31;
  if ($sub43 >>> 0 < 10) {
   $15 = $x$047;
   $16 = $14;
   $c$241 = $cond60;
   while (1) {
    $17 = ___muldi3($15 | 0, $16 | 0, 10, 0) | 0;
    $18 = getTempRet0() | 0;
    $21 = _i64Add($c$241 | 0, (($c$241 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $15 = _i64Add($21 | 0, getTempRet0() | 0, $17 | 0, $18 | 0) | 0;
    $16 = getTempRet0() | 0;
    $25 = HEAP32[$rpos >> 2] | 0;
    if ($25 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $25 + 1;
     $cond87 = HEAPU8[$25 >> 0] | 0;
    } else $cond87 = ___shgetc($f) | 0;
    $sub63 = $cond87 + -48 | 0;
    if (!($sub63 >>> 0 < 10 & (($16 | 0) < 21474836 | ($16 | 0) == 21474836 & $15 >>> 0 < 2061584302))) break; else $c$241 = $cond87;
   }
   if ($sub63 >>> 0 < 10) {
    do {
     $34 = HEAP32[$rpos >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $34 + 1;
      $cond106 = HEAPU8[$34 >> 0] | 0;
     } else $cond106 = ___shgetc($f) | 0;
    } while (($cond106 + -48 | 0) >>> 0 < 10);
    $39 = $15;
    $40 = $16;
   } else {
    $39 = $15;
    $40 = $16;
   }
  } else {
   $39 = $x$047;
   $40 = $14;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $tobool115 = ($neg$0 | 0) == 0;
  $41 = _i64Subtract(0, 0, $39 | 0, $40 | 0) | 0;
  $42 = getTempRet0() | 0;
  $45 = $tobool115 ? $40 : $42;
  $46 = $tobool115 ? $39 : $41;
 }
 if ((label | 0) == 14) if (!(HEAP32[$shend >> 2] | 0)) {
  $45 = -2147483648;
  $46 = 0;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $45 = -2147483648;
  $46 = 0;
 }
 setTempRet0($45 | 0);
 return $46 | 0;
}

function _SDL_PromptAssertion($data, $userdata) {
 $data = $data | 0;
 $userdata = $userdata | 0;
 var $$lcssa = 0, $0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $buttons = 0, $call2 = 0, $call25 = 0, $call46 = 0, $cmp21 = 0, $cmp60 = 0, $messagebox = 0, $retval$0 = 0, $selected = 0, $state$1$ph = 0, $state$2 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $window$0 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4224 | 0;
 $vararg_buffer6 = sp + 4184 | 0;
 $vararg_buffer = sp + 4160 | 0;
 $messagebox = sp + 4192 | 0;
 $buttons = sp + 4096 | 0;
 $selected = sp + 4188 | 0;
 dest = $buttons;
 src = 1584;
 stop = dest + 60 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = sp;
 $2 = HEAP32[$data + 12 >> 2] | 0;
 $3 = HEAP32[$data + 16 >> 2] | 0;
 $4 = HEAP32[$data + 4 >> 2] | 0;
 $5 = HEAP32[$data + 8 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$data + 20 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $2;
 HEAP32[$vararg_buffer + 8 >> 2] = $3;
 HEAP32[$vararg_buffer + 12 >> 2] = $4;
 HEAP32[$vararg_buffer + 16 >> 2] = ($4 | 0) == 1 ? 6421 : 6426;
 HEAP32[$vararg_buffer + 20 >> 2] = $5;
 _SDL_snprintf($0, 4096, 6432, $vararg_buffer) | 0;
 HEAP32[$vararg_buffer6 >> 2] = $0;
 _debug_print(6489, $vararg_buffer6);
 $call2 = _SDL_getenv(6496) | 0;
 if ($call2 | 0) {
  if (!(_SDL_strcmp($call2, 6507) | 0)) {
   $retval$0 = 2;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  if (!(_SDL_strcmp($call2, 6513) | 0)) {
   $retval$0 = 1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  if (!(_SDL_strcmp($call2, 6519) | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  if (!(_SDL_strcmp($call2, 6525) | 0)) {
   $retval$0 = 3;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $cmp21 = (_SDL_strcmp($call2, 6532) | 0) == 0;
  $retval$0 = $cmp21 ? 4 : 2;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call25 = _SDL_GetFocusWindow() | 0;
 if (!$call25) $window$0 = 0; else if (!((_SDL_GetWindowFlags($call25) | 0) & 1)) $window$0 = 0; else {
  _SDL_MinimizeWindow($call25);
  $window$0 = $call25;
 }
 _SDL_memset($messagebox, 0, 28) | 0;
 HEAP32[$messagebox >> 2] = 32;
 HEAP32[$messagebox + 4 >> 2] = $window$0;
 HEAP32[$messagebox + 8 >> 2] = 6546;
 HEAP32[$messagebox + 12 >> 2] = $0;
 HEAP32[$messagebox + 16 >> 2] = 5;
 HEAP32[$messagebox + 20 >> 2] = $buttons;
 L21 : do if (!(_SDL_ShowMessageBox($messagebox, $selected) | 0)) {
  $6 = HEAP32[$selected >> 2] | 0;
  $state$2 = ($6 | 0) == -1 ? 3 : $6;
 } else {
  $7 = _emscripten_asm_const_ii(0, $0 | 0) | 0;
  L24 : do if (!(_SDL_strcmp($7, 6788) | 0)) {
   $$lcssa = $7;
   $state$1$ph = 2;
  } else {
   $9 = $7;
   do {
    if (!(_SDL_strcmp($9, 6790) | 0)) {
     $$lcssa = $9;
     $state$1$ph = 0;
     break L24;
    }
    if (!(_SDL_strcmp($9, 6792) | 0)) {
     $$lcssa = $9;
     $state$1$ph = 3;
     break L24;
    }
    $cmp60 = (_SDL_strcmp($9, 6794) | 0) == 0;
    _free($9);
    if ($cmp60) {
     $state$2 = 4;
     break L21;
    }
    $call46 = _emscripten_asm_const_ii(0, $0 | 0) | 0;
    $9 = $call46;
   } while ((_SDL_strcmp($9, 6788) | 0) != 0);
   $$lcssa = $call46;
   $state$1$ph = 2;
  } while (0);
  _free($$lcssa);
  $state$2 = $state$1$ph;
 } while (0);
 if (!$window$0) {
  $retval$0 = $state$2;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _SDL_RestoreWindow($window$0);
 $retval$0 = $state$2;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _trinkle($head, $width, $cmp, $pp, $pshift, $trusty, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pp = $pp | 0;
 $pshift = $pshift | 0;
 $trusty = $trusty | 0;
 $lp = $lp | 0;
 var $0 = 0, $1 = 0, $4 = 0, $add = 0, $add$ptr = 0, $add$ptr15 = 0, $add$ptr65 = 0, $add$ptr72 = 0, $ar = 0, $arrayidx3 = 0, $call29 = 0, $head$addr$0$lcssa = 0, $head$addr$032 = 0, $head$addr$04368 = 0, $head$addr$04368$phi = 0, $i$0$lcssa = 0, $i$034 = 0, $i$04269 = 0, $idx$neg14 = 0, $inc = 0, $p = 0, $pshift$addr$0$lcssa = 0, $pshift$addr$036 = 0, $pshift$addr$04170 = 0, $trusty$addr$0$lcssa = 0, $trusty$addr$04071 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $p = sp + 232 | 0;
 $ar = sp;
 $0 = HEAP32[$pp >> 2] | 0;
 HEAP32[$p >> 2] = $0;
 $1 = HEAP32[$pp + 4 >> 2] | 0;
 $arrayidx3 = $p + 4 | 0;
 HEAP32[$arrayidx3 >> 2] = $1;
 HEAP32[$ar >> 2] = $head;
 L1 : do if (($0 | 0) != 1 | ($1 | 0) != 0) {
  $idx$neg14 = 0 - $width | 0;
  $add$ptr65 = $head + (0 - (HEAP32[$lp + ($pshift << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr65, $head) | 0) < 1) {
   $head$addr$0$lcssa = $head;
   $i$0$lcssa = 1;
   $pshift$addr$0$lcssa = $pshift;
   $trusty$addr$0$lcssa = $trusty;
   label = 9;
  } else {
   $add$ptr72 = $add$ptr65;
   $head$addr$04368 = $head;
   $i$04269 = 1;
   $pshift$addr$04170 = $pshift;
   $trusty$addr$04071 = ($trusty | 0) == 0;
   while (1) {
    if ($trusty$addr$04071 & ($pshift$addr$04170 | 0) > 1) {
     $add$ptr15 = $head$addr$04368 + $idx$neg14 | 0;
     $4 = HEAP32[$lp + ($pshift$addr$04170 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr15, $add$ptr72) | 0) > -1) {
      $head$addr$032 = $head$addr$04368;
      $i$034 = $i$04269;
      $pshift$addr$036 = $pshift$addr$04170;
      label = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr15 + (0 - $4) | 0, $add$ptr72) | 0) > -1) {
      $head$addr$032 = $head$addr$04368;
      $i$034 = $i$04269;
      $pshift$addr$036 = $pshift$addr$04170;
      label = 10;
      break L1;
     }
    }
    $inc = $i$04269 + 1 | 0;
    HEAP32[$ar + ($i$04269 << 2) >> 2] = $add$ptr72;
    $call29 = _pntz($p) | 0;
    _shr($p, $call29);
    $add = $call29 + $pshift$addr$04170 | 0;
    if (!((HEAP32[$p >> 2] | 0) != 1 | (HEAP32[$arrayidx3 >> 2] | 0) != 0)) {
     $head$addr$032 = $add$ptr72;
     $i$034 = $inc;
     $pshift$addr$036 = $add;
     label = 10;
     break L1;
    }
    $add$ptr = $add$ptr72 + (0 - (HEAP32[$lp + ($add << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr, HEAP32[$ar >> 2] | 0) | 0) < 1) {
     $head$addr$0$lcssa = $add$ptr72;
     $i$0$lcssa = $inc;
     $pshift$addr$0$lcssa = $add;
     $trusty$addr$0$lcssa = 0;
     label = 9;
     break;
    } else {
     $head$addr$04368$phi = $add$ptr72;
     $add$ptr72 = $add$ptr;
     $i$04269 = $inc;
     $pshift$addr$04170 = $add;
     $trusty$addr$04071 = 1;
     $head$addr$04368 = $head$addr$04368$phi;
    }
   }
  }
 } else {
  $head$addr$0$lcssa = $head;
  $i$0$lcssa = 1;
  $pshift$addr$0$lcssa = $pshift;
  $trusty$addr$0$lcssa = $trusty;
  label = 9;
 } while (0);
 if ((label | 0) == 9) if (!$trusty$addr$0$lcssa) {
  $head$addr$032 = $head$addr$0$lcssa;
  $i$034 = $i$0$lcssa;
  $pshift$addr$036 = $pshift$addr$0$lcssa;
  label = 10;
 }
 if ((label | 0) == 10) {
  _cycle($width, $ar, $i$034);
  _sift($head$addr$032, $width, $cmp, $pshift$addr$036, $lp);
 }
 STACKTOP = sp;
 return;
}

function _SDL_DestroyWindow($window) {
 $window = $window | 0;
 var $$pre56 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $28 = 0, $5 = 0, $8 = 0, $call$i52 = 0, $data = 0, $driver_loaded$i = 0, $flags$i = 0, $fullscreen_window = 0, $is_hiding$i = 0, $loader_loaded$i = 0, $retval$0$i = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  STACKTOP = sp;
  return;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  HEAP32[$window + 120 >> 2] = 1;
  $flags$i = $window + 48 | 0;
  if (HEAP32[$flags$i >> 2] & 4 | 0) {
   $is_hiding$i = $window + 116 | 0;
   HEAP32[$is_hiding$i >> 2] = 1;
   _SDL_UpdateFullscreenMode($window, 0) | 0;
   $2 = HEAP32[22] | 0;
   if ($2 | 0) FUNCTION_TABLE_vii[$2 & 63](0, $window);
   HEAP32[$is_hiding$i >> 2] = 0;
   _SDL_SendWindowEvent($window, 2, 0, 0) | 0;
  }
  if ((_SDL_GetKeyboardFocus() | 0) == ($window | 0)) _SDL_SetKeyboardFocus(0);
  if ((_SDL_GetMouseFocus() | 0) == ($window | 0)) _SDL_SetMouseFocus(0);
  if (HEAP32[$flags$i >> 2] & 2 | 0) if ((HEAP32[174] | 0) == ($window | 0)) _SDL_GL_MakeCurrent($window, 0) | 0;
  $5 = HEAP32[$window + 108 >> 2] | 0;
  if ($5 | 0) {
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -5;
   _SDL_FreeSurface($5);
  }
  FUNCTION_TABLE_vii[HEAP32[0 + 144 >> 2] & 63](0, $window);
  $8 = HEAP32[33] | 0;
  if ($8 | 0) FUNCTION_TABLE_vii[$8 & 63](0, $window);
  do if (HEAP32[$flags$i >> 2] & 2 | 0) {
   if (!0) {
    _SDL_SetError(4403, $vararg_buffer3) | 0;
    break;
   }
   $driver_loaded$i = 432 | 0;
   $10 = HEAP32[$driver_loaded$i >> 2] | 0;
   if (($10 | 0) > 0) {
    HEAP32[$driver_loaded$i >> 2] = $10 + -1;
    if (($10 | 0) == 1) {
     $11 = HEAP32[44] | 0;
     if ($11 | 0) FUNCTION_TABLE_vi[$11 & 63](0);
    }
   }
  } while (0);
  do if (HEAP32[$flags$i >> 2] & 268435456 | 0) {
   if (!0) {
    _SDL_SetError(4403, $vararg_buffer5) | 0;
    break;
   }
   $loader_loaded$i = 720 | 0;
   $13 = HEAP32[$loader_loaded$i >> 2] | 0;
   if (($13 | 0) > 0) {
    HEAP32[$loader_loaded$i >> 2] = $13 + -1;
    if (($13 | 0) == 1) {
     $14 = HEAP32[54] | 0;
     if ($14 | 0) FUNCTION_TABLE_vi[$14 & 63](0);
    }
   }
  } while (0);
  $call$i52 = _SDL_GetWindowDisplayIndex($window) | 0;
  if (($call$i52 | 0) > -1) $retval$0$i = (HEAP32[76] | 0) + ($call$i52 * 72 | 0) | 0; else $retval$0$i = 0;
  $fullscreen_window = $retval$0$i + 60 | 0;
  if ((HEAP32[$fullscreen_window >> 2] | 0) == ($window | 0)) HEAP32[$fullscreen_window >> 2] = 0;
  HEAP32[$window >> 2] = 0;
  _SDL_free(HEAP32[$window + 8 >> 2] | 0);
  _SDL_FreeSurface(HEAP32[$window + 12 >> 2] | 0);
  _SDL_free(HEAP32[$window + 100 >> 2] | 0);
  $data = $window + 140 | 0;
  $20 = HEAP32[$data >> 2] | 0;
  if ($20 | 0) {
   $21 = $20;
   do {
    HEAP32[$data >> 2] = HEAP32[$21 + 8 >> 2];
    _SDL_free(HEAP32[$21 >> 2] | 0);
    _SDL_free($21);
    $21 = HEAP32[$data >> 2] | 0;
   } while (($21 | 0) != 0);
  }
  $25 = HEAP32[$window + 152 >> 2] | 0;
  $$pre56 = $window + 148 | 0;
  if ($25 | 0) HEAP32[$25 + 148 >> 2] = HEAP32[$$pre56 >> 2];
  $28 = HEAP32[$$pre56 >> 2] | 0;
  HEAP32[(($28 | 0) == 0 ? 308 | 0 : $28 + 152 | 0) >> 2] = $25;
  _SDL_free($window);
  STACKTOP = sp;
  return;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return;
}

function _qsort($base, $nel, $width, $cmp) {
 $base = $base | 0;
 $nel = $nel | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 var $$be = 0, $0 = 0, $14 = 0, $4 = 0, $4$phi = 0, $5 = 0, $6 = 0, $9 = 0, $add$ptr1 = 0, $add$ptr33 = 0, $add$ptr65 = 0, $add6 = 0, $arrayidx40 = 0, $call = 0, $head$0$lcssa = 0, $head$056 = 0, $head$1 = 0, $head$1$be = 0, $i$0 = 0, $idx$neg = 0, $lp = 0, $mul = 0, $or = 0, $or63 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$057 = 0, $pshift$1 = 0, $pshift$2 = 0, $pshift$2$be = 0, $sub$ptr$lhs$cast = 0, $sub15 = 0, $sub50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $lp = sp;
 $p = sp + 192 | 0;
 $mul = Math_imul($width, $nel) | 0;
 $0 = $p;
 HEAP32[$0 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 L1 : do if ($mul | 0) {
  $idx$neg = 0 - $width | 0;
  HEAP32[$lp + 4 >> 2] = $width;
  HEAP32[$lp >> 2] = $width;
  $4 = $width;
  $5 = $width;
  $i$0 = 2;
  while (1) {
   $add6 = $4 + $width + $5 | 0;
   HEAP32[$lp + ($i$0 << 2) >> 2] = $add6;
   if ($add6 >>> 0 < $mul >>> 0) {
    $4$phi = $5;
    $5 = $add6;
    $i$0 = $i$0 + 1 | 0;
    $4 = $4$phi;
   } else break;
  }
  $add$ptr1 = $base + $mul + $idx$neg | 0;
  if ($add$ptr1 >>> 0 > $base >>> 0) {
   $sub$ptr$lhs$cast = $add$ptr1;
   $6 = 1;
   $head$056 = $base;
   $pshift$057 = 1;
   while (1) {
    do if (($6 & 3 | 0) == 3) {
     _sift($head$056, $width, $cmp, $pshift$057, $lp);
     _shr($p, 2);
     $pshift$1 = $pshift$057 + 2 | 0;
    } else {
     $sub15 = $pshift$057 + -1 | 0;
     if ((HEAP32[$lp + ($sub15 << 2) >> 2] | 0) >>> 0 < ($sub$ptr$lhs$cast - $head$056 | 0) >>> 0) _sift($head$056, $width, $cmp, $pshift$057, $lp); else _trinkle($head$056, $width, $cmp, $p, $pshift$057, 0, $lp);
     if (($pshift$057 | 0) == 1) {
      _shl($p, 1);
      $pshift$1 = 0;
      break;
     } else {
      _shl($p, $sub15);
      $pshift$1 = 1;
      break;
     }
    } while (0);
    $or = HEAP32[$p >> 2] | 1;
    HEAP32[$p >> 2] = $or;
    $add$ptr33 = $head$056 + $width | 0;
    if ($add$ptr33 >>> 0 < $add$ptr1 >>> 0) {
     $6 = $or;
     $head$056 = $add$ptr33;
     $pshift$057 = $pshift$1;
    } else {
     $14 = $or;
     $head$0$lcssa = $add$ptr33;
     $pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $14 = 1;
   $head$0$lcssa = $base;
   $pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa, $width, $cmp, $p, $pshift$0$lcssa, 0, $lp);
  $arrayidx40 = $p + 4 | 0;
  $9 = $14;
  $head$1 = $head$0$lcssa;
  $pshift$2 = $pshift$0$lcssa;
  while (1) {
   if (($pshift$2 | 0) == 1 & ($9 | 0) == 1) if (!(HEAP32[$arrayidx40 >> 2] | 0)) break L1; else label = 19; else if (($pshift$2 | 0) < 2) label = 19; else {
    _shl($p, 2);
    $sub50 = $pshift$2 + -2 | 0;
    HEAP32[$p >> 2] = HEAP32[$p >> 2] ^ 7;
    _shr($p, 1);
    _trinkle($head$1 + (0 - (HEAP32[$lp + ($sub50 << 2) >> 2] | 0)) + $idx$neg | 0, $width, $cmp, $p, $pshift$2 + -1 | 0, 1, $lp);
    _shl($p, 1);
    $or63 = HEAP32[$p >> 2] | 1;
    HEAP32[$p >> 2] = $or63;
    $add$ptr65 = $head$1 + $idx$neg | 0;
    _trinkle($add$ptr65, $width, $cmp, $p, $sub50, 1, $lp);
    $$be = $or63;
    $head$1$be = $add$ptr65;
    $pshift$2$be = $sub50;
   }
   if ((label | 0) == 19) {
    label = 0;
    $call = _pntz($p) | 0;
    _shr($p, $call);
    $$be = HEAP32[$p >> 2] | 0;
    $head$1$be = $head$1 + $idx$neg | 0;
    $pshift$2$be = $call + $pshift$2 | 0;
   }
   $9 = $$be;
   $head$1 = $head$1$be;
   $pshift$2 = $pshift$2$be;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _SDL_SetRelativeMouseMode($enabled) {
 $enabled = $enabled | 0;
 var $$sink = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $24 = 0, $4 = 0, $7 = 0, $8 = 0, $call1 = 0, $cursor$addr$0$i = 0, $cursor$addr$0$i$i = 0, $div = 0, $div4 = 0, $retval$0 = 0, $tobool = 0, $tobool22$i = 0, $tobool22$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $call1 = _SDL_GetKeyboardFocus() | 0;
 if ((HEAP32[3993] | 0) == ($enabled | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $tobool = ($enabled | 0) != 0;
 do if ($tobool & ($call1 | 0) != 0) {
  $1 = HEAP32[3982] | 0;
  do if (($1 | 0) != ($call1 | 0)) {
   if ($1 | 0) _SDL_SendWindowEvent($1, 11, 0, 0) | 0;
   HEAP32[3982] = $call1;
   HEAP32[3992] = 0;
   _SDL_SendWindowEvent($call1, 10, 0, 0) | 0;
   $cursor$addr$0$i$i = (HEAP32[3982] | 0) == 0 ? HEAP32[4005] | 0 : HEAP32[4006] | 0;
   $4 = HEAP32[3973] | 0;
   $tobool22$i$i = ($4 | 0) == 0;
   if (($cursor$addr$0$i$i | 0) != 0 & (HEAP32[4007] | 0) != 0 & (HEAP32[3993] | 0) == 0) {
    if ($tobool22$i$i) break;
    FUNCTION_TABLE_ii[$4 & 63]($cursor$addr$0$i$i) | 0;
    break;
   } else {
    if ($tobool22$i$i) break;
    FUNCTION_TABLE_ii[$4 & 63](0) | 0;
    break;
   }
  } while (0);
  $div = (HEAP32[$call1 + 24 >> 2] | 0) / 2 | 0;
  $div4 = (HEAP32[$call1 + 28 >> 2] | 0) / 2 | 0;
  $7 = HEAP32[3976] | 0;
  if ($7 | 0) {
   FUNCTION_TABLE_viii[$7 & 63]($call1, $div, $div4);
   break;
  }
  $8 = HEAP32[3981] | 0;
  if (_SDL_UpdateMouseFocus($call1, $div, $div4) | 0) _SDL_PrivateSendMouseMotion($call1, $8, 0, $div, $div4) | 0;
 } while (0);
 do if ($tobool | (HEAP32[3994] | 0) == 0) {
  if ($tobool) {
   if (!(HEAP32[3978] | 0)) {
    $$sink = 1;
    label = 22;
    break;
   }
   if (_SDL_GetHintBoolean(6194, 0) | 0) {
    $$sink = 1;
    label = 22;
    break;
   }
  }
  if ($tobool & (FUNCTION_TABLE_ii[HEAP32[15912 >> 2] & 63]($enabled) | 0) < 0) if (!(HEAP32[3976] | 0)) {
   $retval$0 = _SDL_SetError(6223, $vararg_buffer) | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   $$sink = 1;
   label = 22;
  }
 } else {
  $$sink = 0;
  label = 22;
 } while (0);
 if ((label | 0) == 22) HEAP32[3994] = $$sink;
 HEAP32[3993] = $enabled;
 HEAPF32[3997] = 0.0;
 HEAPF32[3998] = 0.0;
 $13 = HEAP32[3982] | 0;
 do if ($13 | 0) {
  _SDL_UpdateWindowGrab($13);
  if (!$tobool) {
   $14 = HEAP32[3982] | 0;
   $15 = HEAP32[3983] | 0;
   $16 = HEAP32[3984] | 0;
   if ($14 | 0) {
    $17 = HEAP32[3976] | 0;
    if ($17 | 0) {
     FUNCTION_TABLE_viii[$17 & 63]($14, $15, $16);
     break;
    }
    $18 = HEAP32[3981] | 0;
    if (_SDL_UpdateMouseFocus($14, $15, $16) | 0) _SDL_PrivateSendMouseMotion($14, $18, 0, $15, $16) | 0;
   }
  }
 } while (0);
 _SDL_FlushEvent(1024);
 $cursor$addr$0$i = (HEAP32[3982] | 0) == 0 ? HEAP32[4005] | 0 : HEAP32[4006] | 0;
 $24 = HEAP32[3973] | 0;
 $tobool22$i = ($24 | 0) == 0;
 if (($cursor$addr$0$i | 0) != 0 & (HEAP32[4007] | 0) != 0 & (HEAP32[3993] | 0) == 0) {
  if ($tobool22$i) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  FUNCTION_TABLE_ii[$24 & 63]($cursor$addr$0$i) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  if ($tobool22$i) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  FUNCTION_TABLE_ii[$24 & 63](0) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _SDL_SetDisplayModeForDisplay($display, $mode) {
 $display = $display | 0;
 $mode = $mode | 0;
 var $10 = 0, $9 = 0, $current_mode = 0, $current_mode31 = 0, $desktop_mode = 0, $display_mode = 0, $h = 0, $refresh_rate = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $display_mode = sp + 32 | 0;
 $current_mode = sp + 12 | 0;
 if (!$mode) {
  $desktop_mode = $display + 16 | 0;
  HEAP32[$display_mode >> 2] = HEAP32[$desktop_mode >> 2];
  HEAP32[$display_mode + 4 >> 2] = HEAP32[$desktop_mode + 4 >> 2];
  HEAP32[$display_mode + 8 >> 2] = HEAP32[$desktop_mode + 8 >> 2];
  HEAP32[$display_mode + 12 >> 2] = HEAP32[$desktop_mode + 12 >> 2];
  HEAP32[$display_mode + 16 >> 2] = HEAP32[$desktop_mode + 16 >> 2];
 } else {
  HEAP32[$display_mode >> 2] = HEAP32[$mode >> 2];
  HEAP32[$display_mode + 4 >> 2] = HEAP32[$mode + 4 >> 2];
  HEAP32[$display_mode + 8 >> 2] = HEAP32[$mode + 8 >> 2];
  HEAP32[$display_mode + 12 >> 2] = HEAP32[$mode + 12 >> 2];
  HEAP32[$display_mode + 16 >> 2] = HEAP32[$mode + 16 >> 2];
  if (!(HEAP32[$display_mode >> 2] | 0)) HEAP32[$display_mode >> 2] = HEAP32[$display + 36 >> 2];
  $w = $display_mode + 4 | 0;
  if (!(HEAP32[$w >> 2] | 0)) HEAP32[$w >> 2] = HEAP32[$display + 40 >> 2];
  $h = $display_mode + 8 | 0;
  if (!(HEAP32[$h >> 2] | 0)) HEAP32[$h >> 2] = HEAP32[$display + 44 >> 2];
  $refresh_rate = $display_mode + 12 | 0;
  if (!(HEAP32[$refresh_rate >> 2] | 0)) HEAP32[$refresh_rate >> 2] = HEAP32[$display + 48 >> 2];
  if (!(_SDL_GetClosestDisplayModeForDisplay($display, $display_mode, $display_mode) | 0)) {
   $9 = HEAP32[$h >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = HEAP32[$w >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $9;
   $retval$0 = _SDL_SetError(5261, $vararg_buffer) | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $current_mode31 = $display + 36 | 0;
 HEAP32[$current_mode >> 2] = HEAP32[$current_mode31 >> 2];
 HEAP32[$current_mode + 4 >> 2] = HEAP32[$current_mode31 + 4 >> 2];
 HEAP32[$current_mode + 8 >> 2] = HEAP32[$current_mode31 + 8 >> 2];
 HEAP32[$current_mode + 12 >> 2] = HEAP32[$current_mode31 + 12 >> 2];
 HEAP32[$current_mode + 16 >> 2] = HEAP32[$current_mode31 + 16 >> 2];
 if (!(_SDL_memcmp($display_mode, $current_mode, 20) | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $10 = HEAP32[8] | 0;
 if (!$10) {
  $retval$0 = _SDL_SetError(5206, $vararg_buffer2) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ((FUNCTION_TABLE_iiii[$10 & 15](0, $display, $display_mode) | 0) < 0) {
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 };
 HEAP32[$current_mode31 >> 2] = HEAP32[$display_mode >> 2];
 HEAP32[$current_mode31 + 4 >> 2] = HEAP32[$display_mode + 4 >> 2];
 HEAP32[$current_mode31 + 8 >> 2] = HEAP32[$display_mode + 8 >> 2];
 HEAP32[$current_mode31 + 12 >> 2] = HEAP32[$display_mode + 12 >> 2];
 HEAP32[$current_mode31 + 16 >> 2] = HEAP32[$display_mode + 16 >> 2];
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_MouseQuit() {
 var $$in = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $call2$i = 0, $curr$0$i = 0, $curr$021$i = 0, $curr$024$i = 0, $cursor$addr$0$i$i = 0, $cursor$addr$0$i$i22 = 0, $flags$i = 0, $prev$023$i = 0, $prev$023$i$phi = 0, $tobool22$i$i = 0, $tobool22$i$i26 = 0, $$in$looptemp = 0;
 if (HEAP32[3979] | 0) {
  $call2$i = _SDL_GetKeyboardFocus() | 0;
  if ($call2$i | 0) {
   $flags$i = $call2$i + 48 | 0;
   if (HEAP32[$flags$i >> 2] & 16384 | 0) if ((FUNCTION_TABLE_ii[HEAP32[15916 >> 2] & 63](0) | 0) != -1) HEAP32[$flags$i >> 2] = HEAP32[$flags$i >> 2] & -16385;
  }
 }
 _SDL_SetRelativeMouseMode(0) | 0;
 $4 = HEAP32[4007] | 0;
 HEAP32[4007] = 1;
 do if (($4 | 0) != 1) {
  $cursor$addr$0$i$i = (HEAP32[3982] | 0) == 0 ? HEAP32[4005] | 0 : HEAP32[4006] | 0;
  $9 = HEAP32[3973] | 0;
  $tobool22$i$i = ($9 | 0) == 0;
  if ((HEAP32[3993] | 0) == 0 & ($cursor$addr$0$i$i | 0) != 0) {
   if ($tobool22$i$i) break;
   FUNCTION_TABLE_ii[$9 & 63]($cursor$addr$0$i$i) | 0;
   break;
  } else {
   if ($tobool22$i$i) break;
   FUNCTION_TABLE_ii[$9 & 63](0) | 0;
   break;
  }
 } while (0);
 $10 = HEAP32[4004] | 0;
 if ($10 | 0) {
  $$in = $10;
  do {
   $$in$looptemp = $$in;
   $$in = HEAP32[$$in >> 2] | 0;
   $12 = HEAP32[4005] | 0;
   L19 : do if (($12 | 0) != ($$in$looptemp | 0)) {
    do if ((HEAP32[4006] | 0) == ($$in$looptemp | 0)) {
     if (!$12) $cursor$addr$0$i$i22 = (HEAP32[3982] | 0) == 0 ? 0 : $$in$looptemp; else {
      HEAP32[4006] = $12;
      $cursor$addr$0$i$i22 = $12;
     }
     $17 = HEAP32[3973] | 0;
     $tobool22$i$i26 = ($17 | 0) == 0;
     if (($cursor$addr$0$i$i22 | 0) != 0 & (HEAP32[4007] | 0) != 0 & (HEAP32[3993] | 0) == 0) {
      if ($tobool22$i$i26) break;
      FUNCTION_TABLE_ii[$17 & 63]($cursor$addr$0$i$i22) | 0;
      break;
     } else {
      if ($tobool22$i$i26) break;
      FUNCTION_TABLE_ii[$17 & 63](0) | 0;
      break;
     }
    } while (0);
    $curr$021$i = HEAP32[4004] | 0;
    if ($curr$021$i | 0) {
     $curr$024$i = $curr$021$i;
     $prev$023$i = 0;
     while (1) {
      if (($curr$024$i | 0) == ($$in$looptemp | 0)) break;
      $curr$0$i = HEAP32[$curr$024$i >> 2] | 0;
      if (!$curr$0$i) break L19; else {
       $prev$023$i$phi = $curr$024$i;
       $curr$024$i = $curr$0$i;
       $prev$023$i = $prev$023$i$phi;
      }
     }
     HEAP32[(($prev$023$i | 0) == 0 ? 16016 : $prev$023$i) >> 2] = HEAP32[$$in$looptemp >> 2];
     $19 = HEAP32[3975] | 0;
     if ($19 | 0) FUNCTION_TABLE_vi[$19 & 63]($$in$looptemp);
    }
   } while (0);
  } while (($$in | 0) != 0);
 }
 HEAP32[4004] = 0;
 $20 = HEAP32[4005] | 0;
 if ($20 | 0) {
  $21 = HEAP32[3975] | 0;
  if ($21 | 0) {
   FUNCTION_TABLE_vi[$21 & 63]($20);
   HEAP32[4005] = 0;
  }
 }
 $22 = HEAP32[4003] | 0;
 if (!$22) {
  _SDL_DelHintCallback(6028, 5, 15884);
  _SDL_DelHintCallback(6057, 6, 15884);
  return;
 }
 _SDL_free($22);
 HEAP32[4003] = 0;
 _SDL_DelHintCallback(6028, 5, 15884);
 _SDL_DelHintCallback(6057, 6, 15884);
 return;
}

function _SDL_GetWindowDisplayMode($window, $mode) {
 $window = $window | 0;
 $mode = $mode | 0;
 var $call$i11 = 0, $call$i12 = 0, $desktop_mode = 0, $fullscreen_mode = 0, $fullscreen_mode9 = 0, $h = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i17 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $fullscreen_mode = sp + 28 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  if (!$mode) {
   HEAP32[$vararg_buffer3 >> 2] = 5345;
   $retval$0 = _SDL_SetError(5998, $vararg_buffer3) | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $fullscreen_mode9 = $window + 72 | 0;
  HEAP32[$fullscreen_mode >> 2] = HEAP32[$fullscreen_mode9 >> 2];
  HEAP32[$fullscreen_mode + 4 >> 2] = HEAP32[$fullscreen_mode9 + 4 >> 2];
  HEAP32[$fullscreen_mode + 8 >> 2] = HEAP32[$fullscreen_mode9 + 8 >> 2];
  HEAP32[$fullscreen_mode + 12 >> 2] = HEAP32[$fullscreen_mode9 + 12 >> 2];
  HEAP32[$fullscreen_mode + 16 >> 2] = HEAP32[$fullscreen_mode9 + 16 >> 2];
  $w = $fullscreen_mode + 4 | 0;
  if (!(HEAP32[$w >> 2] | 0)) HEAP32[$w >> 2] = HEAP32[$window + 64 >> 2];
  $h = $fullscreen_mode + 8 | 0;
  if (!(HEAP32[$h >> 2] | 0)) HEAP32[$h >> 2] = HEAP32[$window + 68 >> 2];
  $call$i11 = _SDL_GetWindowDisplayIndex($window) | 0;
  if (($call$i11 | 0) > -1) $retval$0$i = (HEAP32[76] | 0) + ($call$i11 * 72 | 0) | 0; else $retval$0$i = 0;
  if ((HEAP32[$window + 48 >> 2] & 4097 | 0) == 4097) {
   $desktop_mode = $retval$0$i + 16 | 0;
   HEAP32[$fullscreen_mode >> 2] = HEAP32[$desktop_mode >> 2];
   HEAP32[$fullscreen_mode + 4 >> 2] = HEAP32[$desktop_mode + 4 >> 2];
   HEAP32[$fullscreen_mode + 8 >> 2] = HEAP32[$desktop_mode + 8 >> 2];
   HEAP32[$fullscreen_mode + 12 >> 2] = HEAP32[$desktop_mode + 12 >> 2];
   HEAP32[$fullscreen_mode + 16 >> 2] = HEAP32[$desktop_mode + 16 >> 2];
  } else {
   $call$i12 = _SDL_GetWindowDisplayIndex($window) | 0;
   if (($call$i12 | 0) > -1) $retval$0$i17 = (HEAP32[76] | 0) + ($call$i12 * 72 | 0) | 0; else $retval$0$i17 = 0;
   if (!(_SDL_GetClosestDisplayModeForDisplay($retval$0$i17, $fullscreen_mode, $fullscreen_mode) | 0)) {
    $retval$0 = _SDL_SetError(5350, $vararg_buffer5) | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  };
  HEAP32[$mode >> 2] = HEAP32[$fullscreen_mode >> 2];
  HEAP32[$mode + 4 >> 2] = HEAP32[$fullscreen_mode + 4 >> 2];
  HEAP32[$mode + 8 >> 2] = HEAP32[$fullscreen_mode + 8 >> 2];
  HEAP32[$mode + 12 >> 2] = HEAP32[$fullscreen_mode + 12 >> 2];
  HEAP32[$mode + 16 >> 2] = HEAP32[$fullscreen_mode + 16 >> 2];
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$in = 0, $1 = 0, $5 = 0, $8 = 0, $conv1 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0;
 $conv1 = $c & 255;
 $tobool241 = ($n | 0) != 0;
 L1 : do if ($tobool241 & ($src & 3 | 0) != 0) {
  $1 = $c & 255;
  $n$addr$043 = $n;
  $s$044 = $src;
  while (1) {
   if ((HEAP8[$s$044 >> 0] | 0) == $1 << 24 >> 24) {
    $n$addr$0$lcssa52 = $n$addr$043;
    $s$0$lcssa53 = $s$044;
    label = 6;
    break L1;
   }
   $incdec$ptr = $s$044 + 1 | 0;
   $dec = $n$addr$043 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$043 = $dec;
    $s$044 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool241;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  $n$addr$0$lcssa52 = $n$addr$0$lcssa;
  $s$0$lcssa53 = $s$0$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $5 = $c & 255;
  if ((HEAP8[$s$0$lcssa53 >> 0] | 0) == $5 << 24 >> 24) if (!$n$addr$0$lcssa52) {
   label = 16;
   break;
  } else {
   $8 = $s$0$lcssa53;
   break;
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  L13 : do if ($n$addr$0$lcssa52 >>> 0 > 3) {
   $n$addr$133 = $n$addr$0$lcssa52;
   $w$034 = $s$0$lcssa53;
   while (1) {
    $xor = HEAP32[$w$034 >> 2] ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $$in = $w$034;
     $n$addr$1$lcssa55 = $n$addr$133;
     break L13;
    }
    $incdec$ptr21 = $w$034 + 4 | 0;
    $sub22 = $n$addr$133 + -4 | 0;
    if ($sub22 >>> 0 > 3) {
     $n$addr$133 = $sub22;
     $w$034 = $incdec$ptr21;
    } else {
     $n$addr$1$lcssa = $sub22;
     $w$0$lcssa = $incdec$ptr21;
     label = 11;
     break;
    }
   }
  } else {
   $n$addr$1$lcssa = $n$addr$0$lcssa52;
   $w$0$lcssa = $s$0$lcssa53;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$n$addr$1$lcssa) {
   label = 16;
   break;
  } else {
   $$in = $w$0$lcssa;
   $n$addr$1$lcssa55 = $n$addr$1$lcssa;
  }
  $n$addr$227 = $n$addr$1$lcssa55;
  $s$128 = $$in;
  while (1) {
   if ((HEAP8[$s$128 >> 0] | 0) == $5 << 24 >> 24) {
    $8 = $s$128;
    break L8;
   }
   $n$addr$227 = $n$addr$227 + -1 | 0;
   if (!$n$addr$227) {
    label = 16;
    break;
   } else $s$128 = $s$128 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $8 = 0;
 return $8 | 0;
}

function _pop_arg($arg, $type, $ap, $pop_arg_long_double) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $102 = 0, $103 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[$pop_arg_long_double & 63]($arg, $ap);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _SDL_SendKeyboardKey($state, $scancode) {
 $state = $state | 0;
 $scancode = $scancode | 0;
 var $$sink = 0, $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $arrayidx8$phi$trans$insert = 0, $arrayidx8$pre$phiZ2D = 0, $cond = 0, $event = 0, $keysym = 0, $modifier$0 = 0, $retval$0 = 0, $type$033 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 if (!$scancode) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 switch ($state << 24 >> 24) {
 case 1:
  {
   $arrayidx = 16102 + $scancode | 0;
   $0 = HEAP8[$arrayidx >> 0] | 0;
   $1 = $0;
   $2 = $0 << 24 >> 24 != 0 & 1;
   $arrayidx8$pre$phiZ2D = $arrayidx;
   $type$033 = 768;
   break;
  }
 case 0:
  {
   $arrayidx8$phi$trans$insert = 16102 + $scancode | 0;
   $1 = HEAP8[$arrayidx8$phi$trans$insert >> 0] | 0;
   $2 = 0;
   $arrayidx8$pre$phiZ2D = $arrayidx8$phi$trans$insert;
   $type$033 = 769;
   break;
  }
 default:
  {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 if (!($2 << 24 >> 24 ? 1 : $1 << 24 >> 24 != $state << 24 >> 24)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP8[$arrayidx8$pre$phiZ2D >> 0] = $state;
 $3 = HEAP32[16616 + ($scancode << 2) >> 2] | 0;
 switch ($3 | 0) {
 case 1073742048:
  {
   $modifier$0 = 64;
   break;
  }
 case 1073742052:
  {
   $modifier$0 = 128;
   break;
  }
 case 1073742049:
  {
   $modifier$0 = 1;
   break;
  }
 case 1073742053:
  {
   $modifier$0 = 2;
   break;
  }
 case 1073742050:
  {
   $modifier$0 = 256;
   break;
  }
 case 1073742054:
  {
   $modifier$0 = 512;
   break;
  }
 case 1073742051:
  {
   $modifier$0 = 1024;
   break;
  }
 case 1073742055:
  {
   $modifier$0 = 2048;
   break;
  }
 case 1073742081:
  {
   $modifier$0 = 16384;
   break;
  }
 default:
  $modifier$0 = 0;
 }
 L23 : do if (($type$033 | 0) == 768) switch ($3 | 0) {
 case 1073741907:
  {
   $$sink = HEAP16[8050] ^ 4096;
   break L23;
   break;
  }
 case 1073741881:
  {
   $$sink = HEAP16[8050] ^ 8192;
   break L23;
   break;
  }
 default:
  {
   $$sink = ($modifier$0 | (HEAPU16[8050] | 0)) & 65535;
   break L23;
  }
 } else $$sink = ($modifier$0 ^ 65535) & (HEAPU16[8050] | 0) & 65535; while (0);
 HEAP16[8050] = $$sink;
 if ((_SDL_EventState($type$033, -1) | 0) << 24 >> 24 != 1) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$event >> 2] = $type$033;
 HEAP8[$event + 12 >> 0] = $state;
 HEAP8[$event + 13 >> 0] = $2;
 $keysym = $event + 16 | 0;
 HEAP32[$keysym >> 2] = $scancode;
 HEAP32[$keysym + 4 >> 2] = $3;
 HEAP16[$keysym + 8 >> 1] = HEAP16[8050] | 0;
 $11 = HEAP32[4024] | 0;
 if (!$11) $cond = 0; else $cond = HEAP32[$11 + 4 >> 2] | 0;
 HEAP32[$event + 8 >> 2] = $cond;
 $retval$0 = (_SDL_PushEvent($event) | 0) > 0 & 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __Z6renderv() {
 var $add$i = 0.0, $conv15$i = 0.0, $conv5$i = 0.0, $div$i = 0.0, $vVertices$i = 0, $wvp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vVertices$i = sp;
 $wvp = sp + 80 | 0;
 _glBindBuffer(34962, HEAP32[3917] | 0);
 _glBindBuffer(34963, HEAP32[3918] | 0);
 _glClear(16384);
 _glUseProgram(HEAP32[3910] | 0);
 HEAPF32[3919] = 1.0;
 HEAPF32[3920] = 0.0;
 HEAPF32[3921] = -0.0;
 HEAP32[3922] = 0;
 HEAPF32[3923] = -0.0;
 HEAPF32[3924] = 1.0;
 HEAPF32[3925] = -0.0;
 HEAP32[3926] = 0;
 HEAPF32[3927] = 0.0;
 HEAPF32[3928] = 0.0;
 HEAPF32[3929] = 1.0;
 HEAP32[3930] = 0;
 HEAPF32[3931] = -0.0;
 HEAPF32[3932] = -0.0;
 HEAPF32[3933] = -2.0;
 HEAP32[3934] = 1065353216;
 HEAPF32[3935] = 1.0;
 HEAP32[3936] = 0;
 HEAP32[3937] = 0;
 HEAP32[3938] = 0;
 HEAP32[3939] = 0;
 HEAPF32[3940] = 1.3333333730697632;
 HEAP32[3941] = 0;
 HEAP32[3942] = 0;
 HEAP32[3943] = 0;
 HEAP32[3944] = 0;
 HEAPF32[3945] = -.002000020118430257;
 HEAP32[3946] = 0;
 HEAPF32[3947] = -0.0;
 HEAPF32[3948] = -0.0;
 HEAPF32[3949] = -1.0000200271606445;
 HEAP32[3950] = 1065353216;
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($vVertices$i, 15740, 15676);
 __ZN3glmmlIfLNS_9precisionE0EEENS_7tmat4x4IT_XT0_EEERKS4_S6_($wvp, $vVertices$i, 15804);
 _glUniformMatrix4fv(HEAP32[3911] | 0, 1, 0, $wvp | 0);
 $div$i = +((_SDL_GetTicks() | 0) >>> 0) / 1.0e3;
 $conv5$i = $div$i % 4.0;
 $add$i = ((!($div$i % 8.0 >= 4.0) ? 4.0 - $conv5$i : $conv5$i) + -2.0) * .1 * .5 + .4000000059604645;
 $conv15$i = -$add$i;
 HEAPF32[$vVertices$i >> 2] = $conv15$i;
 HEAPF32[$vVertices$i + 4 >> 2] = $add$i;
 HEAPF32[$vVertices$i + 8 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 12 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 16 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 20 >> 2] = $conv15$i;
 HEAPF32[$vVertices$i + 24 >> 2] = $conv15$i;
 HEAPF32[$vVertices$i + 28 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 32 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 36 >> 2] = 1.0;
 HEAPF32[$vVertices$i + 40 >> 2] = $add$i;
 HEAPF32[$vVertices$i + 44 >> 2] = $conv15$i;
 HEAPF32[$vVertices$i + 48 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 52 >> 2] = 1.0;
 HEAPF32[$vVertices$i + 56 >> 2] = 1.0;
 HEAPF32[$vVertices$i + 60 >> 2] = $add$i;
 HEAPF32[$vVertices$i + 64 >> 2] = $add$i;
 HEAPF32[$vVertices$i + 68 >> 2] = 0.0;
 HEAPF32[$vVertices$i + 72 >> 2] = 1.0;
 HEAPF32[$vVertices$i + 76 >> 2] = 0.0;
 _glBufferSubData(34962, 0, 80, $vVertices$i | 0);
 _glVertexAttribPointer(HEAP32[3912] | 0, 3, 5126, 0, 20, 0);
 _glVertexAttribPointer(HEAP32[3913] | 0, 2, 5126, 0, 20, 12);
 _glEnableVertexAttribArray(HEAP32[3912] | 0);
 _glEnableVertexAttribArray(HEAP32[3913] | 0);
 _glActiveTexture(33984);
 _glBindTexture(3553, HEAP32[3915] | 0);
 _glUniform1i(HEAP32[3914] | 0, 0);
 _glDrawElements(4, 6, 5123, 0);
 STACKTOP = sp;
 return;
}

function _SDL_UpdateMouseFocus($window, $x, $y) {
 $window = $window | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $10 = 0, $11 = 0, $14 = 0, $7 = 0, $cursor$addr$0$i$i = 0, $cursor$addr$0$i$i10 = 0, $cursor$addr$0$i$in$i = 0, $h = 0, $retval$0 = 0, $tobool = 0, $tobool22$i$i = 0, $tobool22$i$i16 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $w = sp + 4 | 0;
 $h = sp;
 $tobool = ($window | 0) == 0;
 if (!$tobool) if (!(HEAP32[$window + 48 >> 2] & 16384)) {
  _SDL_GetWindowSize($window, $w, $h);
  if (!((($y | $x | 0) > -1 ? (HEAP32[$w >> 2] | 0) > ($x | 0) : 0) & (HEAP32[$h >> 2] | 0) > ($y | 0))) {
   if ((HEAP32[3982] | 0) != ($window | 0)) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   _SDL_PrivateSendMouseMotion($window, HEAP32[3981] | 0, 0, $x, $y) | 0;
   $7 = HEAP32[3982] | 0;
   if (!$7) {
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   _SDL_SendWindowEvent($7, 11, 0, 0) | 0;
   HEAP32[3982] = 0;
   HEAP32[3992] = 0;
   $cursor$addr$0$i$i10 = HEAP32[4005] | 0;
   $10 = HEAP32[3973] | 0;
   $tobool22$i$i16 = ($10 | 0) == 0;
   if (($cursor$addr$0$i$i10 | 0) != 0 & (HEAP32[4007] | 0) != 0 & (HEAP32[3993] | 0) == 0) {
    if ($tobool22$i$i16) {
     $retval$0 = 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
    FUNCTION_TABLE_ii[$10 & 63]($cursor$addr$0$i$i10) | 0;
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else {
    if ($tobool22$i$i16) {
     $retval$0 = 0;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
    FUNCTION_TABLE_ii[$10 & 63](0) | 0;
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  }
 }
 $11 = HEAP32[3982] | 0;
 if (($11 | 0) == ($window | 0)) {
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ($11 | 0) _SDL_SendWindowEvent($11, 11, 0, 0) | 0;
 HEAP32[3982] = $window;
 HEAP32[3992] = 0;
 if ($tobool) label = 16; else {
  _SDL_SendWindowEvent($window, 10, 0, 0) | 0;
  if (!(HEAP32[3982] | 0)) label = 16; else $cursor$addr$0$i$in$i = 16024;
 }
 if ((label | 0) == 16) $cursor$addr$0$i$in$i = 16020;
 $cursor$addr$0$i$i = HEAP32[$cursor$addr$0$i$in$i >> 2] | 0;
 $14 = HEAP32[3973] | 0;
 $tobool22$i$i = ($14 | 0) == 0;
 if (($cursor$addr$0$i$i | 0) != 0 & (HEAP32[4007] | 0) != 0 & (HEAP32[3993] | 0) == 0) {
  if (!$tobool22$i$i) FUNCTION_TABLE_ii[$14 & 63]($cursor$addr$0$i$i) | 0;
 } else if (!$tobool22$i$i) FUNCTION_TABLE_ii[$14 & 63](0) | 0;
 _SDL_PrivateSendMouseMotion($window, HEAP32[3981] | 0, 0, $x, $y) | 0;
 $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $2 = 0, $add$ptr = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $2 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $dst_ptr_leading_to_static_ptr;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
 HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($2, $dst_type, 0) | 0) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 7]($2, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 7]($2, $info, $add$ptr, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$number_to_dst_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1) if (!((HEAP32[$number_to_dst_ptr >> 2] | 0) == 0 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function _SDL_QuitSubSystem($flags) {
 $flags = $flags | 0;
 var $0 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $flags$addr$0 = 0, $flags$addr$1 = 0, $flags$addr$2 = 0, $or = 0, $or15 = 0, $or32 = 0;
 if ($flags & 32768 | 0) {
  $0 = HEAP8[13743] | 0;
  if ($0 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $0 << 24 >> 24 == 1 | 0) == 0) $2 = $0; else {
   _SDL_SensorQuit();
   $2 = HEAP8[13743] | 0;
  }
  if ($2 << 24 >> 24) HEAP8[13743] = $2 + -1 << 24 >> 24;
 }
 if (!($flags & 8192)) $flags$addr$0 = $flags; else {
  $or = $flags | 512;
  $3 = HEAP8[13741] | 0;
  if ($3 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $3 << 24 >> 24 == 1 | 0) == 0) $5 = $3; else {
   _SDL_GameControllerQuit();
   $5 = HEAP8[13741] | 0;
  }
  if (!($5 << 24 >> 24)) $flags$addr$0 = $or; else {
   HEAP8[13741] = $5 + -1 << 24 >> 24;
   $flags$addr$0 = $or;
  }
 }
 if (!($flags$addr$0 & 512)) $flags$addr$1 = $flags$addr$0; else {
  $or15 = $flags$addr$0 | 16384;
  $6 = HEAP8[13737] | 0;
  if ($6 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $6 << 24 >> 24 == 1 | 0) == 0) $8 = $6; else {
   _SDL_JoystickQuit();
   $8 = HEAP8[13737] | 0;
  }
  if (!($8 << 24 >> 24)) $flags$addr$1 = $or15; else {
   HEAP8[13737] = $8 + -1 << 24 >> 24;
   $flags$addr$1 = $or15;
  }
 }
 if ($flags$addr$1 & 16 | 0) {
  $9 = HEAP8[13732] | 0;
  if ($9 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $9 << 24 >> 24 == 1 | 0) == 0) $11 = $9; else {
   _SDL_AudioQuit();
   $11 = HEAP8[13732] | 0;
  }
  if ($11 << 24 >> 24) HEAP8[13732] = $11 + -1 << 24 >> 24;
 }
 if (!($flags$addr$1 & 32)) $flags$addr$2 = $flags$addr$1; else {
  $or32 = $flags$addr$1 | 16384;
  $12 = HEAP8[13733] | 0;
  if ($12 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $12 << 24 >> 24 == 1 | 0) == 0) $14 = $12; else {
   _SDL_VideoQuit();
   $14 = HEAP8[13733] | 0;
  }
  if (!($14 << 24 >> 24)) $flags$addr$2 = $or32; else {
   HEAP8[13733] = $14 + -1 << 24 >> 24;
   $flags$addr$2 = $or32;
  }
 }
 if ($flags$addr$2 & 1 | 0) {
  $15 = HEAP8[13728] | 0;
  if ($15 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $15 << 24 >> 24 == 1 | 0) == 0) $17 = $15; else {
   _SDL_TimerQuit();
   $17 = HEAP8[13728] | 0;
  }
  if ($17 << 24 >> 24) HEAP8[13728] = $17 + -1 << 24 >> 24;
 }
 if (!($flags$addr$2 & 16384)) return;
 $18 = HEAP8[13742] | 0;
 if ($18 << 24 >> 24 == 0 ? 1 : (HEAP32[4714] | $18 << 24 >> 24 == 1 | 0) == 0) $20 = $18; else {
  _SDL_QuitQuit();
  _SDL_StopEventLoop();
  $20 = HEAP8[13742] | 0;
 }
 if (!($20 << 24 >> 24)) return;
 HEAP8[13742] = $20 + -1 << 24 >> 24;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $4 = 0, $6 = 0, $9 = 0, $add = 0, $call741 = 0, $call746 = 0, $cmp24 = 0, $cnt$0 = 0, $fd = 0, $iov$043 = 0, $iov$1 = 0, $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$044 = 0, $retval$0 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $iovs = sp;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $add = $sub$ptr$sub + $len | 0;
 $fd = $f + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$fd >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $iovs;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $call741 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($add | 0) == ($call741 | 0)) label = 3; else {
  $call746 = $call741;
  $iov$043 = $iovs;
  $iovcnt$045 = 2;
  $rem$044 = $add;
  while (1) {
   if (($call746 | 0) < 0) break;
   $rem$044 = $rem$044 - $call746 | 0;
   $9 = HEAP32[$iov$043 + 4 >> 2] | 0;
   $cmp24 = $call746 >>> 0 > $9 >>> 0;
   $iov$1 = $cmp24 ? $iov$043 + 8 | 0 : $iov$043;
   $iovcnt$1 = $iovcnt$045 + ($cmp24 << 31 >> 31) | 0;
   $cnt$0 = $call746 - ($cmp24 ? $9 : 0) | 0;
   HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
   $iov_len36 = $iov$1 + 4 | 0;
   HEAP32[$iov_len36 >> 2] = (HEAP32[$iov_len36 >> 2] | 0) - $cnt$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$fd >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$1;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$1;
   $call746 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($rem$044 | 0) == ($call746 | 0)) {
    label = 3;
    break L1;
   } else {
    $iov$043 = $iov$1;
    $iovcnt$045 = $iovcnt$1;
   }
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$045 | 0) == 2) $retval$0 = 0; else $retval$0 = $len - (HEAP32[$iov$043 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $5 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $tobool19 = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  if (!(__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $12 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 7]($12, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    do if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) != 4) {
     $found_our_static_ptr = $info + 52 | 0;
     HEAP8[$found_our_static_ptr >> 0] = 0;
     $found_any_static_type = $info + 53 | 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     $5 = HEAP32[$this + 8 >> 2] | 0;
     FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 7]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
      break;
     } else {
      $tobool19 = (HEAP8[$found_our_static_ptr >> 0] | 0) == 0;
      HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
      if ($tobool19) break; else break L1;
     }
    } while (0);
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) != 1) break;
    if ((HEAP32[$info + 24 >> 2] | 0) != 2) break;
    HEAP8[$info + 54 >> 0] = 1;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _SDL_ShowMessageBox($messageboxdata, $buttonid) {
 $messageboxdata = $messageboxdata | 0;
 $buttonid = $buttonid | 0;
 var $3 = 0, $6 = 0, $7 = 0, $call12 = 0, $call20 = 0, $call5 = 0, $call9 = 0, $dummybutton = 0, $retval$0 = 0, $retval1$027 = 0, $spec$select = 0, $tobool6 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $dummybutton = sp + 52 | 0;
 if (!$messageboxdata) {
  HEAP32[$vararg_buffer >> 2] = 6796;
  $retval$0 = _SDL_SetError(5998, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ((HEAP32[$messageboxdata + 16 >> 2] | 0) < 0) {
  $retval$0 = _SDL_SetError(6811, sp + 8 | 0) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call5 = _SDL_GetKeyboardFocus() | 0;
 $tobool6 = ($call5 | 0) != 0;
 do if ($tobool6) {
  if (!0) {
   _SDL_SetError(4403, $vararg_buffer3) | 0;
   $7 = 0;
   break;
  }
  if ((HEAP32[$call5 >> 2] | 0) == (316 | 0)) {
   $7 = (HEAP32[$call5 + 48 >> 2] & 16384 | 0) != 0;
   break;
  } else {
   _SDL_SetError(4444, $vararg_buffer5) | 0;
   $7 = 0;
   break;
  }
 } else $7 = 0; while (0);
 $call9 = _SDL_GetRelativeMouseMode() | 0;
 _SDL_CaptureMouse(0) | 0;
 _SDL_SetRelativeMouseMode(0) | 0;
 $call12 = _SDL_ShowCursor(1) | 0;
 _SDL_ResetKeyboard();
 $spec$select = ($buttonid | 0) == 0 ? $dummybutton : $buttonid;
 if (!0) label = 14; else {
  $3 = HEAP32[70] | 0;
  if (!$3) label = 14; else {
   $call20 = FUNCTION_TABLE_iiii[$3 & 15](0, $messageboxdata, $spec$select) | 0;
   if (($call20 | 0) == -1) label = 14; else $retval1$027 = $call20;
  }
 }
 if ((label | 0) == 14) {
  _SDL_SetError(6837, $vararg_buffer7) | 0;
  $retval1$027 = -1;
 }
 if ($tobool6) {
  do if (!0) _SDL_SetError(4403, $vararg_buffer9) | 0; else {
   if ((HEAP32[$call5 >> 2] | 0) != (316 | 0)) {
    _SDL_SetError(4444, $vararg_buffer11) | 0;
    break;
   }
   if (HEAP32[$call5 + 48 >> 2] & 4 | 0) {
    $6 = HEAP32[23] | 0;
    if ($6 | 0) FUNCTION_TABLE_vii[$6 & 63](0, $call5);
   }
  } while (0);
  if ($7) _SDL_CaptureMouse(1) | 0;
 }
 _SDL_ShowCursor($call12) | 0;
 _SDL_SetRelativeMouseMode($call9) | 0;
 $retval$0 = $retval1$027;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __Z6initGLP8UserData($userData) {
 $userData = $userData | 0;
 var $1 = 0, $call = 0, $call1 = 0, $call2 = 0, $call6 = 0, $indices = 0, $infoLen = 0, $linked = 0, $retval$0 = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp + 80 | 0;
 $linked = sp + 84 | 0;
 $infoLen = sp;
 $indices = sp + 88 | 0;
 _emscripten_async_wget(3811, 3844, 11, 12);
 $call = __Z10LoadShaderjPKc(35633, 16) | 0;
 $call1 = __Z10LoadShaderjPKc(35632, 368) | 0;
 $call2 = _glCreateProgram() | 0;
 if (!$call2) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _glAttachShader($call2 | 0, $call | 0);
 _glAttachShader($call2 | 0, $call1 | 0);
 _glLinkProgram($call2 | 0);
 _glGetProgramiv($call2 | 0, 35714, $linked | 0);
 if (HEAP32[$linked >> 2] | 0) {
  HEAP32[$userData >> 2] = $call2;
  HEAP32[$userData + 4 >> 2] = _glGetUniformLocation($call2 | 0, 3881) | 0;
  HEAP32[$userData + 8 >> 2] = _glGetAttribLocation(HEAP32[$userData >> 2] | 0, 3901) | 0;
  HEAP32[$userData + 12 >> 2] = _glGetAttribLocation(HEAP32[$userData >> 2] | 0, 3912) | 0;
  HEAP32[$userData + 16 >> 2] = _glGetUniformLocation(HEAP32[$userData >> 2] | 0, 3923) | 0;
  dest = $infoLen;
  src = 720;
  stop = dest + 80 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP16[$indices >> 1] = HEAP16[1884] | 0;
  HEAP16[$indices + 2 >> 1] = HEAP16[1885] | 0;
  HEAP16[$indices + 4 >> 1] = HEAP16[1886] | 0;
  HEAP16[$indices + 6 >> 1] = HEAP16[1887] | 0;
  HEAP16[$indices + 8 >> 1] = HEAP16[1888] | 0;
  HEAP16[$indices + 10 >> 1] = HEAP16[1889] | 0;
  _glGenBuffers(1, 15668);
  _glBindBuffer(34962, HEAP32[3917] | 0);
  _glBufferData(34962, 80, $infoLen | 0, 35048);
  _glGenBuffers(1, 15672);
  _glBindBuffer(34963, HEAP32[3918] | 0);
  _glBufferData(34963, 12, $indices | 0, 35048);
  _glViewport(0, 0, 640, 480);
  _glClearColor(0.0, 0.0, 0.0, 0.0);
  $retval$0 = 1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$infoLen >> 2] = 0;
 _glGetProgramiv($call2 | 0, 35716, $infoLen | 0);
 $1 = HEAP32[$infoLen >> 2] | 0;
 if (($1 | 0) > 1) {
  $call6 = _malloc($1) | 0;
  _glGetProgramInfoLog($call2 | 0, $1 | 0, 0, $call6 | 0);
  HEAP32[$vararg_buffer >> 2] = $call6;
  _printf(3854, $vararg_buffer) | 0;
  _free($call6);
 }
 _glDeleteProgram($call2 | 0);
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _Emscripten_JoyStickConnected($eventType, $gamepadEvent, $userData) {
 $eventType = $eventType | 0;
 $gamepadEvent = $gamepadEvent | 0;
 $userData = $userData | 0;
 var $$sink = 0, $0 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $analogButton32 = 0, $axis24 = 0, $call1 = 0, $call14 = 0, $call8 = 0, $digitalButton35 = 0, $i$045 = 0, $i$143 = 0, $index = 0, $item$06$i = 0, $item$08$i = 0, $name = 0;
 $index = $gamepadEvent + 1300 | 0;
 $0 = HEAP32[$index >> 2] | 0;
 L1 : do if (($0 | 0) >= 0) {
  $item$06$i = HEAP32[4699] | 0;
  if ($item$06$i | 0) {
   $item$08$i = $item$06$i;
   while (1) {
    if ((HEAP32[$item$08$i >> 2] | 0) == ($0 | 0)) break;
    $item$08$i = HEAP32[$item$08$i + 1320 >> 2] | 0;
    if (!$item$08$i) break L1;
   }
   return 1;
  }
 } while (0);
 $call1 = _SDL_malloc(1328) | 0;
 if (!$call1) return 1;
 _SDL_memset($call1, 0, 1328) | 0;
 HEAP32[$call1 >> 2] = HEAP32[$index >> 2];
 $call8 = _SDL_strdup($gamepadEvent + 1304 | 0) | 0;
 $name = $call1 + 4 | 0;
 HEAP32[$name >> 2] = $call8;
 if (!$call8) {
  _SDL_free($call1);
  return 1;
 }
 $call14 = _SDL_strdup($gamepadEvent + 1368 | 0) | 0;
 HEAP32[$call1 + 8 >> 2] = $call14;
 if (!$call14) {
  _SDL_free(HEAP32[$name >> 2] | 0);
  _SDL_free($call1);
  return 1;
 }
 $4 = HEAP32[$gamepadEvent + 8 >> 2] | 0;
 HEAP32[$call1 + 24 >> 2] = $4;
 $5 = HEAP32[$gamepadEvent + 12 >> 2] | 0;
 HEAP32[$call1 + 20 >> 2] = $5;
 $6 = HEAP32[4702] | 0;
 HEAP32[4702] = $6 + 1;
 HEAP32[$call1 + 12 >> 2] = $6;
 HEAPF64[$call1 + 32 >> 3] = +HEAPF64[$gamepadEvent >> 3];
 if (($4 | 0) > 0) {
  $axis24 = $call1 + 40 | 0;
  $i$045 = 0;
  do {
   HEAPF64[$axis24 + ($i$045 << 3) >> 3] = +HEAPF64[$gamepadEvent + 16 + ($i$045 << 3) >> 3];
   $i$045 = $i$045 + 1 | 0;
  } while (($i$045 | 0) != ($4 | 0));
 }
 if (($5 | 0) > 0) {
  $analogButton32 = $call1 + 552 | 0;
  $digitalButton35 = $call1 + 1064 | 0;
  $i$143 = 0;
  do {
   HEAPF64[$analogButton32 + ($i$143 << 3) >> 3] = +HEAPF64[$gamepadEvent + 528 + ($i$143 << 3) >> 3];
   HEAP32[$digitalButton35 + ($i$143 << 2) >> 2] = HEAP32[$gamepadEvent + 1040 + ($i$143 << 2) >> 2];
   $i$143 = $i$143 + 1 | 0;
  } while (($i$143 | 0) != ($5 | 0));
 }
 $11 = HEAP32[4700] | 0;
 if (!$11) {
  HEAP32[4700] = $call1;
  $$sink = 18796;
 } else {
  HEAP32[$11 + 1320 >> 2] = $call1;
  $$sink = 18800;
 }
 HEAP32[$$sink >> 2] = $call1;
 $12 = HEAP32[4701] | 0;
 HEAP32[4701] = $12 + 1;
 _SDL_PrivateJoystickAdded($12);
 return 1;
}

function _SDL_PrivateJoystickAxis($joystick, $axis, $value) {
 $joystick = $joystick | 0;
 $axis = $axis | 0;
 $value = $value | 0;
 var $$pre = 0, $1 = 0, $4 = 0, $7 = 0, $8 = 0, $axes = 0, $conv = 0, $event = 0, $has_initial_value = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 $conv = $axis & 255;
 if ((HEAP32[$joystick + 28 >> 2] | 0) <= ($conv | 0)) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $axes = $joystick + 32 | 0;
 $1 = HEAP32[$axes >> 2] | 0;
 $has_initial_value = $1 + ($conv << 4) + 8 | 0;
 if (!(HEAP32[$has_initial_value >> 2] | 0)) {
  HEAP16[$1 + ($conv << 4) >> 1] = $value;
  HEAP16[$1 + ($conv << 4) + 2 >> 1] = $value;
  HEAP16[$1 + ($conv << 4) + 4 >> 1] = $value;
  HEAP32[$has_initial_value >> 2] = 1;
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $$pre = HEAP16[$1 + ($conv << 4) + 2 >> 1] | 0;
 if ($$pre << 16 >> 16 == $value << 16 >> 16) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 do if (!(HEAP32[$1 + ($conv << 4) + 12 >> 2] | 0)) if ((_SDL_abs(($value << 16 >> 16) - ($$pre << 16 >> 16) | 0) | 0) < 410) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 } else {
  $4 = HEAP32[$axes >> 2] | 0;
  HEAP32[$4 + ($conv << 4) + 12 >> 2] = 1;
  HEAP16[$4 + ($conv << 4) + 2 >> 1] = $value;
  _SDL_PrivateJoystickAxis($joystick, $axis, HEAP16[$4 + ($conv << 4) >> 1] | 0) | 0;
  break;
 } while (0);
 if (!(HEAP32[4703] | 0)) if (_SDL_HasWindows() | 0) if (!(_SDL_GetKeyboardFocus() | 0)) {
  $7 = HEAP32[$axes >> 2] | 0;
  $8 = HEAP16[$7 + ($conv << 4) + 4 >> 1] | 0;
  if ($8 << 16 >> 16 < $value << 16 >> 16) if ((HEAP16[$7 + ($conv << 4) + 2 >> 1] | 0) <= $value << 16 >> 16) {
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  if ($8 << 16 >> 16 > $value << 16 >> 16) if ((HEAP16[$7 + ($conv << 4) + 2 >> 1] | 0) >= $value << 16 >> 16) {
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
 }
 HEAP16[(HEAP32[$axes >> 2] | 0) + ($conv << 4) + 2 >> 1] = $value;
 if ((_SDL_EventState(1536, -1) | 0) << 24 >> 24 != 1) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 HEAP32[$event >> 2] = 1536;
 HEAP32[$event + 8 >> 2] = HEAP32[$joystick >> 2];
 HEAP8[$event + 12 >> 0] = $axis;
 HEAP16[$event + 16 >> 1] = $value;
 $retval$1 = (_SDL_PushEvent($event) | 0) == 1 & 1;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _EMSCRIPTEN_JoystickInit() {
 var $$in79$i = 0, $$in79$i12 = 0, $0 = 0, $4 = 0, $call3 = 0, $gamepadState = 0, $i$022 = 0, $retval$0 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0, $$in79$i$looptemp = 0, $$in79$i12$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1456 | 0;
 $vararg_buffer3 = sp + 1448 | 0;
 $vararg_buffer1 = sp + 1440 | 0;
 $gamepadState = sp;
 HEAP32[4701] = 0;
 if ((_emscripten_sample_gamepad_data() | 0) == -1) {
  $retval$0 = _SDL_SetError(5723, sp + 1432 | 0) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call3 = _emscripten_get_num_gamepads() | 0;
 if (($call3 | 0) > 0) {
  $i$022 = 0;
  do {
   if (!(_emscripten_get_gamepad_status($i$022 | 0, $gamepadState | 0) | 0)) _Emscripten_JoyStickConnected(26, $gamepadState, 0) | 0;
   $i$022 = $i$022 + 1 | 0;
  } while (($i$022 | 0) != ($call3 | 0));
 }
 if (_emscripten_set_gamepadconnected_callback_on_thread(0, 0, 6, 2) | 0) {
  $0 = HEAP32[4699] | 0;
  if ($0 | 0) {
   $$in79$i = $0;
   do {
    $$in79$i$looptemp = $$in79$i;
    $$in79$i = HEAP32[$$in79$i + 1320 >> 2] | 0;
    _SDL_free(HEAP32[$$in79$i$looptemp + 8 >> 2] | 0);
    _SDL_free(HEAP32[$$in79$i$looptemp + 4 >> 2] | 0);
    _SDL_free($$in79$i$looptemp);
   } while (($$in79$i | 0) != 0);
  }
  HEAP32[4700] = 0;
  HEAP32[4699] = 0;
  HEAP32[4701] = 0;
  HEAP32[4702] = 0;
  _emscripten_set_gamepadconnected_callback_on_thread(0, 0, 0, 2) | 0;
  _emscripten_set_gamepaddisconnected_callback_on_thread(0, 0, 0, 2) | 0;
  $retval$0 = _SDL_SetError(5746, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(_emscripten_set_gamepaddisconnected_callback_on_thread(0, 0, 7, 2) | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $4 = HEAP32[4699] | 0;
 if ($4 | 0) {
  $$in79$i12 = $4;
  do {
   $$in79$i12$looptemp = $$in79$i12;
   $$in79$i12 = HEAP32[$$in79$i12 + 1320 >> 2] | 0;
   _SDL_free(HEAP32[$$in79$i12$looptemp + 8 >> 2] | 0);
   _SDL_free(HEAP32[$$in79$i12$looptemp + 4 >> 2] | 0);
   _SDL_free($$in79$i12$looptemp);
  } while (($$in79$i12 | 0) != 0);
 }
 HEAP32[4700] = 0;
 HEAP32[4699] = 0;
 HEAP32[4701] = 0;
 HEAP32[4702] = 0;
 _emscripten_set_gamepadconnected_callback_on_thread(0, 0, 0, 2) | 0;
 _emscripten_set_gamepaddisconnected_callback_on_thread(0, 0, 0, 2) | 0;
 $retval$0 = _SDL_SetError(5785, $vararg_buffer3) | 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___embind_register_native_and_builtin_types() {
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvE3getEv() | 0, 6980);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbE3getEv() | 0, 6985, 1, 1, 0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc(6990);
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc(6995);
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc(7007);
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc(7021);
 __ZN12_GLOBAL__N_116register_integerItEEvPKc(7027);
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc(7042);
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc(7046);
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc(7059);
 __ZN12_GLOBAL__N_116register_integerImEEvPKc(7064);
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc(7078);
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc(7084);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0, 7091);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0, 7103);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0, 4, 7136);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEE3getEv() | 0, 7149);
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(7165);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(7195);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(7232);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(7271);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(7302);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(7342);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(7371);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(7409);
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(7439);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(7478);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(7510);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(7543);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(7576);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(7610);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(7643);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(7677);
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(7708);
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(7740);
 return;
}

function _SDL_DelTouch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $13 = 0, $14 = 0, $2 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $call8$i = 0, $dec = 0, $fingers = 0, $i$019 = 0, $inc$i$i = 0, $index$06$i = 0, $index$06$i$i = 0, $max_fingers = 0, $retval$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = HEAP32[4666] | 0;
 L1 : do if (($2 | 0) > 0) {
  $index$06$i = 0;
  while (1) {
   $4 = HEAP32[0 + ($index$06$i << 2) >> 2] | 0;
   if ((HEAP32[$4 >> 2] | 0) == ($0 | 0) ? (HEAP32[$4 + 4 >> 2] | 0) == ($1 | 0) : 0) {
    $retval$0$i = $index$06$i;
    break;
   }
   $index$06$i = $index$06$i + 1 | 0;
   if (($index$06$i | 0) >= ($2 | 0)) {
    $retval$0$i = -1;
    break;
   }
  }
  $index$06$i$i = 0;
  while (1) {
   $13 = HEAP32[0 + ($index$06$i$i << 2) >> 2] | 0;
   $14 = $13;
   if ((HEAP32[$14 >> 2] | 0) == ($0 | 0) ? (HEAP32[$14 + 4 >> 2] | 0) == ($1 | 0) : 0) break;
   $inc$i$i = $index$06$i$i + 1 | 0;
   if (($inc$i$i | 0) < ($2 | 0)) $index$06$i$i = $inc$i$i; else break L1;
  }
  if (($index$06$i$i | 0) < ($2 | 0)) {
   if (!$13) {
    STACKTOP = sp;
    return;
   }
   $max_fingers = $13 + 12 | 0;
   $fingers = $13 + 16 | 0;
   $26 = HEAP32[$fingers >> 2] | 0;
   if ((HEAP32[$max_fingers >> 2] | 0) > 0) {
    $27 = $26;
    $i$019 = 0;
    while (1) {
     _SDL_free(HEAP32[$27 + ($i$019 << 2) >> 2] | 0);
     $i$019 = $i$019 + 1 | 0;
     $30 = HEAP32[$fingers >> 2] | 0;
     if (($i$019 | 0) >= (HEAP32[$max_fingers >> 2] | 0)) {
      $$lcssa = $30;
      break;
     } else $27 = $30;
    }
   } else $$lcssa = $26;
   _SDL_free($$lcssa);
   _SDL_free($13);
   $dec = (HEAP32[4666] | 0) + -1 | 0;
   HEAP32[4666] = $dec;
   HEAP32[0 + ($retval$0$i << 2) >> 2] = HEAP32[0 + ($dec << 2) >> 2];
   _SDL_GestureDelTouch($0, $1) | 0;
   STACKTOP = sp;
   return;
  }
 } while (0);
 if (!(HEAP32[(_SDL_GetVideoDevice() | 0) + 12 >> 2] | 0)) {
  HEAP32[$vararg_buffer1 >> 2] = $0;
  _SDL_SetError(5532, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer >> 2] = $0;
  _SDL_SetError(5501, $vararg_buffer) | 0;
  $24 = HEAP32[(_SDL_GetVideoDevice() | 0) + 12 >> 2] | 0;
  $call8$i = _SDL_GetVideoDevice() | 0;
  FUNCTION_TABLE_vi[$24 & 63]($call8$i);
  STACKTOP = sp;
  return;
 }
}

function _EMSCRIPTEN_JoystickUpdate($joystick) {
 $joystick = $joystick | 0;
 var $0 = 0, $10 = 0, $11 = 0, $13 = 0.0, $15 = 0.0, $16 = 0, $18 = 0, $19 = 0, $2 = 0.0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx30 = 0, $arrayidx32 = 0, $gamepadState = 0, $i$037 = 0, $i$135 = 0, $joystick16 = 0, $joystick36 = 0, $naxes = 0, $nbuttons = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1440 | 0;
 $gamepadState = sp;
 $0 = HEAP32[$joystick + 84 >> 2] | 0;
 _emscripten_sample_gamepad_data() | 0;
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 if (_emscripten_get_gamepad_status(HEAP32[$0 >> 2] | 0, $gamepadState | 0) | 0) {
  STACKTOP = sp;
  return;
 }
 $2 = +HEAPF64[$gamepadState >> 3];
 if (!($2 == 0.0)) if (!($2 != +HEAPF64[$0 + 32 >> 3])) {
  STACKTOP = sp;
  return;
 }
 $nbuttons = $0 + 20 | 0;
 $4 = HEAP32[$nbuttons >> 2] | 0;
 if (($4 | 0) > 0) {
  $joystick16 = $0 + 16 | 0;
  $18 = $4;
  $i$037 = 0;
  while (1) {
   $arrayidx = $0 + 1064 + ($i$037 << 2) | 0;
   $5 = HEAP32[$arrayidx >> 2] | 0;
   $arrayidx10 = $gamepadState + 1040 + ($i$037 << 2) | 0;
   $6 = HEAP32[$arrayidx10 >> 2] | 0;
   if (($5 | 0) == ($6 | 0)) {
    $10 = $18;
    $9 = $5;
   } else {
    _SDL_PrivateJoystickButton(HEAP32[$joystick16 >> 2] | 0, $i$037 & 255, ($6 | 0) != 0 & 1) | 0;
    $10 = HEAP32[$nbuttons >> 2] | 0;
    $9 = HEAP32[$arrayidx10 >> 2] | 0;
   }
   HEAPF64[$0 + 552 + ($i$037 << 3) >> 3] = +HEAPF64[$gamepadState + 528 + ($i$037 << 3) >> 3];
   HEAP32[$arrayidx >> 2] = $9;
   $i$037 = $i$037 + 1 | 0;
   if (($i$037 | 0) >= ($10 | 0)) break; else $18 = $10;
  }
 }
 $naxes = $0 + 24 | 0;
 $11 = HEAP32[$naxes >> 2] | 0;
 if (($11 | 0) > 0) {
  $joystick36 = $0 + 16 | 0;
  $19 = $11;
  $i$135 = 0;
  while (1) {
   $arrayidx30 = $0 + 40 + ($i$135 << 3) | 0;
   $arrayidx32 = $gamepadState + 16 + ($i$135 << 3) | 0;
   $13 = +HEAPF64[$arrayidx32 >> 3];
   if (+HEAPF64[$arrayidx30 >> 3] != $13) {
    _SDL_PrivateJoystickAxis(HEAP32[$joystick36 >> 2] | 0, $i$135 & 255, ~~($13 * 32767.0)) | 0;
    $15 = +HEAPF64[$arrayidx32 >> 3];
    $16 = HEAP32[$naxes >> 2] | 0;
   } else {
    $15 = $13;
    $16 = $19;
   }
   HEAPF64[$arrayidx30 >> 3] = $15;
   $i$135 = $i$135 + 1 | 0;
   if (($i$135 | 0) >= ($16 | 0)) break; else $19 = $16;
  }
 }
 HEAPF64[$0 + 32 >> 3] = +HEAPF64[$gamepadState >> 3];
 STACKTOP = sp;
 return;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $0 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1 = 0, $d$addr$224 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1 = 0, $s$addr$225 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $d$addr$0$lcssa = $d;
   $s$addr$0$lcssa = $s;
  } else {
   $d$addr$037 = $d;
   $s$addr$038 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$038 >> 0] | 0;
    HEAP8[$d$addr$037 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $retval$0 = $d$addr$037;
     break L1;
    }
    $incdec$ptr = $s$addr$038 + 1 | 0;
    $incdec$ptr5 = $d$addr$037 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $d$addr$0$lcssa = $incdec$ptr5;
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else {
     $d$addr$037 = $incdec$ptr5;
     $s$addr$038 = $incdec$ptr;
    }
   }
  }
  $6 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  if (!(($6 & -2139062144 ^ -2139062144) & $6 + -16843009)) {
   $7 = $6;
   $wd$031 = $d$addr$0$lcssa;
   $ws$032 = $s$addr$0$lcssa;
   while (1) {
    $incdec$ptr11 = $ws$032 + 4 | 0;
    $incdec$ptr12 = $wd$031 + 4 | 0;
    HEAP32[$wd$031 >> 2] = $7;
    $7 = HEAP32[$incdec$ptr11 >> 2] | 0;
    if (($7 & -2139062144 ^ -2139062144) & $7 + -16843009 | 0) {
     $wd$0$lcssa = $incdec$ptr12;
     $ws$0$lcssa = $incdec$ptr11;
     break;
    } else {
     $wd$031 = $incdec$ptr12;
     $ws$032 = $incdec$ptr11;
    }
   }
  } else {
   $wd$0$lcssa = $d$addr$0$lcssa;
   $ws$0$lcssa = $s$addr$0$lcssa;
  }
  $d$addr$1 = $wd$0$lcssa;
  $s$addr$1 = $ws$0$lcssa;
  label = 10;
 } else {
  $d$addr$1 = $d;
  $s$addr$1 = $s;
  label = 10;
 } while (0);
 if ((label | 0) == 10) {
  $9 = HEAP8[$s$addr$1 >> 0] | 0;
  HEAP8[$d$addr$1 >> 0] = $9;
  if (!($9 << 24 >> 24)) $retval$0 = $d$addr$1; else {
   $d$addr$224 = $d$addr$1;
   $s$addr$225 = $s$addr$1;
   while (1) {
    $s$addr$225 = $s$addr$225 + 1 | 0;
    $incdec$ptr20 = $d$addr$224 + 1 | 0;
    $10 = HEAP8[$s$addr$225 >> 0] | 0;
    HEAP8[$incdec$ptr20 >> 0] = $10;
    if (!($10 << 24 >> 24)) {
     $retval$0 = $incdec$ptr20;
     break;
    } else $d$addr$224 = $incdec$ptr20;
   }
  }
 }
 return $retval$0 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$pre = 0, $0 = 0, $14 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $retval$0 = 0, $rpos33$phi$trans$insert = 0, $shcnt30 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0;
 $shlim = $f + 112 | 0;
 $0 = $shlim;
 $2 = HEAP32[$0 >> 2] | 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 if (($2 | 0) == 0 & ($5 | 0) == 0) label = 3; else {
  $9 = $f + 120 | 0;
  $14 = HEAP32[$9 + 4 >> 2] | 0;
  if (($14 | 0) < ($5 | 0) | (($14 | 0) == ($5 | 0) ? (HEAP32[$9 >> 2] | 0) >>> 0 < $2 >>> 0 : 0)) label = 3; else label = 4;
 }
 if ((label | 0) == 3) {
  $call = ___uflow($f) | 0;
  if (($call | 0) < 0) label = 4; else {
   $20 = $shlim;
   $22 = HEAP32[$20 >> 2] | 0;
   $25 = HEAP32[$20 + 4 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (($22 | 0) == 0 & ($25 | 0) == 0) {
    $66 = $$pre;
    label = 9;
   } else {
    $30 = HEAP32[$f + 4 >> 2] | 0;
    $sub$ptr$sub = $$pre - $30 | 0;
    $32 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
    $33 = $f + 120 | 0;
    $39 = _i64Subtract($22 | 0, $25 | 0, HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0) | 0;
    $40 = getTempRet0() | 0;
    $46 = $$pre;
    if (($40 | 0) > ($32 | 0) | ($40 | 0) == ($32 | 0) & $39 >>> 0 > $sub$ptr$sub >>> 0) {
     $66 = $46;
     label = 9;
    } else {
     HEAP32[$f + 104 >> 2] = $30 + ($39 + -1);
     $47 = $46;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 104 >> 2] = $$pre;
    $47 = $66;
   }
   $rpos33$phi$trans$insert = $f + 4 | 0;
   if (!$47) $64 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0; else {
    $48 = HEAP32[$rpos33$phi$trans$insert >> 2] | 0;
    $add = $47 + 1 - $48 | 0;
    $shcnt30 = $f + 120 | 0;
    $51 = $shcnt30;
    $57 = _i64Add(HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, $add | 0, (($add | 0) < 0) << 31 >> 31 | 0) | 0;
    $58 = getTempRet0() | 0;
    $59 = $shcnt30;
    HEAP32[$59 >> 2] = $57;
    HEAP32[$59 + 4 >> 2] = $58;
    $64 = $48;
   }
   $arrayidx = $64 + -1 | 0;
   if (($call | 0) == (HEAPU8[$arrayidx >> 0] | 0 | 0)) $retval$0 = $call; else {
    HEAP8[$arrayidx >> 0] = $call;
    $retval$0 = $call;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 104 >> 2] = 0;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _SDL_AudioQuit() {
 var $$in$i = 0, $$in$i6 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $original_name$i = 0, $original_name$i13 = 0, $$in$i$looptemp = 0, $$in$i6$looptemp = 0;
 if (!(HEAP32[4667] | 0)) return;
 _close_audio_device(HEAP32[3440] | 0);
 _close_audio_device(HEAP32[3441] | 0);
 _close_audio_device(HEAP32[3442] | 0);
 _close_audio_device(HEAP32[3443] | 0);
 _close_audio_device(HEAP32[3444] | 0);
 _close_audio_device(HEAP32[3445] | 0);
 _close_audio_device(HEAP32[3446] | 0);
 _close_audio_device(HEAP32[3447] | 0);
 _close_audio_device(HEAP32[3448] | 0);
 _close_audio_device(HEAP32[3449] | 0);
 _close_audio_device(HEAP32[3450] | 0);
 _close_audio_device(HEAP32[3451] | 0);
 _close_audio_device(HEAP32[3452] | 0);
 _close_audio_device(HEAP32[3453] | 0);
 _close_audio_device(HEAP32[3454] | 0);
 _close_audio_device(HEAP32[3455] | 0);
 $17 = HEAP32[4697] | 0;
 if ($17 | 0) {
  $$in$i = $17;
  do {
   $$in$i$looptemp = $$in$i;
   $$in$i = HEAP32[$$in$i + 16 >> 2] | 0;
   $19 = HEAP32[$$in$i$looptemp >> 2] | 0;
   if ($19 | 0) FUNCTION_TABLE_vi[HEAP32[18736 >> 2] & 63]($19);
   $21 = HEAP32[$$in$i$looptemp + 4 >> 2] | 0;
   $original_name$i = $$in$i$looptemp + 8 | 0;
   if (($21 | 0) == (HEAP32[$original_name$i >> 2] | 0)) $23 = $21; else {
    _SDL_free($21);
    $23 = HEAP32[$original_name$i >> 2] | 0;
   }
   _SDL_free($23);
   _SDL_free($$in$i$looptemp);
  } while (($$in$i | 0) != 0);
 }
 HEAP32[4697] = 0;
 HEAP32[4695] = 0;
 $24 = HEAP32[4698] | 0;
 if ($24 | 0) {
  $$in$i6 = $24;
  do {
   $$in$i6$looptemp = $$in$i6;
   $$in$i6 = HEAP32[$$in$i6 + 16 >> 2] | 0;
   $26 = HEAP32[$$in$i6$looptemp >> 2] | 0;
   if ($26 | 0) FUNCTION_TABLE_vi[HEAP32[18736 >> 2] & 63]($26);
   $28 = HEAP32[$$in$i6$looptemp + 4 >> 2] | 0;
   $original_name$i13 = $$in$i6$looptemp + 8 | 0;
   if (($28 | 0) == (HEAP32[$original_name$i13 >> 2] | 0)) $30 = $28; else {
    _SDL_free($28);
    $30 = HEAP32[$original_name$i13 >> 2] | 0;
   }
   _SDL_free($30);
   _SDL_free($$in$i6$looptemp);
  } while (($$in$i6 | 0) != 0);
 }
 HEAP32[4698] = 0;
 HEAP32[4696] = 0;
 FUNCTION_TABLE_v[HEAP32[18740 >> 2] & 7]();
 _SDL_DestroyMutex(HEAP32[4692] | 0);
 _SDL_memset(18668, 0, 128) | 0;
 _SDL_memset(13760, 0, 64) | 0;
 _SDL_FreeResampleFilter();
 return;
}

function _SDL_OnWindowFocusLost($window) {
 $window = $window | 0;
 var $1 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $flags$i = 0, $flags11$i = 0, $grabbed$014$i = 0, $grabbed_window18$pre$phi$iZ2D = 0, $grabbed_window512$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (HEAP32[$window + 100 >> 2] | 0) {
  $1 = HEAP32[30] | 0;
  if ($1 | 0) FUNCTION_TABLE_iiii[$1 & 15](0, $window, HEAP32[$window + 104 >> 2] | 0) | 0;
 }
 $3 = HEAP32[(_SDL_GetMouse() | 0) + 88 >> 2] | 0;
 $flags$i = $window + 48 | 0;
 $4 = HEAP32[$flags$i >> 2] | 0;
 $grabbed_window512$i = 312 | 0;
 $7 = HEAP32[$grabbed_window512$i >> 2] | 0;
 if (($4 & 512 | 0) == 0 | ($4 & 256 | $3 | 0) == 0) if (($7 | 0) == ($window | 0)) {
  HEAP32[$grabbed_window512$i >> 2] = 0;
  $10 = 0;
  $grabbed$014$i = 0;
 } else {
  $10 = 0;
  $grabbed$014$i = 0;
 } else {
  if (($7 | 0) == 0 | ($7 | 0) == ($window | 0)) {
   $17 = 0;
   $grabbed_window18$pre$phi$iZ2D = $grabbed_window512$i;
  } else {
   $flags11$i = $7 + 48 | 0;
   HEAP32[$flags11$i >> 2] = HEAP32[$flags11$i >> 2] & -257;
   $9 = HEAP32[32] | 0;
   if (!$9) {
    $17 = 0;
    $grabbed_window18$pre$phi$iZ2D = $grabbed_window512$i;
   } else {
    FUNCTION_TABLE_viii[$9 & 63](0, $7, 0);
    $17 = 0;
    $grabbed_window18$pre$phi$iZ2D = 312 | 0;
   }
  }
  HEAP32[$grabbed_window18$pre$phi$iZ2D >> 2] = $window;
  $10 = $17;
  $grabbed$014$i = 1;
 }
 $11 = HEAP32[$10 + 128 >> 2] | 0;
 if ($11 | 0) FUNCTION_TABLE_viii[$11 & 63]($10, $window, $grabbed$014$i);
 if (!(HEAP32[$flags$i >> 2] & 1)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$window + 120 >> 2] | 0) {
  STACKTOP = sp;
  return;
 }
 if (!(_SDL_GetHintBoolean(5167, 1) | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!0) {
  _SDL_SetError(4403, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$window >> 2] | 0) != (316 | 0)) {
  _SDL_SetError(4444, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$flags$i >> 2] & 64 | 0) {
  STACKTOP = sp;
  return;
 }
 _SDL_UpdateFullscreenMode($window, 0) | 0;
 $16 = HEAP32[25] | 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vii[$16 & 63](0, $window);
 STACKTOP = sp;
 return;
}

function _SDL_VideoQuit() {
 var $$lcssa = 0, $$lcssa18 = 0, $0 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec27$in = 0, $display_modes = 0, $driverdata12 = 0, $driverdata15 = 0, $i$033 = 0, $i$124 = 0;
 if (!0) return;
 _SDL_TouchQuit();
 _SDL_MouseQuit();
 _SDL_QuitSubSystem(16384);
 HEAP32[74] = 0;
 $0 = HEAP32[59] | 0;
 if ($0 | 0) FUNCTION_TABLE_vi[$0 & 63](0);
 $2 = HEAP32[77] | 0;
 do {
  _SDL_DestroyWindow($2);
  $2 = HEAP32[77] | 0;
 } while (($2 | 0) != 0);
 FUNCTION_TABLE_vi[HEAP32[0 + 8 >> 2] & 63](0);
 $5 = HEAP32[75] | 0;
 $6 = HEAP32[76] | 0;
 if (($5 | 0) > 0) {
  $7 = $6;
  $i$033 = 0;
  while (1) {
   $8 = HEAP32[$7 + ($i$033 * 72 | 0) + 8 >> 2] | 0;
   $display_modes = $7 + ($i$033 * 72 | 0) + 12 | 0;
   $9 = HEAP32[$display_modes >> 2] | 0;
   if (!$8) $$lcssa18 = $9; else {
    $10 = $9;
    $dec27$in = $8;
    while (1) {
     $dec27$in = $dec27$in + -1 | 0;
     _SDL_free(HEAP32[$10 + ($dec27$in * 20 | 0) + 16 >> 2] | 0);
     $12 = HEAP32[$display_modes >> 2] | 0;
     HEAP32[$12 + ($dec27$in * 20 | 0) + 16 >> 2] = 0;
     if (!$dec27$in) {
      $$lcssa18 = $12;
      break;
     } else $10 = $12;
    }
   }
   _SDL_free($$lcssa18);
   HEAP32[$display_modes >> 2] = 0;
   $driverdata12 = $7 + ($i$033 * 72 | 0) + 32 | 0;
   _SDL_free(HEAP32[$driverdata12 >> 2] | 0);
   HEAP32[$driverdata12 >> 2] = 0;
   $driverdata15 = $7 + ($i$033 * 72 | 0) + 68 | 0;
   _SDL_free(HEAP32[$driverdata15 >> 2] | 0);
   HEAP32[$driverdata15 >> 2] = 0;
   $i$033 = $i$033 + 1 | 0;
   $15 = HEAP32[75] | 0;
   $16 = HEAP32[76] | 0;
   if (($i$033 | 0) >= ($15 | 0)) {
    $17 = $16;
    $18 = $15;
    $23 = 0;
    break;
   } else $7 = $16;
  }
 } else {
  $17 = $6;
  $18 = $5;
  $23 = 0;
 }
 if (!$17) {
  _SDL_free(HEAP32[$23 + 324 >> 2] | 0);
  HEAP32[81] = 0;
  FUNCTION_TABLE_vi[HEAP32[0 + 1e3 >> 2] & 63](0);
  return;
 }
 if (($18 | 0) <= 0) {
  $$lcssa = $17;
  _SDL_free($$lcssa);
 }
 $19 = $17;
 $i$124 = 0;
 while (1) {
  _SDL_free(HEAP32[$19 + ($i$124 * 72 | 0) >> 2] | 0);
  $i$124 = $i$124 + 1 | 0;
  $22 = HEAP32[76] | 0;
  if (($i$124 | 0) >= (HEAP32[75] | 0)) {
   $$lcssa = $22;
   break;
  } else $19 = $22;
 }
 _SDL_free($$lcssa);
}

function ___vfprintf_internal($f, $fmt, $ap, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $cond = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0) < 0) $retval$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
    $spec$select = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $4 = 0, $5 = 0, $call2 = 0, $call23 = 0, $or29 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $wsz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $wsz = sp + 56 | 0;
 if (!(_strchr(6976, HEAP8[$mode >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = _malloc(1176) | 0;
  if (!$call2) $retval$0 = 0; else {
   _memset($call2 | 0, 0, 144) | 0;
   if (!(_strchr($mode, 43) | 0)) HEAP32[$call2 >> 2] = (HEAP8[$mode >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr($mode, 101) | 0) {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
   }
   if ((HEAP8[$mode >> 0] | 0) == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $fd;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $call23 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($call23 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $fd;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $call23 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $or29 = HEAP32[$call2 >> 2] | 128;
    HEAP32[$call2 >> 2] = $or29;
    $5 = $or29;
   } else $5 = HEAP32[$call2 >> 2] | 0;
   HEAP32[$call2 + 60 >> 2] = $fd;
   HEAP32[$call2 + 44 >> 2] = $call2 + 152;
   HEAP32[$call2 + 48 >> 2] = 1024;
   $4 = $call2 + 75 | 0;
   HEAP8[$4 >> 0] = -1;
   if (!($5 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $fd;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $wsz;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$4 >> 0] = 10;
   }
   HEAP32[$call2 + 32 >> 2] = 8;
   HEAP32[$call2 + 36 >> 2] = 2;
   HEAP32[$call2 + 40 >> 2] = 2;
   HEAP32[$call2 + 12 >> 2] = 38;
   if (!(HEAP32[4717] | 0)) HEAP32[$call2 + 76 >> 2] = -1;
   ___ofl_add($call2) | 0;
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _SDL_IntersectRect($A, $B, $result) {
 $A = $A | 0;
 $B = $B | 0;
 $result = $result | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add18 = 0, $add27 = 0, $add30 = 0, $retval$0 = 0, $spec$select = 0, $spec$select40 = 0, $sub = 0, $sub38 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$A) {
  HEAP32[$vararg_buffer >> 2] = 6794;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!$B) {
  HEAP32[$vararg_buffer1 >> 2] = 4764;
  _SDL_SetError(5998, $vararg_buffer1) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!$result) {
  HEAP32[$vararg_buffer4 >> 2] = 4766;
  _SDL_SetError(5998, $vararg_buffer4) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $0 = HEAP32[$A + 8 >> 2] | 0;
 if (($0 | 0) >= 1) {
  $1 = HEAP32[$A + 12 >> 2] | 0;
  if (($1 | 0) > 0) {
   $2 = HEAP32[$B + 8 >> 2] | 0;
   if (($2 | 0) >= 1) {
    $3 = HEAP32[$B + 12 >> 2] | 0;
    if (($3 | 0) > 0) {
     $4 = HEAP32[$A >> 2] | 0;
     $add = $0 + $4 | 0;
     $5 = HEAP32[$B >> 2] | 0;
     $add18 = $2 + $5 | 0;
     $spec$select = ($5 | 0) > ($4 | 0) ? $5 : $4;
     HEAP32[$result >> 2] = $spec$select;
     $sub = (($add18 | 0) < ($add | 0) ? $add18 : $add) - $spec$select | 0;
     HEAP32[$result + 8 >> 2] = $sub;
     $6 = HEAP32[$A + 4 >> 2] | 0;
     $add27 = $1 + $6 | 0;
     $7 = HEAP32[$B + 4 >> 2] | 0;
     $add30 = $3 + $7 | 0;
     $spec$select40 = ($7 | 0) > ($6 | 0) ? $7 : $6;
     HEAP32[$result + 4 >> 2] = $spec$select40;
     $sub38 = (($add30 | 0) < ($add27 | 0) ? $add30 : $add27) - $spec$select40 | 0;
     HEAP32[$result + 12 >> 2] = $sub38;
     $retval$0 = ($sub | 0) > 0 & ($sub38 | 0) > 0 & 1;
     STACKTOP = sp;
     return $retval$0 | 0;
    }
   }
  }
 }
 HEAP32[$result + 8 >> 2] = 0;
 HEAP32[$result + 12 >> 2] = 0;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_LoadFile_RW($src, $datasize, $freesrc) {
 $src = $src | 0;
 $datasize = $datasize | 0;
 $freesrc = $freesrc | 0;
 var $1 = 0, $11 = 0, $16 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $add$ptr = 0, $call15 = 0, $call23 = 0, $data$0 = 0, $data$1 = 0, $data$2 = 0, $read = 0, $retval$0 = 0, $size_total$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$src) {
  HEAP32[$vararg_buffer >> 2] = 6024;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $1 = FUNCTION_TABLE_ii[HEAP32[$src >> 2] & 63]($src) | 0;
 $2 = getTempRet0() | 0;
 $3 = ($2 | 0) < 0;
 $4 = $3 ? 1024 : $1;
 $read = $src + 8 | 0;
 $11 = $4;
 $9 = $3 ? 0 : $2;
 $data$0 = _SDL_malloc($4 + 1 | 0) | 0;
 $size_total$0 = 0;
 while (1) {
  $6 = _i64Add($size_total$0 | 0, 0, 1024, 0) | 0;
  $7 = getTempRet0() | 0;
  if (($7 | 0) > ($9 | 0) | ($7 | 0) == ($9 | 0) & $6 >>> 0 > $11 >>> 0) {
   $call15 = _SDL_realloc($data$0, $size_total$0 + 1025 | 0) | 0;
   if (!$call15) {
    label = 6;
    break;
   }
   $16 = $size_total$0 + 1024 | 0;
   $18 = 0;
   $data$1 = $call15;
  } else {
   $16 = $11;
   $18 = $9;
   $data$1 = $data$0;
  }
  $add$ptr = $data$1 + $size_total$0 | 0;
  $call23 = FUNCTION_TABLE_iiiii[HEAP32[$read >> 2] & 7]($src, $add$ptr, 1, $16 - $size_total$0 | 0) | 0;
  if (!$call23) {
   label = 9;
   break;
  } else {
   $11 = $16;
   $9 = $18;
   $data$0 = $data$1;
   $size_total$0 = $call23 + $size_total$0 | 0;
  }
 }
 if ((label | 0) == 6) {
  _SDL_free($data$0);
  _SDL_Error(0) | 0;
  $data$2 = 0;
 } else if ((label | 0) == 9) {
  if ($datasize | 0) HEAP32[$datasize >> 2] = $size_total$0;
  HEAP8[$add$ptr >> 0] = 0;
  $data$2 = $data$1;
 }
 if (!$freesrc) {
  $retval$0 = $data$2;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 FUNCTION_TABLE_ii[HEAP32[$src + 16 >> 2] & 63]($src) | 0;
 $retval$0 = $data$2;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_StopEventLoop() {
 var $$in2434 = 0, $$in2532 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $arrayidx = 0, $call = 0, $i$026 = 0, $vararg_buffer = 0, $wmmsg$030 = 0, $wmmsg$128 = 0, sp = 0, $$in2434$looptemp = 0, $$in2532$looptemp = 0, $wmmsg$030$looptemp = 0, $wmmsg$128$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $call = _SDL_GetHint(6088) | 0;
 if (HEAP32[818] | 0) {}
 _SDL_AtomicSet(3276, 0) | 0;
 if ($call | 0) if (_SDL_atoi($call) | 0) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[821];
  _SDL_Log(6115, $vararg_buffer);
 }
 $2 = HEAP32[822] | 0;
 if ($2 | 0) {
  $$in2434 = $2;
  do {
   $$in2434$looptemp = $$in2434;
   $$in2434 = HEAP32[$$in2434 + 72 >> 2] | 0;
   _SDL_free($$in2434$looptemp);
  } while (($$in2434 | 0) != 0);
 }
 $4 = HEAP32[824] | 0;
 if ($4 | 0) {
  $$in2532 = $4;
  do {
   $$in2532$looptemp = $$in2532;
   $$in2532 = HEAP32[$$in2532 + 72 >> 2] | 0;
   _SDL_free($$in2532$looptemp);
  } while (($$in2532 | 0) != 0);
 }
 $6 = HEAP32[825] | 0;
 if ($6 | 0) {
  $wmmsg$030 = $6;
  do {
   $wmmsg$030$looptemp = $wmmsg$030;
   $wmmsg$030 = HEAP32[$wmmsg$030 + 12 >> 2] | 0;
   _SDL_free($wmmsg$030$looptemp);
  } while (($wmmsg$030 | 0) != 0);
 }
 $8 = HEAP32[826] | 0;
 if ($8 | 0) {
  $wmmsg$128 = $8;
  do {
   $wmmsg$128$looptemp = $wmmsg$128;
   $wmmsg$128 = HEAP32[$wmmsg$128 + 12 >> 2] | 0;
   _SDL_free($wmmsg$128$looptemp);
  } while (($wmmsg$128 | 0) != 0);
 }
 _SDL_AtomicSet(3280, 0) | 0;
 HEAP32[821] = 0;
 HEAP32[822] = 0;
 HEAP32[823] = 0;
 HEAP32[824] = 0;
 HEAP32[825] = 0;
 HEAP32[826] = 0;
 $i$026 = 0;
 do {
  $arrayidx = 12704 + ($i$026 << 2) | 0;
  _SDL_free(HEAP32[$arrayidx >> 2] | 0);
  HEAP32[$arrayidx >> 2] = 0;
  $i$026 = $i$026 + 1 | 0;
 } while (($i$026 | 0) != 256);
 if (0) {
  _SDL_free(0);
  HEAP32[4012] = 0;
 }
 _SDL_memset(16036, 0, 12) | 0;
 if (!(HEAP32[818] | 0)) {
  STACKTOP = sp;
  return;
 }
 _SDL_DestroyMutex(HEAP32[818] | 0);
 HEAP32[818] = 0;
 STACKTOP = sp;
 return;
}

function _SDL_LoadVIDPIDListFromHint($hint, $list) {
 $hint = $hint | 0;
 $list = $list | 0;
 var $1 = 0, $3 = 0, $6 = 0, $7 = 0, $add = 0, $call10 = 0, $call13 = 0, $call27 = 0, $call3 = 0, $call725 = 0, $call727 = 0, $entries26 = 0, $file$024 = 0, $max_entries = 0, $or = 0, $spot = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $spot = sp;
 HEAP32[$list >> 2] = 0;
 if (!$hint) {
  HEAP32[$spot >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 if ((HEAP8[$hint >> 0] | 0) == 64) {
  $call3 = _SDL_LoadFile_RW(_SDL_RWFromFile($hint + 1 | 0, 5992) | 0, 0, 1) | 0;
  HEAP32[$spot >> 2] = $call3;
  if (!$call3) {
   STACKTOP = sp;
   return;
  } else {
   $1 = $call3;
   $file$024 = $call3;
  }
 } else {
  HEAP32[$spot >> 2] = $hint;
  $1 = $hint;
  $file$024 = 0;
 }
 $call725 = _SDL_strstr($1, 5995) | 0;
 HEAP32[$spot >> 2] = $call725;
 L10 : do if ($call725 | 0) {
  $max_entries = $list + 4 | 0;
  $entries26 = $list + 8 | 0;
  $call727 = $call725;
  do {
   $call10 = _SDL_strtol($call727, $spot, 0) | 0;
   $call13 = _SDL_strstr(HEAP32[$spot >> 2] | 0, 5995) | 0;
   HEAP32[$spot >> 2] = $call13;
   if (!$call13) break L10;
   $or = (_SDL_strtol($call13, $spot, 0) | 0) & 65535 | $call10 << 16;
   $3 = HEAP32[$list >> 2] | 0;
   if (($3 | 0) == (HEAP32[$max_entries >> 2] | 0)) {
    $add = $3 + 16 | 0;
    $call27 = _SDL_realloc(HEAP32[$entries26 >> 2] | 0, $add << 2) | 0;
    if (!$call27) break L10;
    HEAP32[$entries26 >> 2] = $call27;
    HEAP32[$max_entries >> 2] = $add;
    $6 = HEAP32[$list >> 2] | 0;
    $7 = $call27;
   } else {
    $6 = $3;
    $7 = HEAP32[$entries26 >> 2] | 0;
   }
   HEAP32[$list >> 2] = $6 + 1;
   HEAP32[$7 + ($6 << 2) >> 2] = $or;
   $call727 = _SDL_strstr(HEAP32[$spot >> 2] | 0, 5995) | 0;
   HEAP32[$spot >> 2] = $call727;
  } while (($call727 | 0) != 0);
 } while (0);
 if (!$file$024) {
  STACKTOP = sp;
  return;
 }
 _SDL_free($file$024);
 STACKTOP = sp;
 return;
}

function _uncopy_transl_16($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $$pre35 = 0, $$pre38 = 0, $$pre41 = 0, $0 = 0, $Bmask = 0, $Gmask = 0, $Rmask = 0, $conv = 0, $conv10 = 0, $conv17 = 0, $conv22 = 0, $conv25 = 0, $conv27 = 0, $conv30 = 0, $conv34 = 0, $conv37 = 0, $conv40 = 0, $conv42 = 0, $dst$addr$034 = 0, $i$033 = 0, $mul = 0, $or = 0, $s$032 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 2;
  return $mul | 0;
 }
 $Rmask = $sfmt + 4 | 0;
 $Gmask = $sfmt + 8 | 0;
 $Bmask = $sfmt + 12 | 0;
 $$pre35 = HEAP32[992 + ((HEAPU8[$sfmt + 20 >> 0] | 0) << 2) >> 2] | 0;
 $$pre38 = HEAP32[992 + ((HEAPU8[$sfmt + 21 >> 0] | 0) << 2) >> 2] | 0;
 $$pre41 = HEAP32[992 + ((HEAPU8[$sfmt + 22 >> 0] | 0) << 2) >> 2] | 0;
 $conv = HEAPU8[$sfmt + 24 >> 0] | 0;
 $conv10 = HEAPU8[$sfmt + 25 >> 0] | 0;
 $conv17 = HEAPU8[$sfmt + 26 >> 0] | 0;
 $conv22 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv25 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv27 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv30 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv34 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv37 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $conv40 = HEAPU8[$dfmt + 31 >> 0] | 0;
 $conv42 = HEAPU8[$dfmt + 35 >> 0] | 0;
 $dst$addr$034 = $dst;
 $i$033 = 0;
 $s$032 = $src;
 while (1) {
  $0 = HEAP32[$s$032 >> 2] | 0;
  $or = $0 & -993 | $0 >>> 16;
  HEAP32[$dst$addr$034 >> 2] = (HEAPU8[$$pre38 + ((HEAP32[$Gmask >> 2] & $or) >>> $conv10) >> 0] | 0) >>> $conv27 << $conv30 | (HEAPU8[$$pre35 + ((HEAP32[$Rmask >> 2] & $or) >>> $conv) >> 0] | 0) >>> $conv22 << $conv25 | (HEAPU8[$$pre41 + ((HEAP32[$Bmask >> 2] & $or) >>> $conv17) >> 0] | 0) >>> $conv34 << $conv37 | ($0 >>> 2 & 248) >>> $conv40 << $conv42;
  $i$033 = $i$033 + 1 | 0;
  if (($i$033 | 0) == ($n | 0)) break; else {
   $dst$addr$034 = $dst$addr$034 + 4 | 0;
   $s$032 = $s$032 + 4 | 0;
  }
 }
 $mul = $n << 2;
 return $mul | 0;
}

function _uncopy_opaque_16($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $$pre33 = 0, $$pre36 = 0, $$pre39 = 0, $Bmask = 0, $Gmask = 0, $Rmask = 0, $conv = 0, $conv1 = 0, $conv16 = 0, $conv21 = 0, $conv24 = 0, $conv26 = 0, $conv29 = 0, $conv32 = 0, $conv35 = 0, $conv8 = 0, $dst$addr$032 = 0, $i$031 = 0, $mul = 0, $s$030 = 0, $shl41 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 1;
  return $mul | 0;
 }
 $Rmask = $sfmt + 4 | 0;
 $Gmask = $sfmt + 8 | 0;
 $Bmask = $sfmt + 12 | 0;
 $$pre33 = HEAP32[992 + ((HEAPU8[$sfmt + 20 >> 0] | 0) << 2) >> 2] | 0;
 $$pre36 = HEAP32[992 + ((HEAPU8[$sfmt + 21 >> 0] | 0) << 2) >> 2] | 0;
 $$pre39 = HEAP32[992 + ((HEAPU8[$sfmt + 22 >> 0] | 0) << 2) >> 2] | 0;
 $conv1 = HEAPU8[$sfmt + 24 >> 0] | 0;
 $conv8 = HEAPU8[$sfmt + 25 >> 0] | 0;
 $conv16 = HEAPU8[$sfmt + 26 >> 0] | 0;
 $conv21 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv24 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv26 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv29 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv32 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv35 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $shl41 = ((HEAP32[$dfmt + 24 >> 2] | 0) == 0 ? 0 : 255) >>> (HEAPU8[$dfmt + 31 >> 0] | 0) << (HEAPU8[$dfmt + 35 >> 0] | 0);
 $dst$addr$032 = $dst;
 $i$031 = 0;
 $s$030 = $src;
 while (1) {
  $conv = HEAPU16[$s$030 >> 1] | 0;
  HEAP32[$dst$addr$032 >> 2] = (HEAPU8[$$pre36 + ((HEAP32[$Gmask >> 2] & $conv) >>> $conv8) >> 0] | 0) >>> $conv26 << $conv29 | (HEAPU8[$$pre33 + ((HEAP32[$Rmask >> 2] & $conv) >>> $conv1) >> 0] | 0) >>> $conv21 << $conv24 | (HEAPU8[$$pre39 + ((HEAP32[$Bmask >> 2] & $conv) >>> $conv16) >> 0] | 0) >>> $conv32 << $conv35 | $shl41;
  $i$031 = $i$031 + 1 | 0;
  if (($i$031 | 0) == ($n | 0)) break; else {
   $dst$addr$032 = $dst$addr$032 + 4 | 0;
   $s$030 = $s$030 + 2 | 0;
  }
 }
 $mul = $n << 1;
 return $mul | 0;
}

function _uncopy_32($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $$pre33 = 0, $$pre36 = 0, $$pre39 = 0, $0 = 0, $Bmask = 0, $Gmask = 0, $Rmask = 0, $conv = 0, $conv13 = 0, $conv19 = 0, $conv22 = 0, $conv24 = 0, $conv27 = 0, $conv30 = 0, $conv33 = 0, $conv36 = 0, $conv38 = 0, $conv6 = 0, $dst$addr$032 = 0, $i$031 = 0, $mul = 0, $s$030 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 2;
  return $mul | 0;
 }
 $Rmask = $sfmt + 4 | 0;
 $Gmask = $sfmt + 8 | 0;
 $Bmask = $sfmt + 12 | 0;
 $$pre33 = HEAP32[992 + ((HEAPU8[$sfmt + 20 >> 0] | 0) << 2) >> 2] | 0;
 $$pre36 = HEAP32[992 + ((HEAPU8[$sfmt + 21 >> 0] | 0) << 2) >> 2] | 0;
 $$pre39 = HEAP32[992 + ((HEAPU8[$sfmt + 22 >> 0] | 0) << 2) >> 2] | 0;
 $conv = HEAPU8[$sfmt + 24 >> 0] | 0;
 $conv6 = HEAPU8[$sfmt + 25 >> 0] | 0;
 $conv13 = HEAPU8[$sfmt + 26 >> 0] | 0;
 $conv19 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv22 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv24 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv27 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv30 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv33 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $conv36 = HEAPU8[$dfmt + 31 >> 0] | 0;
 $conv38 = HEAPU8[$dfmt + 35 >> 0] | 0;
 $dst$addr$032 = $dst;
 $i$031 = 0;
 $s$030 = $src;
 while (1) {
  $0 = HEAP32[$s$030 >> 2] | 0;
  HEAP32[$dst$addr$032 >> 2] = (HEAPU8[$$pre36 + ((HEAP32[$Gmask >> 2] & $0) >>> $conv6) >> 0] | 0) >>> $conv24 << $conv27 | (HEAPU8[$$pre33 + ((HEAP32[$Rmask >> 2] & $0) >>> $conv) >> 0] | 0) >>> $conv19 << $conv22 | (HEAPU8[$$pre39 + ((HEAP32[$Bmask >> 2] & $0) >>> $conv13) >> 0] | 0) >>> $conv30 << $conv33 | $0 >>> 24 >>> $conv36 << $conv38;
  $i$031 = $i$031 + 1 | 0;
  if (($i$031 | 0) == ($n | 0)) break; else {
   $dst$addr$032 = $dst$addr$032 + 4 | 0;
   $s$030 = $s$030 + 4 | 0;
  }
 }
 $mul = $n << 2;
 return $mul | 0;
}

function _SDL_LogMessageV($category, $priority, $fmt, $ap) {
 $category = $category | 0;
 $priority = $priority | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $2 = 0, $arrayidx = 0, $arrayidx21 = 0, $call11 = 0, $entry1$0$i = 0, $entry1$010$i = 0, $entry1$08$i = 0, $priority$i$sink = 0, $retval$0$i = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($priority >>> 0 > 6 | 4 == 0) {
  STACKTOP = sp;
  return;
 }
 $entry1$08$i = HEAP32[3970] | 0;
 L4 : do if (!$entry1$08$i) label = 7; else {
  $entry1$010$i = $entry1$08$i;
  while (1) {
   if ((HEAP32[$entry1$010$i >> 2] | 0) == ($category | 0)) break;
   $entry1$0$i = HEAP32[$entry1$010$i + 8 >> 2] | 0;
   if (!$entry1$0$i) {
    label = 7;
    break L4;
   } else $entry1$010$i = $entry1$0$i;
  }
  $priority$i$sink = $entry1$010$i + 4 | 0;
  label = 10;
 } while (0);
 L10 : do if ((label | 0) == 7) switch ($category | 0) {
 case 8:
  {
   $retval$0$i = 1;
   break L10;
   break;
  }
 case 0:
  {
   $priority$i$sink = 3268;
   label = 10;
   break L10;
   break;
  }
 case 2:
  {
   $priority$i$sink = 3260;
   label = 10;
   break L10;
   break;
  }
 default:
  {
   $priority$i$sink = 3264;
   label = 10;
   break L10;
  }
 } while (0);
 if ((label | 0) == 10) $retval$0$i = HEAP32[$priority$i$sink >> 2] | 0;
 if ($retval$0$i >>> 0 > $priority >>> 0) {
  STACKTOP = sp;
  return;
 }
 $2 = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 _SDL_vsnprintf($2, 4096, $fmt, $ap) | 0;
 $call11 = _SDL_strlen($2) | 0;
 if ($call11 | 0) {
  $sub = $call11 + -1 | 0;
  $arrayidx = $2 + $sub | 0;
  if ((HEAP8[$arrayidx >> 0] | 0) == 10) {
   HEAP8[$arrayidx >> 0] = 0;
   if ($sub | 0) {
    $arrayidx21 = $2 + ($call11 + -2) | 0;
    if ((HEAP8[$arrayidx21 >> 0] | 0) == 13) HEAP8[$arrayidx21 >> 0] = 0;
   }
  }
 }
 _SDL_LogOutput(0, $category, $priority, $2);
 STACKTOP = sp;
 return;
}

function _fread($destv, $size, $nmemb, $f) {
 $destv = $destv | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $3 = 0, $call34 = 0, $cond = 0, $conv = 0, $dest$0 = 0, $dest$146 = 0, $l$0 = 0, $l$147 = 0, $mode = 0, $mul = 0, $read = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub45 = 0, label = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $rpos = $f + 4 | 0;
 $3 = HEAP32[$rpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - $3 | 0;
 if (($sub$ptr$sub | 0) > 0) {
  $sub$ptr$sub$mul = $sub$ptr$sub >>> 0 < $mul >>> 0 ? $sub$ptr$sub : $mul;
  _memcpy($destv | 0, $3 | 0, $sub$ptr$sub$mul | 0) | 0;
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + $sub$ptr$sub$mul;
  $dest$0 = $destv + $sub$ptr$sub$mul | 0;
  $l$0 = $mul - $sub$ptr$sub$mul | 0;
 } else {
  $dest$0 = $destv;
  $l$0 = $mul;
 }
 L7 : do if (!$l$0) label = 13; else {
  $read = $f + 32 | 0;
  $dest$146 = $dest$0;
  $l$147 = $l$0;
  while (1) {
   if (___toread($f) | 0) break;
   $call34 = FUNCTION_TABLE_iiii[HEAP32[$read >> 2] & 15]($f, $dest$146, $l$147) | 0;
   if (($call34 + 1 | 0) >>> 0 < 2) break;
   $sub45 = $l$147 - $call34 | 0;
   if (!$sub45) {
    label = 13;
    break L7;
   } else {
    $dest$146 = $dest$146 + $call34 | 0;
    $l$147 = $sub45;
   }
  }
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = (($mul - $l$147 | 0) >>> 0) / ($size >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$cond) $retval$0 = $spec$select; else {
  ___unlockfile($f);
  $retval$0 = $spec$select;
 }
 return $retval$0 | 0;
}

function _copy_opaque_16($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $$pre30 = 0, $$pre31 = 0, $$pre34 = 0, $$pre35 = 0, $$pre38 = 0, $$pre39 = 0, $$pre47 = 0, $0 = 0, $conv = 0, $conv13 = 0, $conv18 = 0, $conv21 = 0, $conv23 = 0, $conv26 = 0, $conv29 = 0, $conv32 = 0, $conv6 = 0, $d$027 = 0, $i$028 = 0, $mul = 0, $src$addr$029 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 1;
  return $mul | 0;
 }
 $$pre30 = HEAP32[992 + ((HEAPU8[$sfmt + 28 >> 0] | 0) << 2) >> 2] | 0;
 $$pre31 = HEAP32[$sfmt + 12 >> 2] | 0;
 $$pre34 = HEAP32[992 + ((HEAPU8[$sfmt + 29 >> 0] | 0) << 2) >> 2] | 0;
 $$pre35 = HEAP32[$sfmt + 16 >> 2] | 0;
 $$pre38 = HEAP32[992 + ((HEAPU8[$sfmt + 30 >> 0] | 0) << 2) >> 2] | 0;
 $$pre39 = HEAP32[$sfmt + 20 >> 2] | 0;
 $$pre47 = HEAP32[$dfmt + 24 >> 2] | 0;
 $conv = HEAPU8[$sfmt + 32 >> 0] | 0;
 $conv6 = HEAPU8[$sfmt + 33 >> 0] | 0;
 $conv13 = HEAPU8[$sfmt + 34 >> 0] | 0;
 $conv18 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv21 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv23 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv26 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv29 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv32 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $d$027 = $dst;
 $i$028 = 0;
 $src$addr$029 = $src;
 while (1) {
  $0 = HEAP32[$src$addr$029 >> 2] | 0;
  HEAP16[$d$027 >> 1] = (HEAPU8[$$pre34 + (($$pre35 & $0) >>> $conv6) >> 0] | 0) >>> $conv23 << $conv26 | (HEAPU8[$$pre30 + (($$pre31 & $0) >>> $conv) >> 0] | 0) >>> $conv18 << $conv21 | $$pre47 | (HEAPU8[$$pre38 + (($$pre39 & $0) >>> $conv13) >> 0] | 0) >>> $conv29 << $conv32;
  $i$028 = $i$028 + 1 | 0;
  if (($i$028 | 0) == ($n | 0)) break; else {
   $d$027 = $d$027 + 2 | 0;
   $src$addr$029 = $src$addr$029 + 4 | 0;
  }
 }
 $mul = $n << 1;
 return $mul | 0;
}

function _SDL_GL_MakeCurrent($window, $ctx) {
 $window = $window | 0;
 $ctx = $ctx | 0;
 var $call19 = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i18 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $window$addr$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  $retval$0$i = 0;
 } else $retval$0$i = _SDL_TLSGet(HEAP32[176] | 0) | 0;
 if (($retval$0$i | 0) == ($window | 0)) {
  if (!0) {
   _SDL_SetError(4403, $vararg_buffer1) | 0;
   $retval$0$i18 = 0;
  } else $retval$0$i18 = _SDL_TLSGet(HEAP32[177] | 0) | 0;
  if (($retval$0$i18 | 0) == ($ctx | 0)) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 do if (!$ctx) $window$addr$0 = 0; else {
  if (!0) {
   _SDL_SetError(4403, $vararg_buffer3) | 0;
   $retval$0 = -1;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
   if (HEAP32[$window + 48 >> 2] & 2 | 0) {
    $window$addr$0 = $window;
    break;
   }
   $retval$0 = _SDL_SetError(4459, $vararg_buffer7) | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  _SDL_SetError(4444, $vararg_buffer5) | 0;
  $retval$0 = -1;
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 $call19 = FUNCTION_TABLE_iiii[HEAP32[0 + 184 >> 2] & 15](0, $window$addr$0, $ctx) | 0;
 if ($call19 | 0) {
  $retval$0 = $call19;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[174] = $window$addr$0;
 HEAP32[175] = $ctx;
 _SDL_TLSSet(HEAP32[176] | 0, $window$addr$0, 0) | 0;
 _SDL_TLSSet(HEAP32[177] | 0, $ctx, 0) | 0;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_JoystickClose($joystick) {
 $joystick = $joystick | 0;
 var $0 = 0, $3 = 0, $joysticklist$0 = 0, $joysticklist$036 = 0, $joysticklist$039 = 0, $joysticklistprev$038 = 0, $joysticklistprev$038$phi = 0, $ref_count = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!$joystick) {
  _SDL_SetError(6162, sp) | 0;
  STACKTOP = sp;
  return;
 }
 if (0) {}
 $ref_count = $joystick + 88 | 0;
 $0 = HEAP32[$ref_count >> 2] | 0;
 HEAP32[$ref_count >> 2] = $0 + -1;
 if (($0 | 0) > 1) {
  if (!0) {
   STACKTOP = sp;
   return;
  }
  STACKTOP = sp;
  return;
 }
 if (0) {
  if (!0) {
   STACKTOP = sp;
   return;
  }
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$joystick + 80 >> 2] | 0) + 40 >> 2] & 63]($joystick);
 HEAP32[$joystick + 84 >> 2] = 0;
 $joysticklist$036 = HEAP32[4704] | 0;
 L22 : do if ($joysticklist$036 | 0) {
  $joysticklist$039 = $joysticklist$036;
  $joysticklistprev$038 = 0;
  while (1) {
   if (($joysticklist$039 | 0) == ($joystick | 0)) break;
   $joysticklist$0 = HEAP32[$joysticklist$039 + 92 >> 2] | 0;
   if (!$joysticklist$0) break L22; else {
    $joysticklistprev$038$phi = $joysticklist$039;
    $joysticklist$039 = $joysticklist$0;
    $joysticklistprev$038 = $joysticklistprev$038$phi;
   }
  }
  $3 = HEAP32[$joystick + 92 >> 2] | 0;
  if (!$joysticklistprev$038) {
   HEAP32[4704] = $3;
   break;
  } else {
   HEAP32[$joysticklistprev$038 + 92 >> 2] = $3;
   break;
  }
 } while (0);
 _SDL_free(HEAP32[$joystick + 4 >> 2] | 0);
 _SDL_free(HEAP32[$joystick + 32 >> 2] | 0);
 _SDL_free(HEAP32[$joystick + 40 >> 2] | 0);
 _SDL_free(HEAP32[$joystick + 48 >> 2] | 0);
 _SDL_free(HEAP32[$joystick + 56 >> 2] | 0);
 _SDL_free($joystick);
 if (!0) {
  STACKTOP = sp;
  return;
 }
 STACKTOP = sp;
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $conv1 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $mul = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0;
 $conv1 = $c & 255;
 L1 : do if (!$conv1) $retval$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $s$addr$0$lcssa = $s; else {
   $1 = $c & 255;
   $s$addr$036 = $s;
   while (1) {
    $2 = HEAP8[$s$addr$036 >> 0] | 0;
    if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 == $1 << 24 >> 24) {
     $retval$0 = $s$addr$036;
     break L1;
    }
    $incdec$ptr = $s$addr$036 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else $s$addr$036 = $incdec$ptr;
   }
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  $4 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L10 : do if (!(($4 & -2139062144 ^ -2139062144) & $4 + -16843009)) {
   $5 = $4;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    $xor = $5 ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L10;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $5 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($5 & -2139062144 ^ -2139062144) & $5 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $7 = $c & 255;
  $s$addr$1 = $w$0$lcssa;
  while (1) {
   $8 = HEAP8[$s$addr$1 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $7 << 24 >> 24) {
    $retval$0 = $s$addr$1;
    break;
   } else $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function _SDL_OnWindowFocusGained($window) {
 $window = $window | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $9 = 0, $call = 0, $flags11$i = 0, $grabbed$014$i = 0, $grabbed_window18$pre$phi$iZ2D = 0, $grabbed_window512$i = 0;
 $call = _SDL_GetMouse() | 0;
 $0 = HEAP32[$window + 100 >> 2] | 0;
 if ($0 | 0) {
  $1 = HEAP32[30] | 0;
  if ($1 | 0) FUNCTION_TABLE_iiii[$1 & 15](0, $window, $0) | 0;
 }
 if ($call | 0) if (HEAP32[$call + 88 >> 2] | 0) {
  _SDL_SetMouseFocus($window);
  _SDL_WarpMouseInWindow($window, (HEAP32[$window + 24 >> 2] | 0) / 2 | 0, (HEAP32[$window + 28 >> 2] | 0) / 2 | 0);
 }
 $5 = HEAP32[(_SDL_GetMouse() | 0) + 88 >> 2] | 0;
 $6 = HEAP32[$window + 48 >> 2] | 0;
 $grabbed_window512$i = 312 | 0;
 $9 = HEAP32[$grabbed_window512$i >> 2] | 0;
 if (($6 & 512 | 0) == 0 | ($6 & 256 | $5 | 0) == 0) if (($9 | 0) == ($window | 0)) {
  HEAP32[$grabbed_window512$i >> 2] = 0;
  $12 = 0;
  $grabbed$014$i = 0;
 } else {
  $12 = 0;
  $grabbed$014$i = 0;
 } else {
  if (($9 | 0) == 0 | ($9 | 0) == ($window | 0)) {
   $14 = 0;
   $grabbed_window18$pre$phi$iZ2D = $grabbed_window512$i;
  } else {
   $flags11$i = $9 + 48 | 0;
   HEAP32[$flags11$i >> 2] = HEAP32[$flags11$i >> 2] & -257;
   $11 = HEAP32[32] | 0;
   if (!$11) {
    $14 = 0;
    $grabbed_window18$pre$phi$iZ2D = $grabbed_window512$i;
   } else {
    FUNCTION_TABLE_viii[$11 & 63](0, $9, 0);
    $14 = 0;
    $grabbed_window18$pre$phi$iZ2D = 312 | 0;
   }
  }
  HEAP32[$grabbed_window18$pre$phi$iZ2D >> 2] = $window;
  $12 = $14;
  $grabbed$014$i = 1;
 }
 $13 = HEAP32[$12 + 128 >> 2] | 0;
 if (!$13) return;
 FUNCTION_TABLE_viii[$13 & 63]($12, $window, $grabbed$014$i);
 return;
}

function _copy_transl_565($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $10 = 0, $Amask = 0, $Amask25 = 0, $Bmask = 0, $Gmask = 0, $Rmask = 0, $conv = 0, $conv10 = 0, $conv13 = 0, $conv14 = 0, $conv17 = 0, $conv19 = 0, $conv2 = 0, $conv22 = 0, $conv5 = 0, $conv8 = 0, $d$030 = 0, $i$031 = 0, $mul = 0, $or26 = 0, $src$addr$032 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 2;
  return $mul | 0;
 }
 $Rmask = $sfmt + 12 | 0;
 $conv = HEAPU8[$sfmt + 32 >> 0] | 0;
 $Gmask = $sfmt + 16 | 0;
 $conv2 = HEAPU8[$sfmt + 33 >> 0] | 0;
 $Bmask = $sfmt + 20 | 0;
 $conv5 = HEAPU8[$sfmt + 34 >> 0] | 0;
 $Amask = $sfmt + 24 | 0;
 $conv8 = HEAPU8[$sfmt + 35 >> 0] | 0;
 $conv10 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv13 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv14 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv17 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv19 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv22 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $Amask25 = $dfmt + 24 | 0;
 $d$030 = $dst;
 $i$031 = 0;
 $src$addr$032 = $src;
 while (1) {
  $10 = HEAP32[$src$addr$032 >> 2] | 0;
  $or26 = (HEAP32[$Gmask >> 2] & $10) >>> $conv2 >>> $conv14 << $conv17 | (HEAP32[$Rmask >> 2] & $10) >>> $conv >>> $conv10 << $conv13 | HEAP32[$Amask25 >> 2] | (HEAP32[$Bmask >> 2] & $10) >>> $conv5 >>> $conv19 << $conv22;
  HEAP32[$d$030 >> 2] = $or26 & 63519 | (HEAP32[$Amask >> 2] & $10) >>> $conv8 << 2 & 2016 | $or26 << 16 & 132120576;
  $i$031 = $i$031 + 1 | 0;
  if (($i$031 | 0) == ($n | 0)) break; else {
   $d$030 = $d$030 + 4 | 0;
   $src$addr$032 = $src$addr$032 + 4 | 0;
  }
 }
 $mul = $n << 2;
 return $mul | 0;
}

function _copy_transl_555($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $10 = 0, $Amask = 0, $Amask25 = 0, $Bmask = 0, $Gmask = 0, $Rmask = 0, $conv = 0, $conv10 = 0, $conv13 = 0, $conv14 = 0, $conv17 = 0, $conv19 = 0, $conv2 = 0, $conv22 = 0, $conv5 = 0, $conv8 = 0, $d$030 = 0, $i$031 = 0, $mul = 0, $or26 = 0, $src$addr$032 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 2;
  return $mul | 0;
 }
 $Rmask = $sfmt + 12 | 0;
 $conv = HEAPU8[$sfmt + 32 >> 0] | 0;
 $Gmask = $sfmt + 16 | 0;
 $conv2 = HEAPU8[$sfmt + 33 >> 0] | 0;
 $Bmask = $sfmt + 20 | 0;
 $conv5 = HEAPU8[$sfmt + 34 >> 0] | 0;
 $Amask = $sfmt + 24 | 0;
 $conv8 = HEAPU8[$sfmt + 35 >> 0] | 0;
 $conv10 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv13 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv14 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv17 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv19 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv22 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $Amask25 = $dfmt + 24 | 0;
 $d$030 = $dst;
 $i$031 = 0;
 $src$addr$032 = $src;
 while (1) {
  $10 = HEAP32[$src$addr$032 >> 2] | 0;
  $or26 = (HEAP32[$Gmask >> 2] & $10) >>> $conv2 >>> $conv14 << $conv17 | (HEAP32[$Rmask >> 2] & $10) >>> $conv >>> $conv10 << $conv13 | HEAP32[$Amask25 >> 2] | (HEAP32[$Bmask >> 2] & $10) >>> $conv5 >>> $conv19 << $conv22;
  HEAP32[$d$030 >> 2] = $or26 & 64543 | (HEAP32[$Amask >> 2] & $10) >>> $conv8 << 2 & 992 | $or26 << 16 & 65011712;
  $i$031 = $i$031 + 1 | 0;
  if (($i$031 | 0) == ($n | 0)) break; else {
   $d$030 = $d$030 + 4 | 0;
   $src$addr$032 = $src$addr$032 + 4 | 0;
  }
 }
 $mul = $n << 2;
 return $mul | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0) $retval$2 = 1; else if (!$thrown_type) $retval$2 = 0; else {
  $1 = ___dynamic_cast($thrown_type, 3064, 3048, 0) | 0;
  if (!$1) $retval$2 = 0; else {
   HEAP32[$info >> 2] = $1;
   HEAP32[$info + 4 >> 2] = 0;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $number_of_dst_type = $info + 48 | 0;
   dest = $dst_ptr_leading_to_static_ptr;
   stop = dest + 36 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
   HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
   HEAP32[$number_of_dst_type >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$dst_ptr_leading_to_static_ptr >> 2];
    $retval$0 = 1;
   } else $retval$0 = 0;
   $retval$2 = $retval$0;
  }
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _sift($head, $width, $cmp, $pshift, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pshift = $pshift | 0;
 $lp = $lp | 0;
 var $1 = 0, $add$ptr = 0, $add$ptr6 = 0, $ar = 0, $arrayidx15 = 0, $head$addr$023 = 0, $head$addr$1 = 0, $i$0$lcssa = 0, $i$024 = 0, $i$1 = 0, $idx$neg = 0, $pshift$addr$022 = 0, $pshift$addr$1 = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $ar = sp;
 HEAP32[$ar >> 2] = $head;
 L1 : do if (($pshift | 0) > 1) {
  $idx$neg = 0 - $width | 0;
  $1 = $head;
  $head$addr$023 = $head;
  $i$024 = 1;
  $pshift$addr$022 = $pshift;
  while (1) {
   $add$ptr = $head$addr$023 + $idx$neg | 0;
   $sub = $pshift$addr$022 + -2 | 0;
   $add$ptr6 = $add$ptr + (0 - (HEAP32[$lp + ($sub << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 15]($1, $add$ptr6) | 0) > -1) if ((FUNCTION_TABLE_iii[$cmp & 15]($1, $add$ptr) | 0) > -1) {
    $i$0$lcssa = $i$024;
    break L1;
   }
   $arrayidx15 = $ar + ($i$024 << 2) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr6, $add$ptr) | 0) > -1) {
    HEAP32[$arrayidx15 >> 2] = $add$ptr6;
    $head$addr$1 = $add$ptr6;
    $pshift$addr$1 = $pshift$addr$022 + -1 | 0;
   } else {
    HEAP32[$arrayidx15 >> 2] = $add$ptr;
    $head$addr$1 = $add$ptr;
    $pshift$addr$1 = $sub;
   }
   $i$1 = $i$024 + 1 | 0;
   if (($pshift$addr$1 | 0) <= 1) {
    $i$0$lcssa = $i$1;
    break L1;
   }
   $1 = HEAP32[$ar >> 2] | 0;
   $head$addr$023 = $head$addr$1;
   $i$024 = $i$1;
   $pshift$addr$022 = $pshift$addr$1;
  }
 } else $i$0$lcssa = 1; while (0);
 _cycle($width, $ar, $i$0$lcssa);
 STACKTOP = sp;
 return;
}

function _SDL_PushEvent($event) {
 $event = $event | 0;
 var $1 = 0, $11 = 0, $2 = 0, $4 = 0, $9 = 0, $dec20$in = 0, $dec32 = 0, $i$022 = 0, $retval$0 = 0, $dec20$in$looptemp = 0;
 HEAP32[$event + 4 >> 2] = _SDL_GetTicks() | 0;
 $1 = HEAP32[4009] | 0;
 $2 = HEAP32[4012] | 0;
 if (($1 | 0) != 0 | ($2 | 0) > 0) {
  do if (!$1) $4 = $2; else if (!(FUNCTION_TABLE_iii[$1 & 15](HEAP32[4010] | 0, $event) | 0)) {
   $retval$0 = 0;
   return $retval$0 | 0;
  } else {
   $4 = HEAP32[4012] | 0;
   break;
  } while (0);
  if (($4 | 0) > 0) {
   HEAP32[4013] = 1;
   $i$022 = 0;
   do {
    if (!(HEAP32[0 + ($i$022 * 12 | 0) + 8 >> 2] | 0)) FUNCTION_TABLE_iii[HEAP32[0 + ($i$022 * 12 | 0) >> 2] & 15](HEAP32[0 + ($i$022 * 12 | 0) + 4 >> 2] | 0, $event) | 0;
    $i$022 = $i$022 + 1 | 0;
   } while (($i$022 | 0) != ($4 | 0));
   HEAP32[4013] = 0;
   if (HEAP32[4014] | 0) {
    $9 = HEAP32[4012] | 0;
    if ($9 | 0) {
     $dec20$in = $9;
     do {
      $dec20$in$looptemp = $dec20$in;
      $dec20$in = $dec20$in + -1 | 0;
      if (HEAP32[0 + ($dec20$in * 12 | 0) + 8 >> 2] | 0) {
       $11 = HEAP32[4012] | 0;
       $dec32 = $11 + -1 | 0;
       HEAP32[4012] = $dec32;
       if (($11 | 0) > ($dec20$in$looptemp | 0)) _SDL_memmove(0 + ($dec20$in * 12 | 0) | 0, 0 + ($dec20$in$looptemp * 12 | 0) | 0, ($dec32 - $dec20$in | 0) * 12 | 0) | 0;
      }
     } while (($dec20$in | 0) != 0);
    }
    HEAP32[4014] = 0;
   }
  }
 }
 if ((_SDL_PeepEvents($event, 1, 0, 0, 0) | 0) < 1) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 _SDL_GestureProcessEvent($event);
 $retval$0 = 1;
 return $retval$0 | 0;
}

function _EMSCRIPTEN_JoystickOpen($joystick, $device_index) {
 $joystick = $joystick | 0;
 $device_index = $device_index | 0;
 var $device_index$addr$06$i = 0, $item$0$i = 0, $item$0$lcssa$i = 0, $item$04$i = 0, $item$07$i = 0, $joystick2 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $item$04$i = HEAP32[4699] | 0;
 if (($device_index | 0) > 0) {
  $device_index$addr$06$i = $device_index;
  $item$07$i = $item$04$i;
  while (1) {
   $item$0$i = HEAP32[$item$07$i + 1320 >> 2] | 0;
   if (($device_index$addr$06$i | 0) > 1) {
    $device_index$addr$06$i = $device_index$addr$06$i + -1 | 0;
    $item$07$i = $item$0$i;
   } else {
    $item$0$lcssa$i = $item$0$i;
    break;
   }
  }
 } else $item$0$lcssa$i = $item$04$i;
 if (!$item$0$lcssa$i) {
  $retval$0 = _SDL_SetError(5684, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $joystick2 = $item$0$lcssa$i + 16 | 0;
 if (!(HEAP32[$joystick2 >> 2] | 0)) {
  HEAP32[$joystick >> 2] = HEAP32[$item$0$lcssa$i + 12 >> 2];
  HEAP32[$joystick + 84 >> 2] = $item$0$lcssa$i;
  HEAP32[$joystick2 >> 2] = $joystick;
  HEAP32[$joystick + 36 >> 2] = 0;
  HEAP32[$joystick + 44 >> 2] = 0;
  HEAP32[$joystick + 52 >> 2] = HEAP32[$item$0$lcssa$i + 20 >> 2];
  HEAP32[$joystick + 28 >> 2] = HEAP32[$item$0$lcssa$i + 24 >> 2];
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  $retval$0 = _SDL_SetError(5699, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _SDL_AssertionsQuit() {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cond5$i = 0, $item$012$i = 0, $item$08$i$i = 0, $next1$i$i = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, sp = 0, $item$08$i$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 if (!(0 != 0 & 9 != 9)) {
  STACKTOP = sp;
  return;
 }
 _debug_print(6265, sp);
 _debug_print(6290, sp + 8 | 0);
 $item$012$i = 0;
 do {
  $1 = HEAP32[$item$012$i + 20 >> 2] | 0;
  $2 = HEAP32[$item$012$i + 12 >> 2] | 0;
  $3 = HEAP32[$item$012$i + 16 >> 2] | 0;
  $4 = HEAP32[$item$012$i + 4 >> 2] | 0;
  $cond5$i = (HEAP32[$item$012$i >> 2] | 0) == 0 ? 6337 : 6340;
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$item$012$i + 8 >> 2];
  HEAP32[$vararg_buffer3 + 4 >> 2] = $1;
  HEAP32[$vararg_buffer3 + 8 >> 2] = $2;
  HEAP32[$vararg_buffer3 + 12 >> 2] = $3;
  HEAP32[$vararg_buffer3 + 16 >> 2] = $4;
  HEAP32[$vararg_buffer3 + 20 >> 2] = ($4 | 0) == 1 ? 19444 : 6335;
  HEAP32[$vararg_buffer3 + 24 >> 2] = $cond5$i;
  _debug_print(6344, $vararg_buffer3);
  $item$012$i = HEAP32[$item$012$i + 24 >> 2] | 0;
 } while (($item$012$i | 0) != 0);
 _debug_print(6419, $vararg_buffer11);
 if (!0) {
  STACKTOP = sp;
  return;
 }
 $item$08$i$i = 0;
 do {
  $next1$i$i = $item$08$i$i + 24 | 0;
  $item$08$i$i$looptemp = $item$08$i$i;
  $item$08$i$i = HEAP32[$next1$i$i >> 2] | 0;
  HEAP32[$item$08$i$i$looptemp >> 2] = 0;
  HEAP32[$item$08$i$i$looptemp + 4 >> 2] = 0;
  HEAP32[$next1$i$i >> 2] = 0;
 } while (($item$08$i$i | 0) != 0);
 STACKTOP = sp;
 return;
}

function _SDL_GameControllerClose($gamecontroller) {
 $gamecontroller = $gamecontroller | 0;
 var $0 = 0, $2 = 0, $gamecontrollerlist$0 = 0, $gamecontrollerlist$018 = 0, $gamecontrollerlist$021 = 0, $gamecontrollerlistprev$020 = 0, $gamecontrollerlistprev$020$phi = 0, $ref_count = 0;
 if (!$gamecontroller) return;
 _SDL_LockJoysticks();
 $ref_count = $gamecontroller + 4 | 0;
 $0 = HEAP32[$ref_count >> 2] | 0;
 HEAP32[$ref_count >> 2] = $0 + -1;
 if (($0 | 0) > 1) {
  _SDL_UnlockJoysticks();
  return;
 }
 _SDL_JoystickClose(HEAP32[$gamecontroller >> 2] | 0);
 $gamecontrollerlist$018 = HEAP32[4706] | 0;
 L8 : do if ($gamecontrollerlist$018 | 0) {
  $gamecontrollerlist$021 = $gamecontrollerlist$018;
  $gamecontrollerlistprev$020 = 0;
  while (1) {
   if (($gamecontrollerlist$021 | 0) == ($gamecontroller | 0)) break;
   $gamecontrollerlist$0 = HEAP32[$gamecontrollerlist$021 + 32 >> 2] | 0;
   if (!$gamecontrollerlist$0) break L8; else {
    $gamecontrollerlistprev$020$phi = $gamecontrollerlist$021;
    $gamecontrollerlist$021 = $gamecontrollerlist$0;
    $gamecontrollerlistprev$020 = $gamecontrollerlistprev$020$phi;
   }
  }
  $2 = HEAP32[$gamecontroller + 32 >> 2] | 0;
  if (!$gamecontrollerlistprev$020) {
   HEAP32[4706] = $2;
   break;
  } else {
   HEAP32[$gamecontrollerlistprev$020 + 32 >> 2] = $2;
   break;
  }
 } while (0);
 _SDL_free(HEAP32[$gamecontroller + 16 >> 2] | 0);
 _SDL_free(HEAP32[$gamecontroller + 20 >> 2] | 0);
 _SDL_free(HEAP32[$gamecontroller + 24 >> 2] | 0);
 _SDL_free($gamecontroller);
 _SDL_UnlockJoysticks();
 return;
}

function _SDL_AllocFormat($pixel_format) {
 $pixel_format = $pixel_format | 0;
 var $call = 0, $format$0 = 0, $format$018 = 0, $format$020 = 0, $refcount = 0, $retval$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _SDL_AtomicLock(15872);
 $format$018 = HEAP32[3969] | 0;
 L1 : do if ($format$018 | 0) {
  $format$020 = $format$018;
  while (1) {
   if ((HEAP32[$format$020 >> 2] | 0) == ($pixel_format | 0)) break;
   $format$0 = HEAP32[$format$020 + 40 >> 2] | 0;
   if (!$format$0) break L1; else $format$020 = $format$0;
  }
  $refcount = $format$020 + 36 | 0;
  HEAP32[$refcount >> 2] = (HEAP32[$refcount >> 2] | 0) + 1;
  _SDL_AtomicUnlock(15872);
  $retval$0 = $format$020;
  STACKTOP = sp;
  return $retval$0 | 0;
 } while (0);
 $call = _SDL_malloc(44) | 0;
 if (!$call) {
  _SDL_AtomicUnlock(15872);
  _SDL_Error(0) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ((_SDL_InitFormat($call, $pixel_format) | 0) < 0) {
  _SDL_AtomicUnlock(15872);
  _SDL_free($call);
  HEAP32[$vararg_buffer >> 2] = 4518;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (($pixel_format | 0) == 0 | ($pixel_format & -268435456 | 0) == 268435456) {
  if ((($pixel_format >>> 24 & 15) + -1 | 0) >>> 0 >= 3) label = 12;
 } else label = 12;
 if ((label | 0) == 12) {
  HEAP32[$call + 40 >> 2] = HEAP32[3969];
  HEAP32[3969] = $call;
 }
 _SDL_AtomicUnlock(15872);
 $retval$0 = $call;
 STACKTOP = sp;
 return $retval$0 | 0;
}
function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$033 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) < 0 | ($l | 0) == 0) {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } else {
   $i$033 = $l;
   while (1) {
    $sub = $i$033 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break;
    if (!$sub) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    } else $i$033 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $i$033) | 0;
   if ($call16 >>> 0 < $i$033 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$033;
   $l$addr$1 = $l - $i$033 | 0;
   $s$addr$1 = $s + $i$033 | 0;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function _copy_32($dst, $src, $n, $sfmt, $dfmt) {
 $dst = $dst | 0;
 $src = $src | 0;
 $n = $n | 0;
 $sfmt = $sfmt | 0;
 $dfmt = $dfmt | 0;
 var $10 = 0, $Amask = 0, $Bmask = 0, $Gmask = 0, $Rmask = 0, $conv = 0, $conv10 = 0, $conv13 = 0, $conv14 = 0, $conv17 = 0, $conv19 = 0, $conv2 = 0, $conv22 = 0, $conv5 = 0, $conv8 = 0, $d$027 = 0, $i$028 = 0, $mul = 0, $src$addr$029 = 0;
 if (($n | 0) <= 0) {
  $mul = $n << 2;
  return $mul | 0;
 }
 $Rmask = $sfmt + 12 | 0;
 $conv = HEAPU8[$sfmt + 32 >> 0] | 0;
 $Gmask = $sfmt + 16 | 0;
 $conv2 = HEAPU8[$sfmt + 33 >> 0] | 0;
 $Bmask = $sfmt + 20 | 0;
 $conv5 = HEAPU8[$sfmt + 34 >> 0] | 0;
 $Amask = $sfmt + 24 | 0;
 $conv8 = HEAPU8[$sfmt + 35 >> 0] | 0;
 $conv10 = HEAPU8[$dfmt + 28 >> 0] | 0;
 $conv13 = HEAPU8[$dfmt + 32 >> 0] | 0;
 $conv14 = HEAPU8[$dfmt + 29 >> 0] | 0;
 $conv17 = HEAPU8[$dfmt + 33 >> 0] | 0;
 $conv19 = HEAPU8[$dfmt + 30 >> 0] | 0;
 $conv22 = HEAPU8[$dfmt + 34 >> 0] | 0;
 $d$027 = $dst;
 $i$028 = 0;
 $src$addr$029 = $src;
 while (1) {
  $10 = HEAP32[$src$addr$029 >> 2] | 0;
  HEAP32[$d$027 >> 2] = (HEAP32[$Rmask >> 2] & $10) >>> $conv >>> $conv10 << $conv13 | (HEAP32[$Amask >> 2] & $10) >>> $conv8 << 24 | (HEAP32[$Gmask >> 2] & $10) >>> $conv2 >>> $conv14 << $conv17 | (HEAP32[$Bmask >> 2] & $10) >>> $conv5 >>> $conv19 << $conv22;
  $i$028 = $i$028 + 1 | 0;
  if (($i$028 | 0) == ($n | 0)) break; else {
   $d$027 = $d$027 + 4 | 0;
   $src$addr$029 = $src$addr$029 + 4 | 0;
  }
 }
 $mul = $n << 2;
 return $mul | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr26 = 0, $path_dst_ptr_to_static_ptr12 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  if (!$1) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($1 | 0) != ($dst_ptr | 0)) {
   $number_to_static_ptr26 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr26 >> 2] = (HEAP32[$number_to_static_ptr26 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr12 = $info + 24 | 0;
  $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
  if (($3 | 0) == 2) {
   HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
   $5 = $path_below;
  } else $5 = $3;
  if (($5 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $11 = 0, $13 = 0, $7 = 0, $8 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0, $8$looptemp = 0, $y$010$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  do {
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   $11 = ___muldi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = _i64Subtract($7$looptemp | 0, $8$looptemp | 0, $11 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $13 & 255 | 48;
  } while ($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7$looptemp >>> 0 > 4294967295);
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $y$010$looptemp = $y$010;
   $y$010 = ($y$010 >>> 0) / 10 | 0;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $y$010$looptemp - ($y$010 * 10 | 0) | 48;
   if ($y$010$looptemp >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else $s$addr$19 = $incdec$ptr7;
  }
 }
 return $s$addr$1$lcssa | 0;
}

function _SDL_PrivateGetControllerMappingForNameAndGUID($name, $guid) {
 $name = $name | 0;
 $guid = $guid | 0;
 var $guid$byval_copy = 0, $mapping$0 = 0, $pSupportedController$06$i = 0, $pSupportedController$08$i = 0, $spec$select = 0, $spec$select$i = 0, $tobool11 = 0, $tobool5$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $guid$byval_copy = sp;
 $pSupportedController$06$i = HEAP32[4705] | 0;
 L1 : do if ($pSupportedController$06$i | 0) {
  $pSupportedController$08$i = $pSupportedController$06$i;
  while (1) {
   if (!(_SDL_memcmp($guid, $pSupportedController$08$i, 16) | 0)) {
    $mapping$0 = $pSupportedController$08$i;
    break;
   }
   $pSupportedController$08$i = HEAP32[$pSupportedController$08$i + 28 >> 2] | 0;
   if (!$pSupportedController$08$i) break L1;
  }
  $tobool11 = ($mapping$0 | 0) == 0;
  $spec$select = $tobool11 ? 0 : $mapping$0;
  STACKTOP = sp;
  return $spec$select | 0;
 } while (0);
 dest = $guid$byval_copy;
 src = $guid;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $tobool5$i = (_SDL_IsJoystickHIDAPI($guid$byval_copy) | 0) == 0;
 $spec$select$i = $tobool5$i ? 0 : 0;
 $mapping$0 = ($name | 0) != 0 & ($spec$select$i | 0) == 0 ? 0 : $spec$select$i;
 $tobool11 = ($mapping$0 | 0) == 0;
 $spec$select = $tobool11 ? 0 : $mapping$0;
 STACKTOP = sp;
 return $spec$select | 0;
}

function _SDL_GetDisplayBounds($displayIndex, $rect) {
 $displayIndex = $displayIndex | 0;
 $rect = $rect | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $retval$1 = 0, $vararg_buffer1 = 0, $w = 0, $w25$pre$phiZ2D = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  $retval$1 = -1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $$pre = HEAP32[75] | 0;
 if (!(($displayIndex | 0) > -1 & ($$pre | 0) > ($displayIndex | 0))) {
  HEAP32[$vararg_buffer1 >> 2] = $$pre + -1;
  _SDL_SetError(5423, $vararg_buffer1) | 0;
  $retval$1 = -1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (!$rect) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $0 = HEAP32[76] | 0;
 $1 = HEAP32[4] | 0;
 if ($1 | 0) if (!(FUNCTION_TABLE_iiii[$1 & 15](0, $0 + ($displayIndex * 72 | 0) | 0, $rect) | 0)) {
  $retval$1 = 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 if (!$displayIndex) {
  HEAP32[$rect >> 2] = 0;
  HEAP32[$rect + 4 >> 2] = 0;
  $w25$pre$phiZ2D = $rect + 8 | 0;
 } else {
  _SDL_GetDisplayBounds($displayIndex + -1 | 0, $rect) | 0;
  $w = $rect + 8 | 0;
  HEAP32[$rect >> 2] = (HEAP32[$rect >> 2] | 0) + (HEAP32[$w >> 2] | 0);
  $w25$pre$phiZ2D = $w;
 }
 HEAP32[$w25$pre$phiZ2D >> 2] = HEAP32[$0 + ($displayIndex * 72 | 0) + 40 >> 2];
 HEAP32[$rect + 12 >> 2] = HEAP32[$0 + ($displayIndex * 72 | 0) + 44 >> 2];
 $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _SDL_PrivateJoystickButton($joystick, $button, $state) {
 $joystick = $joystick | 0;
 $button = $button | 0;
 $state = $state | 0;
 var $$sink = 0, $buttons = 0, $conv3 = 0, $event = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 switch ($state << 24 >> 24) {
 case 1:
  {
   $$sink = 1539;
   break;
  }
 case 0:
  {
   $$sink = 1540;
   break;
  }
 default:
  {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[$event >> 2] = $$sink;
 $conv3 = $button & 255;
 if ((HEAP32[$joystick + 52 >> 2] | 0) <= ($conv3 | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $buttons = $joystick + 56 | 0;
 if ((HEAP8[(HEAP32[$buttons >> 2] | 0) + $conv3 >> 0] | 0) == $state << 24 >> 24) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[4703] | 0)) if (_SDL_HasWindows() | 0) if ($state << 24 >> 24 == 1 & (_SDL_GetKeyboardFocus() | 0) == 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP8[(HEAP32[$buttons >> 2] | 0) + $conv3 >> 0] = $state;
 if ((_SDL_EventState(HEAP32[$event >> 2] | 0, -1) | 0) << 24 >> 24 != 1) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$event + 8 >> 2] = HEAP32[$joystick >> 2];
 HEAP8[$event + 12 >> 0] = $button;
 HEAP8[$event + 13 >> 0] = $state;
 $retval$0 = (_SDL_PushEvent($event) | 0) == 1 & 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_PrivateGameControllerButton($gamecontroller, $button, $state) {
 $gamecontroller = $gamecontroller | 0;
 $button = $button | 0;
 $state = $state | 0;
 var $$pre = 0, $$sink = 0, $call = 0, $event = 0, $guide_button_down = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 if (($button | 0) == -1) {
  STACKTOP = sp;
  return;
 }
 switch ($state << 24 >> 24) {
 case 1:
  {
   $$sink = 1617;
   break;
  }
 case 0:
  {
   $$sink = 1618;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$event >> 2] = $$sink;
 do if (($button | 0) == 5) {
  $call = _SDL_GetTicks() | 0;
  $guide_button_down = $gamecontroller + 28 | 0;
  if ($state << 24 >> 24 == 1) {
   HEAP32[$guide_button_down >> 2] = $call;
   if (!(HEAP32[(HEAP32[$gamecontroller >> 2] | 0) + 68 >> 2] | 0)) break;
   STACKTOP = sp;
   return;
  }
  $$pre = HEAP32[$gamecontroller >> 2] | 0;
  if ((250 - $call + (HEAP32[$guide_button_down >> 2] | 0) | 0) >= 1) if (!(HEAP32[$$pre + 72 >> 2] | 0)) {
   HEAP32[$$pre + 68 >> 2] = 1;
   STACKTOP = sp;
   return;
  }
  HEAP32[$$pre + 68 >> 2] = 0;
 } while (0);
 if ((_SDL_EventState($$sink, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$event + 8 >> 2] = HEAP32[HEAP32[$gamecontroller >> 2] >> 2];
 HEAP8[$event + 12 >> 0] = $button;
 HEAP8[$event + 13 >> 0] = $state;
 _SDL_PushEvent($event) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_FreeFormat($format) {
 $format = $format | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $next7 = 0, $next714 = 0, $next716 = 0, $refcount = 0, $refcount$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$format) {
  HEAP32[$vararg_buffer >> 2] = 4518;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
 _SDL_AtomicLock(15872);
 $refcount = $format + 36 | 0;
 $0 = HEAP32[$refcount >> 2] | 0;
 HEAP32[$refcount >> 2] = $0 + -1;
 if (($0 | 0) > 1) {
  _SDL_AtomicUnlock(15872);
  STACKTOP = sp;
  return;
 }
 $1 = HEAP32[3969] | 0;
 L9 : do if (($1 | 0) == ($format | 0)) HEAP32[3969] = HEAP32[$format + 40 >> 2]; else if ($1 | 0) {
  $next714 = $1 + 40 | 0;
  $3 = HEAP32[$next714 >> 2] | 0;
  if ($3 | 0) {
   $4 = $3;
   $next716 = $next714;
   while (1) {
    if (($4 | 0) == ($format | 0)) break;
    $next7 = $4 + 40 | 0;
    $4 = HEAP32[$next7 >> 2] | 0;
    if (!$4) break L9; else $next716 = $next7;
   }
   HEAP32[$next716 >> 2] = HEAP32[$format + 40 >> 2];
  }
 } while (0);
 _SDL_AtomicUnlock(15872);
 $7 = HEAP32[$format + 4 >> 2] | 0;
 if ($7 | 0) {
  $refcount$i = $7 + 12 | 0;
  $8 = HEAP32[$refcount$i >> 2] | 0;
  HEAP32[$refcount$i >> 2] = $8 + -1;
  if (($8 | 0) <= 1) {
   _SDL_free(HEAP32[$7 + 4 >> 2] | 0);
   _SDL_free($7);
  }
 }
 _SDL_free($format);
 STACKTOP = sp;
 return;
}

function _SDL_FreeSurface($surface) {
 $surface = $surface | 0;
 var $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $dec$i = 0, $format = 0, $locked = 0, $map = 0, $refcount = 0;
 if (!$surface) return;
 if (HEAP32[$surface >> 2] & 4 | 0) return;
 $map = $surface + 52 | 0;
 _SDL_InvalidateMap(HEAP32[$map >> 2] | 0);
 $refcount = $surface + 56 | 0;
 $2 = HEAP32[$refcount >> 2] | 0;
 HEAP32[$refcount >> 2] = $2 + -1;
 if (($2 | 0) > 1) return;
 $locked = $surface + 28 | 0;
 $3 = HEAP32[$locked >> 2] | 0;
 L10 : do if (($3 | 0) > 0) {
  $4 = $3;
  while (1) {
   $dec$i = $4 + -1 | 0;
   HEAP32[$locked >> 2] = $dec$i;
   if (($4 | 0) == 1) {
    $5 = HEAP32[$surface >> 2] | 0;
    if (!($5 & 2)) break L10;
    HEAP32[$surface >> 2] = $5 & -3;
    _SDL_RLESurface($surface) | 0;
    $6 = HEAP32[$locked >> 2] | 0;
   } else $6 = $dec$i;
   if (($6 | 0) > 0) $4 = $6; else break;
  }
 } while (0);
 if (HEAP32[$surface >> 2] & 2 | 0) _SDL_UnRLESurface($surface, 0);
 $format = $surface + 4 | 0;
 $8 = HEAP32[$format >> 2] | 0;
 if ($8 | 0) {
  if ((_SDL_SetPixelFormatPalette($8, 0) | 0) >= 0) _SDL_InvalidateMap(HEAP32[$map >> 2] | 0);
  _SDL_FreeFormat(HEAP32[$format >> 2] | 0);
  HEAP32[$format >> 2] = 0;
 }
 if (!(HEAP32[$surface >> 2] & 1)) _SDL_free(HEAP32[$surface + 20 >> 2] | 0);
 $13 = HEAP32[$map >> 2] | 0;
 if ($13 | 0) _SDL_FreeBlitMap($13);
 _SDL_free($surface);
 return;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$cast = 0, $0 = 0, $5 = 0, $6 = 0, $buf3 = 0, $buf_size = 0, $call6 = 0, $iov = 0, $iov_len = 0, $retval$0 = 0, $rpos = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $iov = sp;
 HEAP32[$iov >> 2] = $buf;
 $iov_len = $iov + 4 | 0;
 $buf_size = $f + 48 | 0;
 $0 = HEAP32[$buf_size >> 2] | 0;
 HEAP32[$iov_len >> 2] = $len - (($0 | 0) != 0 & 1);
 $buf3 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$buf3 >> 2];
 HEAP32[$iov + 12 >> 2] = $0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $iov;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $call6 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($call6 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $call6 & 48 ^ 16;
  $retval$0 = $call6;
 } else {
  $5 = HEAP32[$iov_len >> 2] | 0;
  if ($call6 >>> 0 > $5 >>> 0) {
   $6 = HEAP32[$buf3 >> 2] | 0;
   $rpos = $f + 4 | 0;
   HEAP32[$rpos >> 2] = $6;
   $$cast = $6;
   HEAP32[$f + 8 >> 2] = $$cast + ($call6 - $5);
   if (!(HEAP32[$buf_size >> 2] | 0)) $retval$0 = $len; else {
    HEAP32[$rpos >> 2] = $$cast + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $retval$0 = $len;
   }
  } else $retval$0 = $call6;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0;
 do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _SDL_TLSSet($id, $value, $destructor) {
 $id = $id | 0;
 $value = $value | 0;
 $destructor = $destructor | 0;
 var $0 = 0, $add = 0, $call1 = 0, $call7 = 0, $cond = 0, $retval$1 = 0, $storage$0 = 0, $sub25 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$id) {
  HEAP32[$vararg_buffer >> 2] = 4862;
  $retval$1 = _SDL_SetError(5998, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 $call1 = _SDL_SYS_GetTLSData() | 0;
 if (!$call1) {
  $cond = 0;
  label = 5;
 } else {
  $0 = HEAP32[$call1 >> 2] | 0;
  if ($0 >>> 0 < $id >>> 0) {
   $cond = $0;
   label = 5;
  } else $storage$0 = $call1;
 }
 if ((label | 0) == 5) {
  $add = $id + 4 | 0;
  $call7 = _SDL_realloc($call1, ($id << 3) + 36 | 0) | 0;
  if (!$call7) {
   $retval$1 = _SDL_Error(0) | 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  HEAP32[$call7 >> 2] = $add;
  if ($add >>> 0 > $cond >>> 0) _memset($call7 + ($cond << 3 | 4) | 0, 0, $add - $cond << 3 | 0) | 0;
  if (!(_SDL_SYS_SetTLSData($call7) | 0)) $storage$0 = $call7; else {
   $retval$1 = -1;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
 }
 $sub25 = $id + -1 | 0;
 HEAP32[$storage$0 + 4 + ($sub25 << 3) >> 2] = $value;
 HEAP32[$storage$0 + 4 + ($sub25 << 3) + 4 >> 2] = $destructor;
 $retval$1 = 0;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _SDL_FlushEvents($minType, $maxType) {
 $minType = $minType | 0;
 $maxType = $maxType | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $entry4$09 = 0, $next6 = 0, $prev$i = 0, $entry4$09$looptemp = 0;
 if (!(_SDL_AtomicGet(3276) | 0)) return;
 $0 = HEAP32[818] | 0;
 if ($0 | 0) if (_SDL_LockMutex($0) | 0) return;
 $1 = HEAP32[822] | 0;
 if ($1 | 0) {
  $entry4$09 = $1;
  do {
   $next6 = $entry4$09 + 72 | 0;
   $entry4$09$looptemp = $entry4$09;
   $entry4$09 = HEAP32[$next6 >> 2] | 0;
   $3 = HEAP32[$entry4$09$looptemp >> 2] | 0;
   $4 = $entry4$09;
   if (!($3 >>> 0 < $minType >>> 0 | $3 >>> 0 > $maxType >>> 0)) {
    $prev$i = $entry4$09$looptemp + 68 | 0;
    $5 = HEAP32[$prev$i >> 2] | 0;
    if (!$5) {
     $$pre$phiZ2D = $4;
     $7 = $entry4$09;
    } else {
     HEAP32[$5 + 72 >> 2] = $4;
     $$pre = HEAP32[$next6 >> 2] | 0;
     $$pre$phiZ2D = $$pre;
     $7 = $$pre;
    }
    if ($7 | 0) HEAP32[$7 + 68 >> 2] = $5;
    if ((HEAP32[822] | 0) == ($entry4$09$looptemp | 0)) HEAP32[822] = $$pre$phiZ2D;
    if ((HEAP32[823] | 0) == ($entry4$09$looptemp | 0)) HEAP32[823] = HEAP32[$prev$i >> 2];
    HEAP32[$next6 >> 2] = HEAP32[824];
    HEAP32[824] = $entry4$09$looptemp;
    _SDL_AtomicAdd(3280, -1) | 0;
   }
  } while (($entry4$09 | 0) != 0);
 }
 if (!(HEAP32[818] | 0)) return;
 return;
}

function _SDL_EventState($type, $state) {
 $type = $type | 0;
 $state = $state | 0;
 var $3 = 0, $4 = 0, $6 = 0, $arrayidx = 0, $arrayidx38 = 0, $arrayidx48 = 0, $call = 0, $current_state$0 = 0, $tobool = 0, label = 0;
 $3 = $state >>> 0 < 2 & ($type | 1 | 0) == 4097;
 $arrayidx = 12704 + (($type >>> 8 & 255) << 2) | 0;
 $4 = HEAP32[$arrayidx >> 2] | 0;
 $tobool = ($4 | 0) == 0;
 if ($tobool) label = 3; else if (!(HEAP32[$4 + (($type >>> 5 & 7) << 2) >> 2] & 1 << ($type & 31))) label = 3; else $current_state$0 = 0;
 if ((label | 0) == 3) $current_state$0 = 1;
 L6 : do if (($current_state$0 & 255 | 0) != ($state | 0)) {
  switch ($state | 0) {
  case 0:
   break;
  case 1:
   {
    $arrayidx48 = $4 + (($type >>> 5 & 7) << 2) | 0;
    HEAP32[$arrayidx48 >> 2] = HEAP32[$arrayidx48 >> 2] & ~(1 << ($type & 31));
    break L6;
    break;
   }
  default:
   break L6;
  }
  if ($tobool) {
   $call = _SDL_calloc(1, 32) | 0;
   HEAP32[$arrayidx >> 2] = $call;
   if (!$call) break; else $6 = $call;
  } else $6 = $4;
  $arrayidx38 = $6 + (($type >>> 5 & 7) << 2) | 0;
  HEAP32[$arrayidx38 >> 2] = HEAP32[$arrayidx38 >> 2] | 1 << ($type & 31);
  _SDL_FlushEvents($type, $type);
 } while (0);
 if (!$3) return $current_state$0 | 0;
 _SDL_ToggleDragAndDropSupport();
 return $current_state$0 | 0;
}

function _SDL_JoystickGetDeviceGUID($agg$result, $device_index) {
 $agg$result = $agg$result | 0;
 $device_index = $device_index | 0;
 var $call$i2 = 0, $guid1 = 0, $tmp = 0, $total_joysticks$1$i = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer = sp;
 $guid1 = sp + 24 | 0;
 $tmp = sp + 8 | 0;
 if (0) {}
 if (($device_index | 0) > -1) {
  $call$i2 = FUNCTION_TABLE_i[HEAP32[3312 >> 2] & 7]() | 0;
  if (($call$i2 | 0) > ($device_index | 0)) {
   FUNCTION_TABLE_vii[HEAP32[3328 >> 2] & 63]($tmp, $device_index);
   dest = $guid1;
   src = $tmp;
   stop = dest + 16 | 0;
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
  } else {
   $total_joysticks$1$i = $call$i2;
   label = 6;
  }
 } else {
  $total_joysticks$1$i = 0;
  label = 6;
 }
 if ((label | 0) == 6) {
  HEAP32[$vararg_buffer >> 2] = $total_joysticks$1$i;
  _SDL_SetError(5827, $vararg_buffer) | 0;
  _SDL_memset($guid1, 0, 16) | 0;
 }
 if (0) {}
 dest = $agg$result;
 src = $guid1;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _SDL_GetHintBoolean($name, $default_value) {
 $name = $name | 0;
 $default_value = $default_value | 0;
 var $call$i = 0, $hint$0$i = 0, $hint$010$i = 0, $hint$012$i = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i6 = 0, label = 0;
 $call$i = _SDL_getenv($name) | 0;
 $hint$010$i = HEAP32[4023] | 0;
 L1 : do if (!$hint$010$i) {
  $retval$0$i = $call$i;
  label = 8;
 } else {
  $hint$012$i = $hint$010$i;
  while (1) {
   if (!(_SDL_strcmp($name, HEAP32[$hint$012$i >> 2] | 0) | 0)) break;
   $hint$0$i = HEAP32[$hint$012$i + 16 >> 2] | 0;
   if (!$hint$0$i) {
    $retval$0$i = $call$i;
    label = 8;
    break L1;
   } else $hint$012$i = $hint$0$i;
  }
  if ($call$i | 0) if ((HEAP32[$hint$012$i + 8 >> 2] | 0) != 2) {
   $retval$0$i6 = $call$i;
   break;
  }
  $retval$0$i = HEAP32[$hint$012$i + 4 >> 2] | 0;
  label = 8;
 } while (0);
 if ((label | 0) == 8) if (!$retval$0$i) {
  $retval$0 = $default_value;
  return $retval$0 | 0;
 } else $retval$0$i6 = $retval$0$i;
 switch (HEAP8[$retval$0$i6 >> 0] | 0) {
 case 48:
  break;
 case 0:
  {
   $retval$0 = $default_value;
   return $retval$0 | 0;
  }
 default:
  label = 10;
 }
 if ((label | 0) == 10) if (_SDL_strcasecmp($retval$0$i6, 5200) | 0) {
  $retval$0 = 1;
  return $retval$0 | 0;
 }
 $retval$0 = 0;
 return $retval$0 | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $call1 = 0, $cond10 = 0, $cond20 = 0, $f$addr$019 = 0, $f$addr$022 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0;
 do if (!$f) {
  if (!(HEAP32[840] | 0)) $cond10 = 0; else $cond10 = _fflush(HEAP32[840] | 0) | 0;
  $f$addr$019 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!$f$addr$019) $r$0$lcssa = $cond10; else {
   $f$addr$022 = $f$addr$019;
   $r$021 = $cond10;
   while (1) {
    if ((HEAP32[$f$addr$022 + 76 >> 2] | 0) > -1) $cond20 = ___lockfile($f$addr$022) | 0; else $cond20 = 0;
    if ((HEAP32[$f$addr$022 + 20 >> 2] | 0) >>> 0 > (HEAP32[$f$addr$022 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($f$addr$022) | 0 | $r$021; else $r$1 = $r$021;
    if ($cond20 | 0) ___unlockfile($f$addr$022);
    $f$addr$022 = HEAP32[$f$addr$022 + 56 >> 2] | 0;
    if (!$f$addr$022) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$021 = $r$1;
   }
  }
  ___ofl_unlock();
  $retval$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $retval$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $retval$0 = $call1; else {
   ___unlockfile($f);
   $retval$0 = $call1;
  }
 } while (0);
 return $retval$0 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub3 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $b = sp + 144 | 0;
 $f = sp;
 _memcpy($f | 0, 2720, 144) | 0;
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $spec$select = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $spec$select;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $spec$select | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$spec$select) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_SetPixelFormatPalette($format, $palette) {
 $format = $format | 0;
 $palette = $palette | 0;
 var $2 = 0, $3 = 0, $palette6 = 0, $refcount = 0, $refcount$i = 0, $retval$0 = 0, $tobool1 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!$format) {
  $retval$0 = _SDL_SetError(4525, sp) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $tobool1 = ($palette | 0) != 0;
 if ($tobool1) if ((HEAP32[$palette >> 2] | 0) > (1 << (HEAPU8[$format + 8 >> 0] | 0) | 0)) {
  $retval$0 = _SDL_SetError(4572, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $palette6 = $format + 4 | 0;
 $2 = HEAP32[$palette6 >> 2] | 0;
 if (($2 | 0) == ($palette | 0)) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ($2 | 0) {
  $refcount$i = $2 + 12 | 0;
  $3 = HEAP32[$refcount$i >> 2] | 0;
  HEAP32[$refcount$i >> 2] = $3 + -1;
  if (($3 | 0) <= 1) {
   _SDL_free(HEAP32[$2 + 4 >> 2] | 0);
   _SDL_free($2);
  }
 }
 HEAP32[$palette6 >> 2] = $palette;
 if (!$tobool1) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $refcount = $palette + 12 | 0;
 HEAP32[$refcount >> 2] = (HEAP32[$refcount >> 2] | 0) + 1;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _SDL_SetKeyboardFocus($window) {
 $window = $window | 0;
 var $0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $call19 = 0, $call38 = 0, $scancode$06$i = 0, $tobool1 = 0;
 $0 = HEAP32[4024] | 0;
 $tobool1 = ($window | 0) != 0;
 if ($tobool1 | ($0 | 0) == 0) $2 = $0; else {
  $scancode$06$i = 0;
  do {
   if ((HEAP8[16102 + $scancode$06$i >> 0] | 0) == 1) _SDL_SendKeyboardKey(0, $scancode$06$i) | 0;
   $scancode$06$i = $scancode$06$i + 1 | 0;
  } while (($scancode$06$i | 0) != 512);
  $2 = HEAP32[4024] | 0;
 }
 if (!(($2 | 0) == 0 | ($2 | 0) == ($window | 0))) {
  if (!(HEAP32[$2 + 48 >> 2] & 16384)) $4 = $2; else {
   _SDL_CaptureMouse(0) | 0;
   $4 = HEAP32[4024] | 0;
  }
  _SDL_SendWindowEvent($4, 13, 0, 0) | 0;
  if ((_SDL_EventState(771, -1) | 0) << 24 >> 24) {
   $call19 = _SDL_GetVideoDevice() | 0;
   if ($call19 | 0) {
    $5 = HEAP32[$call19 + 244 >> 2] | 0;
    if ($5 | 0) FUNCTION_TABLE_vi[$5 & 63]($call19);
   }
  }
 }
 HEAP32[4024] = $window;
 if (!$tobool1) return;
 _SDL_SendWindowEvent($window, 12, 0, 0) | 0;
 if (!((_SDL_EventState(771, -1) | 0) << 24 >> 24)) return;
 $call38 = _SDL_GetVideoDevice() | 0;
 if (!$call38) return;
 $6 = HEAP32[$call38 + 240 >> 2] | 0;
 if (!$6) return;
 FUNCTION_TABLE_vi[$6 & 63]($call38);
 return;
}

function _SDL_DelHintCallback($name, $callback, $userdata) {
 $name = $name | 0;
 $callback = $callback | 0;
 $userdata = $userdata | 0;
 var $callbacks = 0, $entry1$0 = 0, $entry1$019 = 0, $entry1$022 = 0, $hint$0 = 0, $hint$023 = 0, $hint$025 = 0, $prev$021 = 0, $prev$021$phi = 0, label = 0;
 $hint$023 = HEAP32[4023] | 0;
 if (!$hint$023) return;
 $hint$025 = $hint$023;
 while (1) {
  if (!(_SDL_strcmp($name, HEAP32[$hint$025 >> 2] | 0) | 0)) break;
  $hint$0 = HEAP32[$hint$025 + 16 >> 2] | 0;
  if (!$hint$0) {
   label = 11;
   break;
  } else $hint$025 = $hint$0;
 }
 if ((label | 0) == 11) return;
 $callbacks = $hint$025 + 12 | 0;
 $entry1$019 = HEAP32[$callbacks >> 2] | 0;
 if (!$entry1$019) return;
 $entry1$022 = $entry1$019;
 $prev$021 = 0;
 while (1) {
  if ((HEAP32[$entry1$022 >> 2] | 0) == ($callback | 0)) if ((HEAP32[$entry1$022 + 4 >> 2] | 0) == ($userdata | 0)) break;
  $entry1$0 = HEAP32[$entry1$022 + 8 >> 2] | 0;
  if (!$entry1$0) {
   label = 11;
   break;
  } else {
   $prev$021$phi = $entry1$022;
   $entry1$022 = $entry1$0;
   $prev$021 = $prev$021$phi;
  }
 }
 if ((label | 0) == 11) return;
 HEAP32[(($prev$021 | 0) == 0 ? $callbacks : $prev$021 + 8 | 0) >> 2] = HEAP32[$entry1$022 + 8 >> 2];
 _SDL_free($entry1$022);
 return;
}

function _EMSCRIPTEN_JoystickGetDeviceGUID($agg$result, $device_index) {
 $agg$result = $agg$result | 0;
 $device_index = $device_index | 0;
 var $0 = 0, $cond = 0, $device_index$addr$06$i$i = 0, $guid4 = 0, $item$0$i$i = 0, $item$0$lcssa$i$i = 0, $item$04$i$i = 0, $item$07$i$i = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $guid4 = sp;
 $item$04$i$i = HEAP32[4699] | 0;
 if (($device_index | 0) > 0) {
  $device_index$addr$06$i$i = $device_index;
  $item$07$i$i = $item$04$i$i;
  while (1) {
   $item$0$i$i = HEAP32[$item$07$i$i + 1320 >> 2] | 0;
   if (($device_index$addr$06$i$i | 0) > 1) {
    $device_index$addr$06$i$i = $device_index$addr$06$i$i + -1 | 0;
    $item$07$i$i = $item$0$i$i;
   } else {
    $item$0$lcssa$i$i = $item$0$i$i;
    break;
   }
  }
 } else $item$0$lcssa$i$i = $item$04$i$i;
 $0 = HEAP32[$item$0$lcssa$i$i + 4 >> 2] | 0;
 _SDL_memset($guid4, 0, 16) | 0;
 if ((_SDL_strlen($0) | 0) >>> 0 > 16) $cond = 16; else $cond = _SDL_strlen($0) | 0;
 _SDL_memcpy($guid4, $0, $cond) | 0;
 dest = $agg$result;
 src = $guid4;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _SDL_Generic_SetTLSData($storage) {
 $storage = $storage | 0;
 var $call = 0, $call17 = 0, $entry1$0 = 0, $entry1$025 = 0, $entry1$028 = 0, $prev$027 = 0, $prev$027$phi = 0, $retval$0 = 0, label = 0;
 $call = _SDL_ThreadID() | 0;
 $entry1$025 = HEAP32[3967] | 0;
 L1 : do if (!$entry1$025) label = 8; else {
  $entry1$028 = $entry1$025;
  $prev$027 = 0;
  while (1) {
   if ((HEAP32[$entry1$028 >> 2] | 0) == ($call | 0)) break;
   $entry1$0 = HEAP32[$entry1$028 + 8 >> 2] | 0;
   if (!$entry1$0) {
    label = 8;
    break L1;
   } else {
    $prev$027$phi = $entry1$028;
    $entry1$028 = $entry1$0;
    $prev$027 = $prev$027$phi;
   }
  }
  if (!$storage) {
   HEAP32[(($prev$027 | 0) == 0 ? 15868 : $prev$027 + 8 | 0) >> 2] = HEAP32[$entry1$028 + 8 >> 2];
   _SDL_free($entry1$028);
   break;
  } else {
   HEAP32[$entry1$028 + 4 >> 2] = $storage;
   break;
  }
 } while (0);
 do if ((label | 0) == 8) {
  $call17 = _SDL_malloc(12) | 0;
  if ($call17 | 0) {
   HEAP32[$call17 >> 2] = $call;
   HEAP32[$call17 + 4 >> 2] = $storage;
   HEAP32[$call17 + 8 >> 2] = HEAP32[3967];
   HEAP32[3967] = $call17;
   break;
  }
  $retval$0 = _SDL_Error(0) | 0;
  return $retval$0 | 0;
 } while (0);
 $retval$0 = 0;
 return $retval$0 | 0;
}

function _Emscripten_JoyStickDisconnected($eventType, $gamepadEvent, $userData) {
 $eventType = $eventType | 0;
 $gamepadEvent = $gamepadEvent | 0;
 $userData = $userData | 0;
 var $0 = 0, $2 = 0, $3 = 0, $item$0 = 0, $item$019 = 0, $item$022 = 0, $prev$021 = 0, $prev$021$phi = 0, label = 0;
 $item$019 = HEAP32[4699] | 0;
 if (!$item$019) return 1;
 $0 = HEAP32[$gamepadEvent + 1300 >> 2] | 0;
 $item$022 = $item$019;
 $prev$021 = 0;
 while (1) {
  if ((HEAP32[$item$022 >> 2] | 0) == ($0 | 0)) break;
  $item$0 = HEAP32[$item$022 + 1320 >> 2] | 0;
  if (!$item$0) {
   label = 13;
   break;
  } else {
   $prev$021$phi = $item$022;
   $item$022 = $item$0;
   $prev$021 = $prev$021$phi;
  }
 }
 if ((label | 0) == 13) return 1;
 $2 = HEAP32[$item$022 + 16 >> 2] | 0;
 if ($2 | 0) HEAP32[$2 + 84 >> 2] = 0;
 $3 = HEAP32[$item$022 + 1320 >> 2] | 0;
 if (!$prev$021) HEAP32[4699] = $3; else HEAP32[$prev$021 + 1320 >> 2] = $3;
 if (($item$022 | 0) == (HEAP32[4700] | 0)) HEAP32[4700] = $prev$021;
 HEAP32[4701] = (HEAP32[4701] | 0) + -1;
 _SDL_PrivateJoystickRemoved(HEAP32[$item$022 + 12 >> 2] | 0);
 _SDL_free(HEAP32[$item$022 + 4 >> 2] | 0);
 _SDL_free(HEAP32[$item$022 + 8 >> 2] | 0);
 _SDL_free($item$022);
 return 1;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $call12 = 0, $call2 = 0, $call4 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_strchr(6976, HEAP8[$mode >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = ___fmodeflags($mode) | 0;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $call2 | 32768;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $call4 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($call4 | 0) < 0) $retval$0 = 0; else {
   if ($call2 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $call4;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer3 | 0) | 0;
   }
   $call12 = ___fdopen($call4, $mode) | 0;
   if (!$call12) {
    HEAP32[$vararg_buffer8 >> 2] = $call4;
    ___syscall6(6, $vararg_buffer8 | 0) | 0;
    $retval$0 = 0;
   } else $retval$0 = $call12;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __webgl1_match_ext_proc_address_without_suffix($name) {
 $name = $name | 0;
 var $retval$0 = 0, $tobool70 = 0;
 if (!(_strcmp($name, 8419) | 0)) $retval$0 = 31; else if (!(_strcmp($name, 8432) | 0)) $retval$0 = 32; else if (!(_strcmp($name, 8448) | 0)) $retval$0 = 51; else if (!(_strcmp($name, 8458) | 0)) $retval$0 = 33; else if (!(_strcmp($name, 8471) | 0)) $retval$0 = 34; else if (!(_strcmp($name, 8482) | 0)) $retval$0 = 34; else if (!(_strcmp($name, 8497) | 0)) $retval$0 = 28; else if (!(_strcmp($name, 8510) | 0)) $retval$0 = 29; else if (!(_strcmp($name, 8529) | 0)) $retval$0 = 30; else if (!(_strcmp($name, 8549) | 0)) $retval$0 = 31; else if (!(_strcmp($name, 8570) | 0)) $retval$0 = 32; else if (!(_strcmp($name, 8592) | 0)) $retval$0 = 35; else if (!(_strcmp($name, 8610) | 0)) $retval$0 = 35; else if (!(_strcmp($name, 8631) | 0)) $retval$0 = 36; else if (!(_strcmp($name, 8649) | 0)) $retval$0 = 52; else if (!(_strcmp($name, 8665) | 0)) $retval$0 = 37; else if (!(_strcmp($name, 8679) | 0)) $retval$0 = 32; else if (!(_strcmp($name, 8701) | 0)) $retval$0 = 7; else {
  $tobool70 = (_strcmp($name, 8725) | 0) == 0;
  return ($tobool70 ? 3 : 0) | 0;
 }
 return $retval$0 | 0;
}

function _SDL_RWFromFile($file, $mode) {
 $file = $file | 0;
 $mode = $mode | 0;
 var $call$i$i = 0, $call6 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ($file | 0) if (($mode | 0) != 0 & (HEAP8[$file >> 0] | 0) != 0) if (HEAP8[$mode >> 0] | 0) {
  $call6 = _fopen($file, $mode) | 0;
  if (!$call6) {
   HEAP32[$vararg_buffer1 >> 2] = $file;
   _SDL_SetError(5640, $vararg_buffer1) | 0;
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $call$i$i = _SDL_malloc(36) | 0;
  if (!$call$i$i) {
   _SDL_Error(0) | 0;
   $retval$0 = $call$i$i;
   STACKTOP = sp;
   return $retval$0 | 0;
  } else {
   HEAP32[$call$i$i >> 2] = 39;
   HEAP32[$call$i$i + 4 >> 2] = 5;
   HEAP32[$call$i$i + 8 >> 2] = 6;
   HEAP32[$call$i$i + 12 >> 2] = 7;
   HEAP32[$call$i$i + 16 >> 2] = 40;
   HEAP32[$call$i$i + 28 >> 2] = $call6;
   HEAP32[$call$i$i + 24 >> 2] = 1;
   HEAP32[$call$i$i + 20 >> 2] = 2;
   $retval$0 = $call$i$i;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 _SDL_SetError(5593, $vararg_buffer) | 0;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $retval$0 = 0;
 do if (!$s) $retval$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_180() | 0) + 188 >> 2] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $retval$0 = -1;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _atoi($s) {
 $s = $s | 0;
 var $conv1 = 0, $conv58$pre$phiZ2D = 0, $incdec$ptr = 0, $n$0$lcssa = 0, $n$012 = 0, $neg$0 = 0, $neg$1 = 0, $s$addr$0 = 0, $s$addr$1 = 0, $s$addr$211 = 0, $sub11 = 0, label = 0;
 $s$addr$0 = $s;
 while (1) {
  $incdec$ptr = $s$addr$0 + 1 | 0;
  if (!(_isspace(HEAP8[$s$addr$0 >> 0] | 0) | 0)) break; else $s$addr$0 = $incdec$ptr;
 }
 $conv1 = HEAP8[$s$addr$0 >> 0] | 0;
 switch ($conv1 | 0) {
 case 45:
  {
   $neg$0 = 1;
   label = 5;
   break;
  }
 case 43:
  {
   $neg$0 = 0;
   label = 5;
   break;
  }
 default:
  {
   $conv58$pre$phiZ2D = $conv1;
   $neg$1 = 0;
   $s$addr$1 = $s$addr$0;
  }
 }
 if ((label | 0) == 5) {
  $conv58$pre$phiZ2D = HEAP8[$incdec$ptr >> 0] | 0;
  $neg$1 = $neg$0;
  $s$addr$1 = $incdec$ptr;
 }
 if (!(_isdigit($conv58$pre$phiZ2D) | 0)) $n$0$lcssa = 0; else {
  $n$012 = 0;
  $s$addr$211 = $s$addr$1;
  while (1) {
   $sub11 = ($n$012 * 10 | 0) + 48 - (HEAP8[$s$addr$211 >> 0] | 0) | 0;
   $s$addr$211 = $s$addr$211 + 1 | 0;
   if (!(_isdigit(HEAP8[$s$addr$211 >> 0] | 0) | 0)) {
    $n$0$lcssa = $sub11;
    break;
   } else $n$012 = $sub11;
  }
 }
 return (($neg$1 | 0) == 0 ? 0 - $n$0$lcssa | 0 : $n$0$lcssa) | 0;
}

function __Z4initP8UserData($userData) {
 $userData = $userData | 0;
 var $attr = 0, $call3 = 0, $success$0$off0 = 0, $success$1$off0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer = sp;
 $attr = sp + 8 | 0;
 _emscripten_set_canvas_element_size(3780, 640, 480) | 0;
 _emscripten_webgl_init_context_attributes($attr | 0);
 HEAP32[$attr + 28 >> 2] = 0;
 HEAP32[$attr + 20 >> 2] = 0;
 HEAP32[$attr >> 2] = 0;
 HEAP32[$attr + 4 >> 2] = 0;
 HEAP32[$attr + 8 >> 2] = 0;
 HEAP32[$attr + 12 >> 2] = 0;
 HEAP32[$attr + 40 >> 2] = 1;
 HEAP32[$attr + 16 >> 2] = 0;
 HEAP32[$attr + 32 >> 2] = 1;
 HEAP32[$attr + 36 >> 2] = 0;
 _emscripten_webgl_make_context_current(_emscripten_webgl_create_context(3780, $attr | 0) | 0) | 0;
 $call3 = _glewInit() | 0;
 if (!$call3) $success$0$off0 = 1; else {
  HEAP32[$vararg_buffer >> 2] = _glewGetErrorString($call3 | 0) | 0;
  _printf(3788, $vararg_buffer) | 0;
  $success$0$off0 = 0;
 }
 if (__Z6initGLP8UserData($userData) | 0) {
  $success$1$off0 = $success$0$off0;
  STACKTOP = sp;
  return $success$1$off0 | 0;
 }
 _puts(4021) | 0;
 $success$1$off0 = 0;
 STACKTOP = sp;
 return $success$1$off0 | 0;
}

function __Z10LoadShaderjPKc($type, $shaderSrc) {
 $type = $type | 0;
 $shaderSrc = $shaderSrc | 0;
 var $1 = 0, $call = 0, $call4 = 0, $compiled = 0, $infoLen = 0, $retval$0 = 0, $shaderSrc$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $shaderSrc$addr = sp + 8 | 0;
 $compiled = sp + 12 | 0;
 $infoLen = sp + 4 | 0;
 HEAP32[$shaderSrc$addr >> 2] = $shaderSrc;
 $call = _glCreateShader($type | 0) | 0;
 if (!$call) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _glShaderSource($call | 0, 1, $shaderSrc$addr | 0, 0);
 _glCompileShader($call | 0);
 _glGetShaderiv($call | 0, 35713, $compiled | 0);
 if (HEAP32[$compiled >> 2] | 0) {
  $retval$0 = $call;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$infoLen >> 2] = 0;
 _glGetShaderiv($call | 0, 35716, $infoLen | 0);
 $1 = HEAP32[$infoLen >> 2] | 0;
 if (($1 | 0) > 1) {
  $call4 = _malloc($1) | 0;
  _glGetShaderInfoLog($call | 0, $1 | 0, 0, $call4 | 0);
  HEAP32[$vararg_buffer >> 2] = $call4;
  _printf(3933, $vararg_buffer) | 0;
  _free($call4);
 }
 _glDeleteShader($call | 0);
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0;
 L1 : do if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($1 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($1 | 0) > 1) {
   $search_done = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$search_done >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  }
 } while (0);
 return;
}

function _strcasecmp($_l, $_r) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $call = 0, $call13 = 0, $conv17 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $l$015 = 0, $r$0$lcssa = 0, $r$016 = 0;
 $0 = HEAP8[$_l >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) {
  $5 = 0;
  $r$0$lcssa = $_r;
 } else {
  $2 = $0;
  $conv17 = $0 & 255;
  $l$015 = $_l;
  $r$016 = $_r;
  while (1) {
   $1 = HEAP8[$r$016 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    $5 = $2;
    $r$0$lcssa = $r$016;
    break L1;
   }
   if ($2 << 24 >> 24 != $1 << 24 >> 24) {
    $call = _tolower($conv17) | 0;
    if (($call | 0) != (_tolower(HEAPU8[$r$016 >> 0] | 0) | 0)) break;
   }
   $incdec$ptr = $l$015 + 1 | 0;
   $incdec$ptr11 = $r$016 + 1 | 0;
   $4 = HEAP8[$incdec$ptr >> 0] | 0;
   if (!($4 << 24 >> 24)) {
    $5 = 0;
    $r$0$lcssa = $incdec$ptr11;
    break L1;
   } else {
    $2 = $4;
    $conv17 = $4 & 255;
    $l$015 = $incdec$ptr;
    $r$016 = $incdec$ptr11;
   }
  }
  $5 = HEAP8[$l$015 >> 0] | 0;
  $r$0$lcssa = $r$016;
 } while (0);
 $call13 = _tolower($5 & 255) | 0;
 return $call13 - (_tolower(HEAPU8[$r$0$lcssa >> 0] | 0) | 0) | 0;
}

function ___fseeko_unlocked($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $13 = 0, $14 = 0, $6 = 0, $retval$0 = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 if (($whence | 0) == 1) {
  $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - (HEAP32[$f + 4 >> 2] | 0) | 0;
  $6 = _i64Subtract($0 | 0, $1 | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
  $13 = $6;
  $14 = getTempRet0() | 0;
 } else {
  $13 = $0;
  $14 = $1;
 }
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 7]($f, $13, $14, $whence) | 0;
  if ((getTempRet0() | 0) < 0) $retval$0 = -1; else {
   HEAP32[$f + 8 >> 2] = 0;
   HEAP32[$f + 4 >> 2] = 0;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function __GLOBAL__sub_I_TestEmscripten_cpp() {
 HEAP32[3910] = 0;
 HEAP32[3911] = -1;
 HEAP32[3912] = -1;
 HEAP32[3913] = -1;
 HEAP32[3914] = -1;
 HEAP32[3915] = 0;
 HEAP32[3916] = 0;
 HEAPF32[3919] = 1.0;
 HEAP32[3920] = 0;
 HEAP32[3921] = 0;
 HEAP32[3922] = 0;
 HEAP32[3923] = 0;
 HEAPF32[3924] = 1.0;
 HEAP32[3925] = 0;
 HEAP32[3926] = 0;
 HEAP32[3927] = 0;
 HEAP32[3928] = 0;
 HEAPF32[3929] = 1.0;
 HEAP32[3930] = 0;
 HEAP32[3931] = 0;
 HEAP32[3932] = 0;
 HEAP32[3933] = 0;
 HEAPF32[3934] = 1.0;
 HEAPF32[3935] = 1.0;
 HEAP32[3936] = 0;
 HEAP32[3937] = 0;
 HEAP32[3938] = 0;
 HEAP32[3939] = 0;
 HEAPF32[3940] = 1.0;
 HEAP32[3941] = 0;
 HEAP32[3942] = 0;
 HEAP32[3943] = 0;
 HEAP32[3944] = 0;
 HEAPF32[3945] = 1.0;
 HEAP32[3946] = 0;
 HEAP32[3947] = 0;
 HEAP32[3948] = 0;
 HEAP32[3949] = 0;
 HEAPF32[3950] = 1.0;
 HEAPF32[3951] = 1.0;
 HEAP32[3952] = 0;
 HEAP32[3953] = 0;
 HEAP32[3954] = 0;
 HEAP32[3955] = 0;
 HEAPF32[3956] = 1.0;
 HEAP32[3957] = 0;
 HEAP32[3958] = 0;
 HEAP32[3959] = 0;
 HEAP32[3960] = 0;
 HEAPF32[3961] = 1.0;
 HEAP32[3962] = 0;
 HEAP32[3963] = 0;
 HEAP32[3964] = 0;
 HEAP32[3965] = 0;
 HEAPF32[3966] = 1.0;
 return;
}

function _fourbyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $7 = 0, $8 = 0, $arrayidx22 = 0, $h$addr$0$lcssa = 0, $h$addr$018 = 0, $hw$019 = 0, $incdec$ptr = 0, $or10 = 0, $or24 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool15 = 0;
 $or10 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8 | (HEAPU8[$n + 3 >> 0] | 0);
 $arrayidx22 = $h + 3 | 0;
 $7 = HEAP8[$arrayidx22 >> 0] | 0;
 $or24 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | (HEAPU8[$h + 2 >> 0] | 0) << 8 | $7 & 255;
 $tobool15 = $7 << 24 >> 24 == 0;
 if (($or24 | 0) == ($or10 | 0) | $tobool15) {
  $h$addr$0$lcssa = $arrayidx22;
  $tobool$lcssa = $tobool15;
 } else {
  $h$addr$018 = $arrayidx22;
  $hw$019 = $or24;
  while (1) {
   $incdec$ptr = $h$addr$018 + 1 | 0;
   $8 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$019 = $hw$019 << 8 | $8 & 255;
   $tobool = $8 << 24 >> 24 == 0;
   if (($hw$019 | 0) == ($or10 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$018 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -3 | 0) | 0;
}

function _SDL_JoystickGetDeviceIndexFromInstanceID($instance_id) {
 $instance_id = $instance_id | 0;
 var $call$i2$i = 0, $call$i6 = 0, $device_index$0 = 0, $i$017 = 0, $instance_id$0$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (0) {}
 $call$i6 = FUNCTION_TABLE_i[HEAP32[3312 >> 2] & 7]() | 0;
 if (0) {}
 L7 : do if (($call$i6 | 0) > 0) {
  $i$017 = 0;
  while (1) {
   if (0) {}
   $call$i2$i = FUNCTION_TABLE_i[HEAP32[3312 >> 2] & 7]() | 0;
   if (($call$i2$i | 0) > ($i$017 | 0)) $instance_id$0$i = FUNCTION_TABLE_ii[HEAP32[3332 >> 2] & 63]($i$017) | 0; else {
    HEAP32[$vararg_buffer >> 2] = $call$i2$i;
    _SDL_SetError(5827, $vararg_buffer) | 0;
    $instance_id$0$i = -1;
   }
   if (0) {}
   if (($instance_id$0$i | 0) == ($instance_id | 0)) {
    $device_index$0 = $i$017;
    break L7;
   }
   $i$017 = $i$017 + 1 | 0;
   if (($i$017 | 0) >= ($call$i6 | 0)) {
    $device_index$0 = -1;
    break;
   }
  }
 } else $device_index$0 = -1; while (0);
 if (!0) {
  STACKTOP = sp;
  return $device_index$0 | 0;
 }
 STACKTOP = sp;
 return $device_index$0 | 0;
}

function _SDL_CaptureMouse($enabled) {
 $enabled = $enabled | 0;
 var $2 = 0, $call2 = 0, $flags18 = 0, $flags25 = 0, $retval$0 = 0, $tobool3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 do if (!(HEAP32[3979] | 0)) $retval$0 = _SDL_Error(4) | 0; else {
  $call2 = _SDL_GetKeyboardFocus() | 0;
  $tobool3 = ($call2 | 0) != 0;
  if ($tobool3) $2 = (HEAP32[$call2 + 48 >> 2] | 0) >>> 14 & 1; else $2 = 0;
  if (($2 | 0) == ($enabled | 0)) $retval$0 = 0; else {
   if (!$enabled) {
    if ((FUNCTION_TABLE_ii[HEAP32[15916 >> 2] & 63](0) | 0) == -1) {
     $retval$0 = -1;
     break;
    }
    $flags25 = $call2 + 48 | 0;
    HEAP32[$flags25 >> 2] = HEAP32[$flags25 >> 2] & -16385;
    $retval$0 = 0;
    break;
   }
   if (!$tobool3) {
    $retval$0 = _SDL_SetError(5573, $vararg_buffer) | 0;
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[15916 >> 2] & 63]($call2) | 0) == -1) $retval$0 = -1; else {
    $flags18 = $call2 + 48 | 0;
    HEAP32[$flags18 >> 2] = HEAP32[$flags18 >> 2] | 16384;
    $retval$0 = 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $w$0 = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $$pn = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn24 = $incdec$ptr1323;
   }
  }
  $$pn = $s$addr$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _SDL_PrivateGetControllerMapping($device_index) {
 $device_index = $device_index | 0;
 var $call4 = 0, $call5 = 0, $retval$0 = 0, $tmp = 0, $tmp$byval_copy = 0, $vararg_buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $tmp$byval_copy = sp + 24 | 0;
 $vararg_buffer = sp;
 $tmp = sp + 8 | 0;
 _SDL_LockJoysticks();
 if (($device_index | 0) >= 0) if ((_SDL_NumJoysticks() | 0) > ($device_index | 0)) {
  $call4 = _SDL_JoystickNameForIndex($device_index) | 0;
  _SDL_JoystickGetDeviceGUID($tmp, $device_index);
  dest = $tmp$byval_copy;
  src = $tmp;
  stop = dest + 16 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $call5 = _SDL_PrivateGetControllerMappingForNameAndGUID($call4, $tmp$byval_copy) | 0;
  _SDL_UnlockJoysticks();
  $retval$0 = $call5;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 HEAP32[$vararg_buffer >> 2] = _SDL_NumJoysticks() | 0;
 _SDL_SetError(5827, $vararg_buffer) | 0;
 _SDL_UnlockJoysticks();
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_FilterEvents($filter, $userdata) {
 $filter = $filter | 0;
 $userdata = $userdata | 0;
 var $0 = 0, $1 = 0, $3 = 0, $6 = 0, $entry1$07 = 0, $next3 = 0, $prev$i = 0, $entry1$07$looptemp = 0;
 $0 = HEAP32[818] | 0;
 if ($0 | 0) if (_SDL_LockMutex($0) | 0) return;
 $1 = HEAP32[822] | 0;
 if ($1 | 0) {
  $entry1$07 = $1;
  do {
   $next3 = $entry1$07 + 72 | 0;
   $entry1$07$looptemp = $entry1$07;
   $entry1$07 = HEAP32[$next3 >> 2] | 0;
   if (!(FUNCTION_TABLE_iii[$filter & 15]($userdata, $entry1$07$looptemp) | 0)) {
    $prev$i = $entry1$07$looptemp + 68 | 0;
    $3 = HEAP32[$prev$i >> 2] | 0;
    if ($3 | 0) HEAP32[$3 + 72 >> 2] = HEAP32[$next3 >> 2];
    $6 = HEAP32[$next3 >> 2] | 0;
    if ($6 | 0) HEAP32[$6 + 68 >> 2] = $3;
    if ((HEAP32[822] | 0) == ($entry1$07$looptemp | 0)) HEAP32[822] = $6;
    if ((HEAP32[823] | 0) == ($entry1$07$looptemp | 0)) HEAP32[823] = HEAP32[$prev$i >> 2];
    HEAP32[$next3 >> 2] = HEAP32[824];
    HEAP32[824] = $entry1$07$looptemp;
    _SDL_AtomicAdd(3280, -1) | 0;
   }
  } while (($entry1$07 | 0) != 0);
 }
 if (!(HEAP32[818] | 0)) return;
 return;
}

function _threebyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $arrayidx15 = 0, $h$addr$0$lcssa = 0, $h$addr$016 = 0, $hw$017 = 0, $incdec$ptr = 0, $or18 = 0, $or7 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool13 = 0;
 $or7 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8;
 $arrayidx15 = $h + 2 | 0;
 $5 = HEAP8[$arrayidx15 >> 0] | 0;
 $or18 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | ($5 & 255) << 8;
 $tobool13 = $5 << 24 >> 24 == 0;
 if (($or18 | 0) == ($or7 | 0) | $tobool13) {
  $h$addr$0$lcssa = $arrayidx15;
  $tobool$lcssa = $tobool13;
 } else {
  $h$addr$016 = $arrayidx15;
  $hw$017 = $or18;
  while (1) {
   $incdec$ptr = $h$addr$016 + 1 | 0;
   $6 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$017 = ($hw$017 | $6 & 255) << 8;
   $tobool = $6 << 24 >> 24 == 0;
   if (($hw$017 | 0) == ($or7 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$016 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -2 | 0) | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr6 = 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 do if (!$0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($0 | 0) != ($adjustedPtr | 0)) {
   $number_to_static_ptr11 = $info + 36 | 0;
   HEAP32[$number_to_static_ptr11 >> 2] = (HEAP32[$number_to_static_ptr11 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $path_dst_ptr_to_static_ptr6 = $info + 24 | 0;
  if ((HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0) == 2) HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
 } while (0);
 return;
}

function _cycle($width, $ar, $n) {
 $width = $width | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $2 = 0, $arrayidx = 0, $arrayidx5 = 0, $cond = 0, $i$022 = 0, $sub = 0, $tmp = 0, $width$addr$024 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $tmp = sp;
 L1 : do if (($n | 0) >= 2) {
  $arrayidx = $ar + ($n << 2) | 0;
  HEAP32[$arrayidx >> 2] = $tmp;
  if ($width | 0) {
   $2 = $tmp;
   $width$addr$024 = $width;
   while (1) {
    $cond = $width$addr$024 >>> 0 < 256 ? $width$addr$024 : 256;
    _memcpy($2 | 0, HEAP32[$ar >> 2] | 0, $cond | 0) | 0;
    $i$022 = 0;
    do {
     $arrayidx5 = $ar + ($i$022 << 2) | 0;
     $i$022 = $i$022 + 1 | 0;
     _memcpy(HEAP32[$arrayidx5 >> 2] | 0, HEAP32[$ar + ($i$022 << 2) >> 2] | 0, $cond | 0) | 0;
     HEAP32[$arrayidx5 >> 2] = (HEAP32[$arrayidx5 >> 2] | 0) + $cond;
    } while (($i$022 | 0) != ($n | 0));
    $sub = $width$addr$024 - $cond | 0;
    if (!$sub) break L1;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    $width$addr$024 = $sub;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _dollarDifference($points, $templ, $ang) {
 $points = $points | 0;
 $templ = $templ | 0;
 $ang = +$ang;
 var $conv = 0.0, $conv1 = 0.0, $conv11 = 0.0, $conv17 = 0.0, $conv21 = 0.0, $conv3 = 0.0, $conv7 = 0.0, $dist$026 = 0.0, $i$027 = 0, $mul = 0.0, $mul14 = 0.0, $sub26 = 0.0, $sub35 = 0.0, $x = 0, $y = 0;
 $conv1 = $ang;
 $dist$026 = 0.0;
 $i$027 = 0;
 do {
  $x = $points + ($i$027 << 3) | 0;
  $conv = +HEAPF32[$x >> 2];
  $mul = +_SDL_cos($conv1) * $conv;
  $y = $points + ($i$027 << 3) + 4 | 0;
  $conv3 = +HEAPF32[$y >> 2];
  $conv7 = $mul - +_SDL_sin($conv1) * $conv3;
  $conv11 = +HEAPF32[$x >> 2];
  $mul14 = +_SDL_sin($conv1) * $conv11;
  $conv17 = +HEAPF32[$y >> 2];
  $conv21 = $mul14 + +_SDL_cos($conv1) * $conv17;
  $sub26 = $conv7 - +HEAPF32[$templ + ($i$027 << 3) >> 2];
  $sub35 = $conv21 - +HEAPF32[$templ + ($i$027 << 3) + 4 >> 2];
  $dist$026 = $dist$026 + +_SDL_sqrt($sub26 * $sub26 + $sub35 * $sub35);
  $i$027 = $i$027 + 1 | 0;
 } while (($i$027 | 0) != 64);
 return +($dist$026 * .015625);
}

function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017$in = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0;
 if (!$n) $retval$0 = 0; else {
  $0 = HEAP8[$_l >> 0] | 0;
  L3 : do if (!($0 << 24 >> 24)) {
   $$lcssa = 0;
   $r$0$lcssa = $_r;
  } else {
   $2 = $0;
   $l$015 = $_l;
   $n$addr$017$in = $n;
   $r$016 = $_r;
   while (1) {
    $n$addr$017$in = $n$addr$017$in + -1 | 0;
    $1 = HEAP8[$r$016 >> 0] | 0;
    if (!($2 << 24 >> 24 == $1 << 24 >> 24 & (($n$addr$017$in | 0) != 0 & $1 << 24 >> 24 != 0))) {
     $$lcssa = $2;
     $r$0$lcssa = $r$016;
     break L3;
    }
    $l$015 = $l$015 + 1 | 0;
    $incdec$ptr9 = $r$016 + 1 | 0;
    $2 = HEAP8[$l$015 >> 0] | 0;
    if (!($2 << 24 >> 24)) {
     $$lcssa = 0;
     $r$0$lcssa = $incdec$ptr9;
     break;
    } else $r$016 = $incdec$ptr9;
   }
  } while (0);
  $retval$0 = ($$lcssa & 255) - (HEAPU8[$r$0$lcssa >> 0] | 0) | 0;
 }
 return $retval$0 | 0;
}

function _cmpmodes($A, $B) {
 $A = $A | 0;
 $B = $B | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and16 = 0, $and29 = 0, $and32 = 0, $retval$0 = 0;
 if (($A | 0) == ($B | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $0 = HEAP32[$A + 4 >> 2] | 0;
 $1 = HEAP32[$B + 4 >> 2] | 0;
 if (($1 | 0) != ($0 | 0)) {
  $retval$0 = $1 - $0 | 0;
  return $retval$0 | 0;
 }
 $2 = HEAP32[$A + 8 >> 2] | 0;
 $3 = HEAP32[$B + 8 >> 2] | 0;
 if (($3 | 0) != ($2 | 0)) {
  $retval$0 = $3 - $2 | 0;
  return $retval$0 | 0;
 }
 $4 = HEAP32[$A >> 2] | 0;
 $and = $4 >>> 8 & 255;
 $5 = HEAP32[$B >> 2] | 0;
 $and16 = $5 >>> 8 & 255;
 if (($and16 | 0) != ($and | 0)) {
  $retval$0 = $and16 - $and | 0;
  return $retval$0 | 0;
 }
 $and29 = $4 >>> 16 & 15;
 $and32 = $5 >>> 16 & 15;
 if (($and32 | 0) == ($and29 | 0)) {
  $6 = HEAP32[$A + 12 >> 2] | 0;
  $7 = HEAP32[$B + 12 >> 2] | 0;
  return (($7 | 0) == ($6 | 0) ? 0 : $7 - $6 | 0) | 0;
 }
 $retval$0 = $and32 - $and29 | 0;
 return $retval$0 | 0;
}

function _SDL_JoystickNameForIndex($device_index) {
 $device_index = $device_index | 0;
 var $call$i2 = 0, $call1 = 0, $name$0 = 0, $total_joysticks$1$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (0) {}
 if (($device_index | 0) > -1) {
  $call$i2 = FUNCTION_TABLE_i[HEAP32[3312 >> 2] & 7]() | 0;
  if (($call$i2 | 0) > ($device_index | 0)) {
   $call1 = FUNCTION_TABLE_ii[HEAP32[3320 >> 2] & 63]($device_index) | 0;
   if (!$call1) $name$0 = 0; else if (!(_SDL_strncmp($call1, 5860, _SDL_strlen(5860) | 0) | 0)) $name$0 = $call1 + (_SDL_strlen(5860) | 0) | 0; else $name$0 = $call1;
  } else {
   $total_joysticks$1$i = $call$i2;
   label = 5;
  }
 } else {
  $total_joysticks$1$i = 0;
  label = 5;
 }
 if ((label | 0) == 5) {
  HEAP32[$vararg_buffer >> 2] = $total_joysticks$1$i;
  _SDL_SetError(5827, $vararg_buffer) | 0;
  $name$0 = 0;
 }
 if (!0) {
  STACKTOP = sp;
  return $name$0 | 0;
 }
 STACKTOP = sp;
 return $name$0 | 0;
}

function _close_audio_device($device) {
 $device = $device | 0;
 var $2 = 0, $3 = 0, $6 = 0, $arrayidx = 0;
 if (!$device) return;
 FUNCTION_TABLE_vi[HEAP32[18728 >> 2] & 63]($device);
 _SDL_AtomicSet($device + 64 | 0, 1) | 0;
 _SDL_AtomicSet($device + 56 | 0, 1) | 0;
 _SDL_AtomicSet($device + 60 | 0, 0) | 0;
 FUNCTION_TABLE_vi[HEAP32[18732 >> 2] & 63]($device);
 $2 = HEAP32[$device + 84 >> 2] | 0;
 if ($2 | 0) _SDL_WaitThread($2, 0);
 $3 = HEAP32[$device + 80 >> 2] | 0;
 if ($3 | 0) _SDL_DestroyMutex($3);
 _SDL_free(HEAP32[$device + 72 >> 2] | 0);
 _SDL_FreeAudioStream(HEAP32[$device + 52 >> 2] | 0);
 $6 = HEAP32[$device >> 2] | 0;
 if ($6 | 0) {
  $arrayidx = 13760 + ($6 + -1 << 2) | 0;
  if ((HEAP32[$arrayidx >> 2] | 0) == ($device | 0)) HEAP32[$arrayidx >> 2] = 0;
 }
 if (HEAP32[$device + 96 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[18724 >> 2] & 63]($device);
 _SDL_FreeDataQueue(HEAP32[$device + 92 >> 2] | 0);
 _SDL_free($device);
 return;
}

function _IMG_Load($file) {
 $file = $file | 0;
 var $call = 0, $call1 = 0, $call6 = 0, $call7 = 0, $h = 0, $retval$1 = 0, $w = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $w = sp + 4 | 0;
 $h = sp;
 $call = _emscripten_get_preloaded_image_data($file | 0, $w | 0, $h | 0) | 0;
 if (!$call) {
  $call6 = _SDL_RWFromFile($file, 5992) | 0;
  $call7 = _strrchr($file, 46) | 0;
  if (!$call6) {
   $retval$1 = 0;
   STACKTOP = sp;
   return $retval$1 | 0;
  }
  $retval$1 = _IMG_LoadTyped_RW($call6, 1, ($call7 | 0) == 0 ? 0 : $call7 + 1 | 0) | 0;
  STACKTOP = sp;
  return $retval$1 | 0;
 } else {
  $call1 = _SDL_CreateRGBSurface(0, HEAP32[$w >> 2] | 0, HEAP32[$h >> 2] | 0, 32, 255, 65280, 16711680, -16777216) | 0;
  if ($call1 | 0) _memcpy(HEAP32[$call1 + 20 >> 2] | 0, $call | 0, Math_imul(HEAP32[$w >> 2] << 2, HEAP32[$h >> 2] | 0) | 0) | 0;
  _free($call);
  $retval$1 = $call1;
  STACKTOP = sp;
  return $retval$1 | 0;
 }
 return 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $2 = 0, $3 = 0, $add14 = 0, $cmp1 = 0, $cmp11 = 0, $mul = 0.0, $mul10 = 0.0, $n$addr$0 = 0, $sub4 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $mul = $x * 8988465674311579538646525.0e283;
  $cmp1 = ($n | 0) > 2046;
  $sub4 = $n + -2046 | 0;
  $n$addr$0 = $cmp1 ? (($sub4 | 0) < 1023 ? $sub4 : 1023) : $n + -1023 | 0;
  $y$0 = $cmp1 ? $mul * 8988465674311579538646525.0e283 : $mul;
 } else if (($n | 0) < -1022) {
  $mul10 = $x * 2.2250738585072014e-308;
  $cmp11 = ($n | 0) < -2044;
  $add14 = $n + 2044 | 0;
  $n$addr$0 = $cmp11 ? (($add14 | 0) > -1022 ? $add14 : -1022) : $n + 1022 | 0;
  $y$0 = $cmp11 ? $mul10 * 2.2250738585072014e-308 : $mul10;
 } else {
  $n$addr$0 = $n;
  $y$0 = $x;
 }
 $2 = _bitshift64Shl($n$addr$0 + 1023 | 0, 0, 52) | 0;
 $3 = getTempRet0() | 0;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 $conv = $_c & 255;
 HEAP8[$c >> 0] = $conv;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $2 = HEAP32[$wend >> 2] | 0;
  label = 4;
 } else $retval$0 = -1; else {
  $2 = $0;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $wpos = $f + 20 | 0;
  $1 = HEAP32[$wpos >> 2] | 0;
  if ($1 >>> 0 < $2 >>> 0) {
   $conv5 = $_c & 255;
   if (($conv5 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$wpos >> 2] = $1 + 1;
    HEAP8[$1 >> 0] = $conv;
    $retval$0 = $conv5;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_PrivateJoystickRemoved($device_instance) {
 $device_instance = $device_instance | 0;
 var $event = 0, $joystick$0 = 0, $joystick$07 = 0, $joystick$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 HEAP32[$event >> 2] = 1542;
 if ((_SDL_EventState(1542, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[$event + 8 >> 2] = $device_instance;
  _SDL_PushEvent($event) | 0;
 }
 _UpdateEventsForDeviceRemoval_403();
 $joystick$07 = HEAP32[4704] | 0;
 if (!$joystick$07) {
  STACKTOP = sp;
  return;
 }
 $joystick$09 = $joystick$07;
 while (1) {
  if ((HEAP32[$joystick$09 >> 2] | 0) == ($device_instance | 0)) break;
  $joystick$0 = HEAP32[$joystick$09 + 92 >> 2] | 0;
  if (!$joystick$0) {
   label = 8;
   break;
  } else $joystick$09 = $joystick$0;
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$joystick$09 + 60 >> 2] = 0;
 HEAP32[$joystick$09 + 72 >> 2] = 1;
 STACKTOP = sp;
 return;
}

function _SDL_GestureDelTouch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $dec = 0, $i$0$lcssa = 0, $i$09 = 0, $inc = 0, $retval$0 = 0;
 $2 = HEAP32[4015] | 0;
 L1 : do if (($2 | 0) > 0) {
  $i$09 = 0;
  while (1) {
   $3 = 0 + ($i$09 * 8232 | 0) | 0;
   if ((HEAP32[$3 >> 2] | 0) == ($0 | 0) ? (HEAP32[$3 + 4 >> 2] | 0) == ($1 | 0) : 0) {
    $i$0$lcssa = $i$09;
    break L1;
   }
   $inc = $i$09 + 1 | 0;
   if (($inc | 0) < ($2 | 0)) $i$09 = $inc; else {
    $i$0$lcssa = $inc;
    break;
   }
  }
 } else $i$0$lcssa = 0; while (0);
 if (($i$0$lcssa | 0) == ($2 | 0)) {
  $retval$0 = -1;
  return $retval$0 | 0;
 }
 _SDL_free(HEAP32[0 + ($i$0$lcssa * 8232 | 0) + 8224 >> 2] | 0);
 _SDL_memset(0 + ($i$0$lcssa * 8232 | 0) | 0, 0, 8232) | 0;
 $dec = (HEAP32[4015] | 0) + -1 | 0;
 HEAP32[4015] = $dec;
 _SDL_memcpy(0 + ($i$0$lcssa * 8232 | 0) | 0, 0 + ($dec * 8232 | 0) | 0, 8232) | 0;
 $retval$0 = 0;
 return $retval$0 | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $sub$ptr$sub = $4 - $5 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 7]($f, $sub$ptr$sub, (($sub$ptr$sub | 0) < 0) << 31 >> 31, 1) | 0;
   getTempRet0() | 0;
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _SDL_AllocPalette($ncolors) {
 $ncolors = $ncolors | 0;
 var $call1 = 0, $call5 = 0, $mul = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (($ncolors | 0) < 1) {
  HEAP32[$vararg_buffer >> 2] = 5493;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $call1 = _SDL_malloc(16) | 0;
 if (!$call1) {
  _SDL_Error(0) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $mul = $ncolors << 2;
 $call5 = _SDL_malloc($mul) | 0;
 HEAP32[$call1 + 4 >> 2] = $call5;
 if (!$call5) {
  _SDL_free($call1);
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  HEAP32[$call1 >> 2] = $ncolors;
  HEAP32[$call1 + 8 >> 2] = 1;
  HEAP32[$call1 + 12 >> 2] = 1;
  _SDL_memset($call5, 255, $mul) | 0;
  $retval$0 = $call1;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function ___ftello_unlocked($f) {
 $f = $f | 0;
 var $12 = 0, $13 = 0, $18 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0;
 if (!(HEAP32[$f >> 2] & 128)) $4 = 1; else $4 = (HEAP32[$f + 20 >> 2] | 0) >>> 0 > (HEAP32[$f + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $5 = FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 7]($f, 0, 0, $4) | 0;
 $6 = getTempRet0() | 0;
 if (($6 | 0) < 0) {
  $20 = $6;
  $21 = $5;
 } else {
  $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - (HEAP32[$f + 4 >> 2] | 0) | 0;
  $12 = _i64Subtract($5 | 0, $6 | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
  $13 = getTempRet0() | 0;
  $sub$ptr$sub6 = (HEAP32[$f + 20 >> 2] | 0) - (HEAP32[$f + 28 >> 2] | 0) | 0;
  $18 = _i64Add($12 | 0, $13 | 0, $sub$ptr$sub6 | 0, (($sub$ptr$sub6 | 0) < 0) << 31 >> 31 | 0) | 0;
  $20 = getTempRet0() | 0;
  $21 = $18;
 }
 setTempRet0($20 | 0);
 return $21 | 0;
}

function _SDL_SetMouseFocus($window) {
 $window = $window | 0;
 var $0 = 0, $3 = 0, $cursor$addr$0$i = 0, $cursor$addr$0$i$in = 0, $tobool22$i = 0, label = 0;
 $0 = HEAP32[3982] | 0;
 if (($0 | 0) == ($window | 0)) return;
 if ($0 | 0) _SDL_SendWindowEvent($0, 11, 0, 0) | 0;
 HEAP32[3982] = $window;
 HEAP32[3992] = 0;
 if (!$window) label = 6; else {
  _SDL_SendWindowEvent($window, 10, 0, 0) | 0;
  if (!(HEAP32[3982] | 0)) label = 6; else $cursor$addr$0$i$in = 16024;
 }
 if ((label | 0) == 6) $cursor$addr$0$i$in = 16020;
 $cursor$addr$0$i = HEAP32[$cursor$addr$0$i$in >> 2] | 0;
 $3 = HEAP32[3973] | 0;
 $tobool22$i = ($3 | 0) == 0;
 if (($cursor$addr$0$i | 0) != 0 & (HEAP32[4007] | 0) != 0 & (HEAP32[3993] | 0) == 0) {
  if ($tobool22$i) return;
  FUNCTION_TABLE_ii[$3 & 63]($cursor$addr$0$i) | 0;
  return;
 } else {
  if ($tobool22$i) return;
  FUNCTION_TABLE_ii[$3 & 63](0) | 0;
  return;
 }
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $call = 0, $retval$0 = 0;
 $0 = HEAP8[$n >> 0] | 0;
 do if (!($0 << 24 >> 24)) $retval$0 = $h; else {
  $call = _strchr($h, $0 << 24 >> 24) | 0;
  if (!$call) $retval$0 = 0; else if (!(HEAP8[$n + 1 >> 0] | 0)) $retval$0 = $call; else if (!(HEAP8[$call + 1 >> 0] | 0)) $retval$0 = 0; else {
   if (!(HEAP8[$n + 2 >> 0] | 0)) {
    $retval$0 = _twobyte_strstr($call, $n) | 0;
    break;
   }
   if (!(HEAP8[$call + 2 >> 0] | 0)) $retval$0 = 0; else {
    if (!(HEAP8[$n + 3 >> 0] | 0)) {
     $retval$0 = _threebyte_strstr($call, $n) | 0;
     break;
    }
    if (!(HEAP8[$call + 3 >> 0] | 0)) $retval$0 = 0; else if (!(HEAP8[$n + 4 >> 0] | 0)) {
     $retval$0 = _fourbyte_strstr($call, $n) | 0;
     break;
    } else {
     $retval$0 = _twoway_strstr($call, $n) | 0;
     break;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __Z12init_texturePKc($file) {
 $file = $file | 0;
 var $call = 0, $retval$0 = 0, $texture = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $texture = sp + 4 | 0;
 HEAP32[$texture >> 2] = 0;
 $call = _IMG_Load($file) | 0;
 if (!$call) {
  HEAP32[$vararg_buffer >> 2] = _SDL_GetError() | 0;
  _printf(3986, $vararg_buffer) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  _glGenTextures(1, $texture | 0);
  _glBindTexture(3553, HEAP32[$texture >> 2] | 0);
  _glTexImage2D(3553, 0, 6408, HEAP32[$call + 8 >> 2] | 0, HEAP32[$call + 12 >> 2] | 0, 0, 6408, 5121, HEAP32[$call + 20 >> 2] | 0);
  _glTexParameteri(3553, 10241, 9729);
  _glTexParameteri(3553, 10240, 9729);
  _SDL_FreeSurface($call);
  $retval$0 = HEAP32[$texture >> 2] | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $2 = 0, $5 = 0, $9 = 0, $call1 = 0, $call18 = 0, $cond = 0, $or = 0, $tobool = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 ___unlist_locked_file($f);
 $tobool = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$tobool) {
  $call1 = ___ofl_lock() | 0;
  $2 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($2 | 0) HEAP32[$2 + 56 >> 2] = HEAP32[$$pre >> 2];
  $5 = HEAP32[$$pre >> 2] | 0;
  if ($5 | 0) HEAP32[$5 + 52 >> 2] = $2;
  if ((HEAP32[$call1 >> 2] | 0) == ($f | 0)) HEAP32[$call1 >> 2] = $5;
  ___ofl_unlock();
 }
 $call18 = _fflush($f) | 0;
 $or = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 63]($f) | 0 | $call18;
 $9 = HEAP32[$f + 96 >> 2] | 0;
 if ($9 | 0) _free($9);
 if ($tobool) {
  if ($cond | 0) ___unlockfile($f);
 } else _free($f);
 return $or | 0;
}

function _SDL_GetTicks() {
 var $now = 0, $ticks$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $now = sp;
 do if (!(HEAP32[4017] | 0)) {
  HEAP32[4017] = 1;
  if (!(_clock_gettime(4, 16072) | 0)) {
   HEAP32[4020] = 1;
   break;
  } else {
   _gettimeofday(16084, 0) | 0;
   label = 5;
   break;
  }
 } else label = 5; while (0);
 if ((label | 0) == 5) if (!(HEAP32[4020] | 0)) {
  _gettimeofday($now | 0, 0) | 0;
  $ticks$0 = (((HEAP32[$now + 4 >> 2] | 0) - (HEAP32[4022] | 0) | 0) / 1e3 | 0) + (((HEAP32[$now >> 2] | 0) - (HEAP32[4021] | 0) | 0) * 1e3 | 0) | 0;
  STACKTOP = sp;
  return $ticks$0 | 0;
 }
 _clock_gettime(4, $now | 0) | 0;
 $ticks$0 = (((HEAP32[$now + 4 >> 2] | 0) - (HEAP32[4019] | 0) | 0) / 1e6 | 0) + (((HEAP32[$now >> 2] | 0) - (HEAP32[4018] | 0) | 0) * 1e3 | 0) | 0;
 STACKTOP = sp;
 return $ticks$0 | 0;
}

function _emscripten_GetProcAddress($name_) {
 $name_ = $name_ | 0;
 var $call1 = 0, $call12 = 0, $call16 = 0, $call20 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $ptr$0 = 0;
 $call1 = _malloc((_strlen($name_) | 0) + 1 | 0) | 0;
 _strcpy($call1, $name_) | 0;
 $call3 = _strstr($call1, 8395) | 0;
 if ($call3 | 0) HEAP8[$call3 >> 0] = 0;
 $call4 = _strstr($call1, 8399) | 0;
 if ($call4 | 0) HEAP8[$call4 >> 0] = 0;
 $call8 = _strstr($call1, 8403) | 0;
 if ($call8 | 0) HEAP8[$call8 >> 0] = 0;
 $call12 = _strstr($call1, 8407) | 0;
 if ($call12 | 0) HEAP8[$call12 >> 0] = 0;
 $call16 = _strstr($call1, 8413) | 0;
 if ($call16 | 0) HEAP8[$call16 >> 0] = 0;
 $call20 = _emscripten_webgl1_get_proc_address($call1) | 0;
 if (!$call20) $ptr$0 = __webgl1_match_ext_proc_address_without_suffix($call1) | 0; else $ptr$0 = $call20;
 _free($call1);
 return $ptr$0 | 0;
}

function _SDL_LogGetPriority($category) {
 $category = $category | 0;
 var $entry1$0 = 0, $entry1$010 = 0, $entry1$08 = 0, $retval$0 = 0, label = 0;
 $entry1$08 = HEAP32[3970] | 0;
 L1 : do if (!$entry1$08) label = 6; else {
  $entry1$010 = $entry1$08;
  while (1) {
   if ((HEAP32[$entry1$010 >> 2] | 0) == ($category | 0)) break;
   $entry1$0 = HEAP32[$entry1$010 + 8 >> 2] | 0;
   if (!$entry1$0) {
    label = 6;
    break L1;
   } else $entry1$010 = $entry1$0;
  }
  $retval$0 = HEAP32[$entry1$010 + 4 >> 2] | 0;
 } while (0);
 L7 : do if ((label | 0) == 6) switch ($category | 0) {
 case 8:
  {
   $retval$0 = 1;
   break L7;
   break;
  }
 case 0:
  {
   $retval$0 = 3;
   break L7;
   break;
  }
 case 2:
  {
   $retval$0 = 4;
   break L7;
   break;
  }
 default:
  {
   $retval$0 = 6;
   break L7;
  }
 } while (0);
 return $retval$0 | 0;
}

function _strtox_317($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $10 = 0, $11 = 0, $call = 0.0, $f = 0, $rend = 0, $rpos = 0, $sub$ptr$sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $f = sp;
 _memset($f | 0, 0, 144) | 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 $rend = $f + 8 | 0;
 HEAP32[$rend >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $call = +___floatscan($f, $prec, 1);
 $0 = $f + 120 | 0;
 $sub$ptr$sub = (HEAP32[$rpos >> 2] | 0) - (HEAP32[$rend >> 2] | 0) | 0;
 $10 = _i64Add(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, $sub$ptr$sub | 0, (($sub$ptr$sub | 0) < 0) << 31 >> 31 | 0) | 0;
 $11 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = ($10 | 0) == 0 & ($11 | 0) == 0 ? $s : $s + $10 | 0;
 STACKTOP = sp;
 return +$call;
}

function _SDL_UpdateWindowGrab($window) {
 $window = $window | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $flags11 = 0, $grabbed_window18$pre$phiZ2D = 0, $grabbed_window512 = 0;
 $grabbed_window512 = 312 | 0;
 $0 = HEAP32[$grabbed_window512 >> 2] | 0;
 if (($0 | 0) == 0 | ($0 | 0) == ($window | 0)) {
  $3 = 0;
  $grabbed_window18$pre$phiZ2D = $grabbed_window512;
 } else {
  $flags11 = $0 + 48 | 0;
  HEAP32[$flags11 >> 2] = HEAP32[$flags11 >> 2] & -257;
  $2 = HEAP32[32] | 0;
  if (!$2) {
   $3 = 0;
   $grabbed_window18$pre$phiZ2D = $grabbed_window512;
  } else {
   FUNCTION_TABLE_viii[$2 & 63](0, $0, 0);
   $3 = 0;
   $grabbed_window18$pre$phiZ2D = 312 | 0;
  }
 }
 HEAP32[$grabbed_window18$pre$phiZ2D >> 2] = $window;
 $4 = HEAP32[$3 + 128 >> 2] | 0;
 if (!$4) return;
 FUNCTION_TABLE_viii[$4 & 63]($3, $window, 1);
 return;
}

function _SDL_Generic_GetTLSData() {
 var $_tmp = 0, $call = 0, $entry1$0 = 0, $entry1$07 = 0, $entry1$09 = 0, $storage$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_tmp = sp;
 $call = _SDL_ThreadID() | 0;
 HEAP32[$_tmp >> 2] = 0;
 _SDL_AtomicLock($_tmp);
 _SDL_AtomicUnlock($_tmp);
 $entry1$07 = HEAP32[3967] | 0;
 if (!$entry1$07) {
  $storage$0 = 0;
  STACKTOP = sp;
  return $storage$0 | 0;
 }
 $entry1$09 = $entry1$07;
 while (1) {
  if ((HEAP32[$entry1$09 >> 2] | 0) == ($call | 0)) break;
  $entry1$0 = HEAP32[$entry1$09 + 8 >> 2] | 0;
  if (!$entry1$0) {
   $storage$0 = 0;
   label = 6;
   break;
  } else $entry1$09 = $entry1$0;
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return $storage$0 | 0;
 }
 $storage$0 = HEAP32[$entry1$09 + 4 >> 2] | 0;
 STACKTOP = sp;
 return $storage$0 | 0;
}

function _SDL_DelEventWatch($filter, $userdata) {
 $filter = $filter | 0;
 $userdata = $userdata | 0;
 var $0 = 0, $dec = 0, $i$014 = 0, $inc = 0, label = 0;
 $0 = HEAP32[4012] | 0;
 if (($0 | 0) <= 0) return;
 $i$014 = 0;
 while (1) {
  if ((HEAP32[0 + ($i$014 * 12 | 0) >> 2] | 0) == ($filter | 0)) if ((HEAP32[0 + ($i$014 * 12 | 0) + 4 >> 2] | 0) == ($userdata | 0)) break;
  $inc = $i$014 + 1 | 0;
  if (($inc | 0) < ($0 | 0)) $i$014 = $inc; else {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) return;
 if (HEAP32[4013] | 0) {
  HEAP32[0 + ($i$014 * 12 | 0) + 8 >> 2] = 1;
  HEAP32[4014] = 1;
  return;
 }
 $dec = $0 + -1 | 0;
 HEAP32[4012] = $dec;
 if (($dec | 0) <= ($i$014 | 0)) return;
 _SDL_memmove(0 + ($i$014 * 12 | 0) | 0, 0 + (($i$014 + 1 | 0) * 12 | 0) | 0, ($dec - $i$014 | 0) * 12 | 0) | 0;
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $call12 = 0, $call7 = 0, $mem$1 = 0, $sub = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $call7 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($call7 | 0) {
  $mem$1 = $call7 + 8 | 0;
  return $mem$1 | 0;
 }
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $0 = HEAP32[$oldmem + -4 >> 2] | 0;
 $sub = ($0 & -8) - (($0 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function _SDL_FreeDataQueue($queue) {
 $queue = $queue | 0;
 var $0 = 0, $2 = 0, $packet$addr$05$i = 0, $packet$addr$05$i6 = 0, $packet$addr$05$i$looptemp = 0, $packet$addr$05$i6$looptemp = 0;
 if (!$queue) return;
 $0 = HEAP32[$queue >> 2] | 0;
 if ($0 | 0) {
  $packet$addr$05$i = $0;
  do {
   $packet$addr$05$i$looptemp = $packet$addr$05$i;
   $packet$addr$05$i = HEAP32[$packet$addr$05$i + 8 >> 2] | 0;
   _SDL_free($packet$addr$05$i$looptemp);
  } while (($packet$addr$05$i | 0) != 0);
 }
 $2 = HEAP32[$queue + 8 >> 2] | 0;
 if ($2 | 0) {
  $packet$addr$05$i6 = $2;
  do {
   $packet$addr$05$i6$looptemp = $packet$addr$05$i6;
   $packet$addr$05$i6 = HEAP32[$packet$addr$05$i6 + 8 >> 2] | 0;
   _SDL_free($packet$addr$05$i6$looptemp);
  } while (($packet$addr$05$i6 | 0) != 0);
 }
 _SDL_free($queue);
 return;
}

function _twobyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $2 = 0, $4 = 0, $5 = 0, $arrayidx7 = 0, $conv12 = 0, $h$addr$012 = 0, $hw$0$in13 = 0, $incdec$ptr17 = 0, $or = 0;
 $or = (HEAPU8[$n >> 0] | 0) << 8 | (HEAPU8[$n + 1 >> 0] | 0);
 $arrayidx7 = $h + 1 | 0;
 $2 = HEAP8[$arrayidx7 >> 0] | 0;
 L1 : do if (!($2 << 24 >> 24)) $5 = 0; else {
  $h$addr$012 = $arrayidx7;
  $hw$0$in13 = (HEAPU8[$h >> 0] | 0) << 8 | $2 & 255;
  while (1) {
   $conv12 = $hw$0$in13 & 65535;
   if (($conv12 | 0) == ($or | 0)) break;
   $incdec$ptr17 = $h$addr$012 + 1 | 0;
   $4 = HEAP8[$incdec$ptr17 >> 0] | 0;
   if (!($4 << 24 >> 24)) {
    $5 = 0;
    break L1;
   } else {
    $h$addr$012 = $incdec$ptr17;
    $hw$0$in13 = $conv12 << 8 | $4 & 255;
   }
  }
  $5 = $h$addr$012 + -1 | 0;
 } while (0);
 return $5 | 0;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $14 = 0, $15 = 0, $4 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 8 | 0;
 $ret = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 HEAP32[$vararg_buffer + 8 >> 2] = $0;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  $10 = $ret;
  HEAP32[$10 >> 2] = -1;
  HEAP32[$10 + 4 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 } else {
  $4 = $ret;
  $14 = HEAP32[$4 + 4 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function _stdio_seek($context, $0, $1, $whence) {
 $context = $context | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $12 = 0, $13 = 0, $5 = 0, $6 = 0, $call7 = 0, $call9 = 0, $fp = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $fp = $context + 28 | 0;
 if (!(___fseeko(HEAP32[$fp >> 2] | 0, $0, $1, $whence) | 0)) {
  $5 = ___ftello(HEAP32[$fp >> 2] | 0) | 0;
  $6 = getTempRet0() | 0;
  if (($6 | 0) < 0) {
   $call7 = _SDL_SetError(5657, $vararg_buffer) | 0;
   $12 = (($call7 | 0) < 0) << 31 >> 31;
   $13 = $call7;
  } else {
   $12 = $6;
   $13 = $5;
  }
 } else {
  $call9 = _SDL_Error(3) | 0;
  $12 = (($call9 | 0) < 0) << 31 >> 31;
  $13 = $call9;
 }
 setTempRet0($12 | 0);
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 7]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $4 = 0, $add$ptr = 0, $conv = 0, $mode = 0, $retval$0 = 0, $wbase = 0, $wpos = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$wbase >> 2] = 0;
 HEAP32[$wpos >> 2] = 0;
 $4 = HEAP32[$f >> 2] | 0;
 if (!($4 & 4)) {
  $add$ptr = (HEAP32[$f + 44 >> 2] | 0) + (HEAP32[$f + 48 >> 2] | 0) | 0;
  HEAP32[$f + 8 >> 2] = $add$ptr;
  HEAP32[$f + 4 >> 2] = $add$ptr;
  $retval$0 = $4 << 27 >> 31;
 } else {
  HEAP32[$f >> 2] = $4 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 7]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function _SDL_Delay($ms) {
 $ms = $ms | 0;
 var $div = 0, $elapsed = 0, $tv = 0, $tv_nsec = 0, $tv_nsec4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $elapsed = sp + 8 | 0;
 $tv = sp;
 $div = ($ms >>> 0) / 1e3 | 0;
 HEAP32[$elapsed >> 2] = $div;
 $tv_nsec = $elapsed + 4 | 0;
 HEAP32[$tv_nsec >> 2] = ($ms - ($div * 1e3 | 0) | 0) * 1e6;
 $tv_nsec4 = $tv + 4 | 0;
 while (1) {
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  HEAP32[$tv >> 2] = HEAP32[$elapsed >> 2];
  HEAP32[$tv_nsec4 >> 2] = HEAP32[$tv_nsec >> 2];
  if (!(_nanosleep($tv | 0, $elapsed | 0) | 0)) {
   label = 4;
   break;
  }
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) {
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $$pre = 0, $2 = 0, $offset_to_base$0 = 0, $shr = 0;
 $$pre = HEAP32[$this + 4 >> 2] | 0;
 if (!$adjustedPtr) $offset_to_base$0 = 0; else {
  $shr = $$pre >> 8;
  if (!($$pre & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 }
 $2 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 63]($2, $info, $adjustedPtr + $offset_to_base$0 | 0, ($$pre & 2 | 0) == 0 ? 2 : $path_below);
 return;
}

function _SDL_ShowCursor($toggle) {
 $toggle = $toggle | 0;
 var $$ = 0, $0 = 0, $5 = 0, $cursor$addr$0$i = 0, $tobool2 = 0, $tobool22$i = 0;
 $0 = HEAP32[4007] | 0;
 if (($toggle | 0) <= -1) return $0 | 0;
 $tobool2 = ($toggle | 0) != 0;
 $$ = $tobool2 & 1;
 HEAP32[4007] = $$;
 if (($0 | 0) == ($$ | 0)) return $0 | 0;
 $cursor$addr$0$i = (HEAP32[3982] | 0) == 0 ? HEAP32[4005] | 0 : HEAP32[4006] | 0;
 $5 = HEAP32[3973] | 0;
 $tobool22$i = ($5 | 0) == 0;
 if ((HEAP32[3993] | 0) == 0 & ($tobool2 & ($cursor$addr$0$i | 0) != 0)) {
  if ($tobool22$i) return $0 | 0;
  FUNCTION_TABLE_ii[$5 & 63]($cursor$addr$0$i) | 0;
  return $0 | 0;
 } else {
  if ($tobool22$i) return $0 | 0;
  FUNCTION_TABLE_ii[$5 & 63](0) | 0;
  return $0 | 0;
 }
 return 0;
}

function _SDL_GetHint($name) {
 $name = $name | 0;
 var $call = 0, $hint$0 = 0, $hint$010 = 0, $hint$012 = 0, $retval$0 = 0, label = 0;
 $call = _SDL_getenv($name) | 0;
 $hint$010 = HEAP32[4023] | 0;
 if (!$hint$010) {
  $retval$0 = $call;
  return $retval$0 | 0;
 }
 $hint$012 = $hint$010;
 while (1) {
  if (!(_SDL_strcmp($name, HEAP32[$hint$012 >> 2] | 0) | 0)) break;
  $hint$0 = HEAP32[$hint$012 + 16 >> 2] | 0;
  if (!$hint$0) {
   $retval$0 = $call;
   label = 8;
   break;
  } else $hint$012 = $hint$0;
 }
 if ((label | 0) == 8) return $retval$0 | 0;
 if ($call | 0) if ((HEAP32[$hint$012 + 8 >> 2] | 0) != 2) {
  $retval$0 = $call;
  return $retval$0 | 0;
 }
 $retval$0 = HEAP32[$hint$012 + 4 >> 2] | 0;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 7]($3, $info, $current_ptr + $offset_to_base$0 | 0, ($0 & 2 | 0) == 0 ? 2 : $path_below, $use_strcmp);
 return;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $0 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $spec$select = 0, $spec$select13 = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0;
 $tobool = (_strchr($mode, 43) | 0) == 0;
 $0 = HEAP8[$mode >> 0] | 0;
 $flags$0 = $tobool ? $0 << 24 >> 24 != 114 & 1 : 2;
 $tobool6 = (_strchr($mode, 120) | 0) == 0;
 $spec$select = $tobool6 ? $flags$0 : $flags$0 | 128;
 $tobool10 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $tobool10 ? $spec$select : $spec$select | 524288;
 $spec$select13 = $0 << 24 >> 24 == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = $0 << 24 >> 24 == 119 ? $spec$select13 | 512 : $spec$select13;
 return ($0 << 24 >> 24 == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function _pad_524($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $1 = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c << 24 >> 24 | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $1 = $w - $l | 0;
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $1 & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _strtox($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $f = 0, $rpos = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $rpos = $f + 4 | 0;
 HEAP32[$rpos >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $2 = $f + 8 | 0;
 HEAP32[$2 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0, 0);
 $3 = ___intscan($f, $base, 1, $0, $1) | 0;
 $4 = getTempRet0() | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$rpos >> 2] | 0) + (HEAP32[$f + 120 >> 2] | 0) - (HEAP32[$2 >> 2] | 0));
 setTempRet0($4 | 0);
 STACKTOP = sp;
 return $3 | 0;
}

function _SDL_ToggleDragAndDropSupport() {
 var $call5 = 0, $window$011 = 0, $window$013 = 0, $window$06 = 0;
 if (!0) return;
 if (!(HEAP32[72] | 0)) return;
 if ((_SDL_EventState(4096, -1) | 0) << 24 >> 24 == 1) $call5 = 1; else $call5 = (_SDL_EventState(4097, -1) | 0) << 24 >> 24 == 1 & 1;
 $window$06 = HEAP32[77] | 0;
 if (!$window$06) return;
 FUNCTION_TABLE_vii[HEAP32[0 + 288 >> 2] & 63]($window$06, $call5);
 $window$011 = HEAP32[$window$06 + 152 >> 2] | 0;
 if (!$window$011) return;
 $window$013 = $window$011;
 do {
  FUNCTION_TABLE_vii[HEAP32[0 + 288 >> 2] & 63]($window$013, $call5);
  $window$013 = HEAP32[$window$013 + 152 >> 2] | 0;
 } while (($window$013 | 0) != 0);
 return;
}

function _SDL_CreateRGBSurface($flags, $width, $height, $depth, $Rmask, $Gmask, $Bmask, $Amask) {
 $flags = $flags | 0;
 $width = $width | 0;
 $height = $height | 0;
 $depth = $depth | 0;
 $Rmask = $Rmask | 0;
 $Gmask = $Gmask | 0;
 $Bmask = $Bmask | 0;
 $Amask = $Amask | 0;
 var $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $call = _SDL_MasksToPixelFormatEnum($depth, $Rmask, $Gmask, $Bmask, $Amask) | 0;
 if (!$call) {
  _SDL_SetError(5464, sp) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 } else {
  $retval$0 = _SDL_CreateRGBSurfaceWithFormat(0, $width, $height, 0, $call) | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 return 0;
}

function _IMG_isBMP($src) {
 $src = $src | 0;
 var $1 = 0, $2 = 0, $is_BMP$0 = 0, $magic = 0, $retval$0 = 0, $seek = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $magic = sp;
 if (!$src) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $seek = $src + 4 | 0;
 $1 = FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, 0, 0, 1) | 0;
 $2 = getTempRet0() | 0;
 if (!(FUNCTION_TABLE_iiiii[HEAP32[$src + 8 >> 2] & 7]($src, $magic, 2, 1) | 0)) $is_BMP$0 = 0; else $is_BMP$0 = (_SDL_strncmp($magic, 4136, 2) | 0) == 0 & 1;
 FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($src, $1, $2, 0) | 0;
 getTempRet0() | 0;
 $retval$0 = $is_BMP$0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _EMSCRIPTEN_JoystickGetDeviceInstanceID($device_index) {
 $device_index = $device_index | 0;
 var $device_index$addr$06$i = 0, $item$0$i = 0, $item$0$lcssa$i = 0, $item$04$i = 0, $item$07$i = 0;
 $item$04$i = HEAP32[4699] | 0;
 if (($device_index | 0) > 0) {
  $device_index$addr$06$i = $device_index;
  $item$07$i = $item$04$i;
  while (1) {
   $item$0$i = HEAP32[$item$07$i + 1320 >> 2] | 0;
   if (($device_index$addr$06$i | 0) > 1) {
    $device_index$addr$06$i = $device_index$addr$06$i + -1 | 0;
    $item$07$i = $item$0$i;
   } else {
    $item$0$lcssa$i = $item$0$i;
    break;
   }
  }
 } else $item$0$lcssa$i = $item$04$i;
 return HEAP32[$item$0$lcssa$i + 12 >> 2] | 0;
}

function _IMG_isICO($src) {
 $src = $src | 0;
 var $1 = 0, $2 = 0, $call1$i = 0, $call2$i = 0, $is_ICOCUR$0$i = 0, $retval$0$i = 0, $seek$i = 0;
 if (!$src) {
  $retval$0$i = 0;
  return $retval$0$i | 0;
 }
 $seek$i = $src + 4 | 0;
 $1 = FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, 0, 0, 1) | 0;
 $2 = getTempRet0() | 0;
 $call1$i = _SDL_ReadLE16($src) | 0;
 $call2$i = _SDL_ReadLE16($src) | 0;
 $is_ICOCUR$0$i = (((_SDL_ReadLE16($src) | 0) << 16 >> 16 == 0 | ($call1$i << 16 >> 16 != 0 | $call2$i << 16 >> 16 != 1)) ^ 1) & 1;
 FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, $1, $2, 0) | 0;
 getTempRet0() | 0;
 $retval$0$i = $is_ICOCUR$0$i;
 return $retval$0$i | 0;
}

function _IMG_isCUR($src) {
 $src = $src | 0;
 var $1 = 0, $2 = 0, $call1$i = 0, $call2$i = 0, $is_ICOCUR$0$i = 0, $retval$0$i = 0, $seek$i = 0;
 if (!$src) {
  $retval$0$i = 0;
  return $retval$0$i | 0;
 }
 $seek$i = $src + 4 | 0;
 $1 = FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, 0, 0, 1) | 0;
 $2 = getTempRet0() | 0;
 $call1$i = _SDL_ReadLE16($src) | 0;
 $call2$i = _SDL_ReadLE16($src) | 0;
 $is_ICOCUR$0$i = (((_SDL_ReadLE16($src) | 0) << 16 >> 16 == 0 | ($call1$i << 16 >> 16 != 0 | $call2$i << 16 >> 16 != 2)) ^ 1) & 1;
 FUNCTION_TABLE_iiiii[HEAP32[$seek$i >> 2] & 7]($src, $1, $2, 0) | 0;
 getTempRet0() | 0;
 $retval$0$i = $is_ICOCUR$0$i;
 return $retval$0$i | 0;
}

function _EMSCRIPTEN_JoystickGetDeviceName($device_index) {
 $device_index = $device_index | 0;
 var $device_index$addr$06$i = 0, $item$0$i = 0, $item$0$lcssa$i = 0, $item$04$i = 0, $item$07$i = 0;
 $item$04$i = HEAP32[4699] | 0;
 if (($device_index | 0) > 0) {
  $device_index$addr$06$i = $device_index;
  $item$07$i = $item$04$i;
  while (1) {
   $item$0$i = HEAP32[$item$07$i + 1320 >> 2] | 0;
   if (($device_index$addr$06$i | 0) > 1) {
    $device_index$addr$06$i = $device_index$addr$06$i + -1 | 0;
    $item$07$i = $item$0$i;
   } else {
    $item$0$lcssa$i = $item$0$i;
    break;
   }
  }
 } else $item$0$lcssa$i = $item$04$i;
 return HEAP32[$item$0$lcssa$i + 4 >> 2] | 0;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $call1 = 0, $call113 = 0, $cond9 = 0, $mul = 0, $phitmp = 0, $spec$select = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fwritex($src, $mul, $f) | 0;
  if ($phitmp) $call113 = $call1; else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else $call113 = ___fwritex($src, $mul, $f) | 0;
 if (($call113 | 0) == ($mul | 0)) $cond9 = $spec$select; else $cond9 = ($call113 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function _SDL_StopTextInput() {
 var $0 = 0, $2 = 0, $window$0$i = 0, $window$04$i = 0, $window$06$i = 0;
 L1 : do if (0) {
  $0 = HEAP32[61] | 0;
  if ($0 | 0) {
   FUNCTION_TABLE_vi[$0 & 63](0);
   break;
  }
  $window$04$i = HEAP32[77] | 0;
  if ($window$04$i | 0) {
   $window$06$i = $window$04$i;
   while (1) {
    if (HEAP32[$window$06$i + 48 >> 2] & 512 | 0) break;
    $window$0$i = HEAP32[$window$06$i + 152 >> 2] | 0;
    if (!$window$0$i) break L1; else $window$06$i = $window$0$i;
   }
   $2 = HEAP32[65] | 0;
   if ($2 | 0) FUNCTION_TABLE_vii[$2 & 63](0, $window$06$i);
  }
 } while (0);
 _SDL_EventState(771, 0) | 0;
 _SDL_EventState(770, 0) | 0;
 return;
}

function _UpdateEventsForDeviceRemoval_403() {
 var $0 = 0, $call = 0, $call3 = 0, $i$013 = 0, $which = 0, sp = 0;
 sp = STACKTOP;
 $call = _SDL_PeepEvents(0, 0, 1, 1541, 1541) | 0;
 if (($call | 0) < 1) {
  STACKTOP = sp;
  return;
 }
 $0 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($call * 56 | 0) | 0) + 15 & -16) | 0;
 $call3 = _SDL_PeepEvents($0, $call, 2, 1541, 1541) | 0;
 if (($call3 | 0) > 0) {
  $i$013 = 0;
  do {
   $which = $0 + ($i$013 * 56 | 0) + 8 | 0;
   HEAP32[$which >> 2] = (HEAP32[$which >> 2] | 0) + -1;
   $i$013 = $i$013 + 1 | 0;
  } while (($i$013 | 0) != ($call3 | 0));
 }
 _SDL_PeepEvents($0, $call3, 0, 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_StartTextInput() {
 var $$pr = 0, $2 = 0, $window$0$i = 0, $window$06$i = 0, label = 0;
 _SDL_EventState(771, 1) | 0;
 _SDL_EventState(770, 1) | 0;
 if (!0) return;
 $window$06$i = HEAP32[77] | 0;
 while (1) {
  if (HEAP32[$window$06$i + 48 >> 2] & 512 | 0) {
   label = 5;
   break;
  }
  $window$0$i = HEAP32[$window$06$i + 152 >> 2] | 0;
  if (!$window$0$i) {
   $$pr = 0;
   break;
  } else $window$06$i = $window$0$i;
 }
 if ((label | 0) == 5) {
  FUNCTION_TABLE_vii[HEAP32[0 + 256 >> 2] & 63](0, $window$06$i);
  $$pr = 0;
 }
 if (!$$pr) return;
 $2 = HEAP32[$$pr + 240 >> 2] | 0;
 if (!$2) return;
 FUNCTION_TABLE_vi[$2 & 63]($$pr);
 return;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0, totalMemory = 0;
 totalMemory = _emscripten_get_heap_size() | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory(newDynamicTop | 0) | 0;
  ___setErrNo(12);
  return -1;
 }
 if ((newDynamicTop | 0) > (totalMemory | 0)) if (_emscripten_resize_heap(newDynamicTop | 0) | 0) {} else {
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 return oldDynamicTop | 0;
}

function _UpdateEventsForDeviceRemoval() {
 var $0 = 0, $call = 0, $call3 = 0, $i$013 = 0, $which = 0, sp = 0;
 sp = STACKTOP;
 $call = _SDL_PeepEvents(0, 0, 1, 1619, 1619) | 0;
 if (($call | 0) < 1) {
  STACKTOP = sp;
  return;
 }
 $0 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($call * 56 | 0) | 0) + 15 & -16) | 0;
 $call3 = _SDL_PeepEvents($0, $call, 2, 1619, 1619) | 0;
 if (($call3 | 0) > 0) {
  $i$013 = 0;
  do {
   $which = $0 + ($i$013 * 56 | 0) + 8 | 0;
   HEAP32[$which >> 2] = (HEAP32[$which >> 2] | 0) + -1;
   $i$013 = $i$013 + 1 | 0;
  } while (($i$013 | 0) != ($call3 | 0));
 }
 _SDL_PeepEvents($0, $call3, 0, 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_MinimizeWindow($window) {
 $window = $window | 0;
 var $2 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  STACKTOP = sp;
  return;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  if (HEAP32[$window + 48 >> 2] & 64 | 0) {
   STACKTOP = sp;
   return;
  }
  _SDL_UpdateFullscreenMode($window, 0) | 0;
  $2 = HEAP32[25] | 0;
  if (!$2) {
   STACKTOP = sp;
   return;
  }
  FUNCTION_TABLE_vii[$2 & 63](0, $window);
  STACKTOP = sp;
  return;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 63]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[2384 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function _SDL_GameControllerQuitMappings() {
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP32[4705] | 0;
 if ($0 | 0) {
  $1 = $0;
  do {
   HEAP32[4705] = HEAP32[$1 + 28 >> 2];
   _SDL_free(HEAP32[$1 + 16 >> 2] | 0);
   _SDL_free(HEAP32[$1 + 20 >> 2] | 0);
   _SDL_free($1);
   $1 = HEAP32[4705] | 0;
  } while (($1 | 0) != 0);
 }
 _SDL_DelEventWatch(8, 0);
 _SDL_DelHintCallback(5917, 8, 0);
 _SDL_DelHintCallback(5951, 9, 0);
 $6 = HEAP32[4709] | 0;
 if ($6 | 0) {
  _SDL_free($6);
  _SDL_memset(18828, 0, 12) | 0;
 }
 $7 = HEAP32[4712] | 0;
 if (!$7) return;
 _SDL_free($7);
 _SDL_memset(18840, 0, 12) | 0;
 return;
}

function ___shlim($f, $0, $1) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $sub$ptr$sub = 0;
 $2 = $f + 112 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $6 = HEAP32[$f + 8 >> 2] | 0;
 $7 = HEAP32[$f + 4 >> 2] | 0;
 $sub$ptr$sub = $6 - $7 | 0;
 $9 = (($sub$ptr$sub | 0) < 0) << 31 >> 31;
 $10 = $f + 120 | 0;
 HEAP32[$10 >> 2] = $sub$ptr$sub;
 HEAP32[$10 + 4 >> 2] = $9;
 if ((($0 | 0) != 0 | ($1 | 0) != 0) & (($9 | 0) > ($1 | 0) | ($9 | 0) == ($1 | 0) & $sub$ptr$sub >>> 0 > $0 >>> 0)) HEAP32[$f + 104 >> 2] = $7 + $0; else HEAP32[$f + 104 >> 2] = $6;
 return;
}

function _EMSCRIPTEN_JoystickQuit() {
 var $$in79 = 0, $0 = 0, $$in79$looptemp = 0;
 $0 = HEAP32[4699] | 0;
 if ($0 | 0) {
  $$in79 = $0;
  do {
   $$in79$looptemp = $$in79;
   $$in79 = HEAP32[$$in79 + 1320 >> 2] | 0;
   _SDL_free(HEAP32[$$in79$looptemp + 8 >> 2] | 0);
   _SDL_free(HEAP32[$$in79$looptemp + 4 >> 2] | 0);
   _SDL_free($$in79$looptemp);
  } while (($$in79 | 0) != 0);
 }
 HEAP32[4700] = 0;
 HEAP32[4699] = 0;
 HEAP32[4701] = 0;
 HEAP32[4702] = 0;
 _emscripten_set_gamepadconnected_callback_on_thread(0, 0, 0, 2) | 0;
 _emscripten_set_gamepaddisconnected_callback_on_thread(0, 0, 0, 2) | 0;
 return;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $cond = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0;
 L1 : do if (!$n) $cond = 0; else {
  $l$012 = $vl;
  $n$addr$011 = $n;
  $r$013 = $vr;
  while (1) {
   $0 = HEAP8[$l$012 >> 0] | 0;
   $1 = HEAP8[$r$013 >> 0] | 0;
   if ($0 << 24 >> 24 != $1 << 24 >> 24) break;
   $n$addr$011 = $n$addr$011 + -1 | 0;
   if (!$n$addr$011) {
    $cond = 0;
    break L1;
   } else {
    $l$012 = $l$012 + 1 | 0;
    $r$013 = $r$013 + 1 | 0;
   }
  }
  $cond = ($0 & 255) - ($1 & 255) | 0;
 } while (0);
 return $cond | 0;
}

function _SDL_RestoreWindow($window) {
 $window = $window | 0;
 var $2 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  STACKTOP = sp;
  return;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  if (!(HEAP32[$window + 48 >> 2] & 192)) {
   STACKTOP = sp;
   return;
  }
  $2 = HEAP32[26] | 0;
  if (!$2) {
   STACKTOP = sp;
   return;
  }
  FUNCTION_TABLE_vii[$2 & 63](0, $window);
  STACKTOP = sp;
  return;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_GetWindowSize($window, $w, $h) {
 $window = $window | 0;
 $w = $w | 0;
 $h = $h | 0;
 var $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  STACKTOP = sp;
  return;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  if ($w | 0) HEAP32[$w >> 2] = HEAP32[$window + 24 >> 2];
  if (!$h) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$h >> 2] = HEAP32[$window + 28 >> 2];
  STACKTOP = sp;
  return;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 STACKTOP = sp;
 return;
}

function _stdio_size($context) {
 $context = $context | 0;
 var $1 = 0, $10 = 0, $2 = 0, $5 = 0, $6 = 0, $9 = 0, $seek = 0;
 $seek = $context + 4 | 0;
 $1 = FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($context, 0, 0, 1) | 0;
 $2 = getTempRet0() | 0;
 if (($2 | 0) < 0) {
  $10 = -1;
  $9 = -1;
  setTempRet0($9 | 0);
  return $10 | 0;
 }
 $5 = FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($context, 0, 0, 2) | 0;
 $6 = getTempRet0() | 0;
 FUNCTION_TABLE_iiiii[HEAP32[$seek >> 2] & 7]($context, $1, $2, 0) | 0;
 getTempRet0() | 0;
 $10 = $5;
 $9 = $6;
 setTempRet0($9 | 0);
 return $10 | 0;
}

function _puts($s) {
 $s = $s | 0;
 var $0 = 0, $3 = 0, $5 = 0, $cond = 0, $wpos = 0;
 $0 = HEAP32[839] | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $cond = ___lockfile($0) | 0; else $cond = 0;
 do if ((_fputs($s, $0) | 0) < 0) $5 = -1; else {
  if ((HEAP8[$0 + 75 >> 0] | 0) != 10) {
   $wpos = $0 + 20 | 0;
   $3 = HEAP32[$wpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$0 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos >> 2] = $3 + 1;
    HEAP8[$3 >> 0] = 10;
    $5 = 0;
    break;
   }
  }
  $5 = (___overflow($0, 10) | 0) >> 31;
 } while (0);
 if ($cond | 0) ___unlockfile($0);
 return $5 | 0;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = getTempRet0() | 0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function _SDL_ClearHints() {
 var $$in1012 = 0, $0 = 0, $1 = 0, $5 = 0, $$in1012$looptemp = 0;
 $0 = HEAP32[4023] | 0;
 if (!$0) return;
 $1 = $0;
 do {
  HEAP32[4023] = HEAP32[$1 + 16 >> 2];
  _SDL_free(HEAP32[$1 >> 2] | 0);
  _SDL_free(HEAP32[$1 + 4 >> 2] | 0);
  $5 = HEAP32[$1 + 12 >> 2] | 0;
  if ($5 | 0) {
   $$in1012 = $5;
   do {
    $$in1012$looptemp = $$in1012;
    $$in1012 = HEAP32[$$in1012 + 8 >> 2] | 0;
    _SDL_free($$in1012$looptemp);
   } while (($$in1012 | 0) != 0);
  }
  _SDL_free($1);
  $1 = HEAP32[4023] | 0;
 } while (($1 | 0) != 0);
 return;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $call3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 2;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $call3 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $call3 | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $call = 0, $mul = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $mul = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($mul >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $mul : -1; else $req$0 = $mul;
 }
 $call = _malloc($req$0) | 0;
 if (!$call) return $call | 0;
 if (!(HEAP32[$call + -4 >> 2] & 3)) return $call | 0;
 _memset($call | 0, 0, $req$0 | 0) | 0;
 return $call | 0;
}

function _SDL_GetFocusWindow() {
 var $retval$0 = 0, $window$04 = 0, $window$06 = 0, label = 0;
 if (!0) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $window$04 = HEAP32[77] | 0;
 if (!$window$04) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $window$06 = $window$04;
 while (1) {
  if (HEAP32[$window$06 + 48 >> 2] & 512 | 0) {
   $retval$0 = $window$06;
   label = 6;
   break;
  }
  $window$06 = HEAP32[$window$06 + 152 >> 2] | 0;
  if (!$window$06) {
   $retval$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) return $retval$0 | 0;
 return 0;
}

function _SDL_FreePalette($palette) {
 $palette = $palette | 0;
 var $0 = 0, $refcount = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!$palette) {
  HEAP32[$vararg_buffer >> 2] = 5485;
  _SDL_SetError(5998, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
 $refcount = $palette + 12 | 0;
 $0 = HEAP32[$refcount >> 2] | 0;
 HEAP32[$refcount >> 2] = $0 + -1;
 if (($0 | 0) > 1) {
  STACKTOP = sp;
  return;
 }
 _SDL_free(HEAP32[$palette + 4 >> 2] | 0);
 _SDL_free($palette);
 STACKTOP = sp;
 return;
}

function _SDL_GetWindowFlags($window) {
 $window = $window | 0;
 var $retval$0 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 if (!0) {
  _SDL_SetError(4403, sp) | 0;
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if ($window | 0) if ((HEAP32[$window >> 2] | 0) == (316 | 0)) {
  $retval$0 = HEAP32[$window + 48 >> 2] | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 _SDL_SetError(4444, $vararg_buffer1) | 0;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $path_dynamic_ptr_to_static_ptr = 0;
 if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
 }
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _SDL_Error($code) {
 $code = $code | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 switch ($code | 0) {
 case 0:
  {
   _SDL_SetError(4865, sp) | 0;
   break;
  }
 case 1:
  {
   _SDL_SetError(4879, sp + 8 | 0) | 0;
   break;
  }
 case 2:
  {
   _SDL_SetError(4909, sp + 16 | 0) | 0;
   break;
  }
 case 3:
  {
   _SDL_SetError(4937, sp + 24 | 0) | 0;
   break;
  }
 case 4:
  {
   _SDL_SetError(4965, sp + 32 | 0) | 0;
   break;
  }
 default:
  _SDL_SetError(4997, sp + 40 | 0) | 0;
 }
 STACKTOP = sp;
 return -1;
}

function _SDL_SendAppEvent($eventType) {
 $eventType = $eventType | 0;
 var $0 = 0, $event = 0, $posted$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 $0 = HEAP32[12704 + (($eventType >>> 8 & 255) << 2) >> 2] | 0;
 if ($0 | 0) if (HEAP32[$0 + (($eventType >>> 5 & 7) << 2) >> 2] & 1 << ($eventType & 31) | 0) {
  $posted$0 = 0;
  STACKTOP = sp;
  return $posted$0 | 0;
 }
 HEAP32[$event >> 2] = $eventType;
 $posted$0 = (_SDL_PushEvent($event) | 0) > 0 & 1;
 STACKTOP = sp;
 return $posted$0 | 0;
}

function _SDL_PrivateJoystickAdded($device_instance) {
 $device_instance = $device_instance | 0;
 var $call = 0, $event = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $event = sp;
 $call = _SDL_JoystickGetDeviceIndexFromInstanceID($device_instance) | 0;
 if (($call | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$event >> 2] = 1541;
 if ((_SDL_EventState(1541, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$event + 8 >> 2] = $call;
 _SDL_PushEvent($event) | 0;
 STACKTOP = sp;
 return;
}

function _main() {
 var $texture$addr$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $texture$addr$i = sp;
 if (__Z4initP8UserData(15640) | 0) {
  _SDL_StartTextInput();
  _emscripten_set_main_loop(3, 0, 0);
  _SDL_StopTextInput();
  HEAP32[$texture$addr$i >> 2] = HEAP32[3915];
  _glDeleteTextures(1, $texture$addr$i | 0);
  _SDL_DestroyWindow(0);
  _SDL_Quit();
  STACKTOP = sp;
  return 0;
 } else {
  _puts(3999) | 0;
  _SDL_DestroyWindow(0);
  _SDL_Quit();
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _SDL_FreeBlitMap($map) {
 $map = $map | 0;
 var $0 = 0, $1 = 0, $refcount$i = 0, $table$i = 0;
 if (!$map) return;
 $0 = HEAP32[$map >> 2] | 0;
 if ($0 | 0) {
  $refcount$i = $0 + 56 | 0;
  $1 = HEAP32[$refcount$i >> 2] | 0;
  HEAP32[$refcount$i >> 2] = $1 + -1;
  if (($1 | 0) < 2) _SDL_FreeSurface($0);
 }
 HEAP32[$map >> 2] = 0;
 HEAP32[$map + 84 >> 2] = 0;
 HEAP32[$map + 80 >> 2] = 0;
 $table$i = $map + 64 | 0;
 _SDL_free(HEAP32[$table$i >> 2] | 0);
 HEAP32[$table$i >> 2] = 0;
 _SDL_free($map);
 return;
}

function _shl($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx1 = 0, $n$addr$0 = 0;
 $arrayidx1 = $p + 4 | 0;
 if ($n >>> 0 > 31) {
  $0 = HEAP32[$p >> 2] | 0;
  HEAP32[$arrayidx1 >> 2] = $0;
  HEAP32[$p >> 2] = 0;
  $1 = $0;
  $2 = 0;
  $n$addr$0 = $n + -32 | 0;
 } else {
  $1 = HEAP32[$arrayidx1 >> 2] | 0;
  $2 = HEAP32[$p >> 2] | 0;
  $n$addr$0 = $n;
 }
 HEAP32[$arrayidx1 >> 2] = $2 >>> (32 - $n$addr$0 | 0) | $1 << $n$addr$0;
 HEAP32[$p >> 2] = $2 << $n$addr$0;
 return;
}

function _getint($s) {
 $s = $s | 0;
 var $2 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0;
 if (!(_isdigit(HEAP8[HEAP32[$s >> 2] >> 0] | 0) | 0)) $i$0$lcssa = 0; else {
  $i$07 = 0;
  while (1) {
   $2 = HEAP32[$s >> 2] | 0;
   $add = ($i$07 * 10 | 0) + -48 + (HEAP8[$2 >> 0] | 0) | 0;
   $incdec$ptr = $2 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   if (!(_isdigit(HEAP8[$incdec$ptr >> 0] | 0) | 0)) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 }
 return $i$0$lcssa | 0;
}

function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $call1 = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() | 0;
 $call1 = __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() | 0;
 __embind_register_memory_view($call | 0, $call1 | 0, HEAP32[$name$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _shr($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $n$addr$0 = 0;
 $arrayidx = $p + 4 | 0;
 if ($n >>> 0 > 31) {
  $0 = HEAP32[$arrayidx >> 2] | 0;
  HEAP32[$p >> 2] = $0;
  HEAP32[$arrayidx >> 2] = 0;
  $1 = $0;
  $2 = 0;
  $n$addr$0 = $n + -32 | 0;
 } else {
  $1 = HEAP32[$p >> 2] | 0;
  $2 = HEAP32[$arrayidx >> 2] | 0;
  $n$addr$0 = $n;
 }
 HEAP32[$p >> 2] = $2 << 32 - $n$addr$0 | $1 >>> $n$addr$0;
 HEAP32[$arrayidx >> 2] = $2 >>> $n$addr$0;
 return;
}

function _SDL_WarpMouseInWindow($window, $x, $y) {
 $window = $window | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $1 = 0, $2 = 0, $spec$select = 0;
 $spec$select = ($window | 0) == 0 ? HEAP32[3982] | 0 : $window;
 if (!$spec$select) return;
 $1 = HEAP32[3976] | 0;
 if ($1 | 0) {
  FUNCTION_TABLE_viii[$1 & 63]($spec$select, $x, $y);
  return;
 }
 $2 = HEAP32[3981] | 0;
 if (!(_SDL_UpdateMouseFocus($spec$select, $x, $y) | 0)) return;
 _SDL_PrivateSendMouseMotion($spec$select, $2, 0, $x, $y) | 0;
 return;
}

function _SDL_LogOutput($userdata, $category, $priority, $message) {
 $userdata = $userdata | 0;
 $category = $category | 0;
 $priority = $priority | 0;
 $message = $message | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[841] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[1552 + ($priority << 2) >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $message;
 _fprintf($0, 4815, $vararg_buffer) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_InvalidateMap($map) {
 $map = $map | 0;
 var $0 = 0, $1 = 0, $refcount = 0, $table = 0;
 if (!$map) return;
 $0 = HEAP32[$map >> 2] | 0;
 if ($0 | 0) {
  $refcount = $0 + 56 | 0;
  $1 = HEAP32[$refcount >> 2] | 0;
  HEAP32[$refcount >> 2] = $1 + -1;
  if (($1 | 0) < 2) _SDL_FreeSurface($0);
 }
 HEAP32[$map >> 2] = 0;
 HEAP32[$map + 84 >> 2] = 0;
 HEAP32[$map + 80 >> 2] = 0;
 $table = $map + 64 | 0;
 _SDL_free(HEAP32[$table >> 2] | 0);
 HEAP32[$table >> 2] = 0;
 return;
}

function _SDL_AtomicLock($lock) {
 $lock = $lock | 0;
 var $0 = 0, $1 = 0, $iterations$04 = 0, $iterations$1 = 0;
 $0 = HEAP32[$lock >> 2] | 0;
 HEAP32[$lock >> 2] = 1;
 if (!$0) return;
 $iterations$04 = 0;
 while (1) {
  if (($iterations$04 | 0) < 32) $iterations$1 = $iterations$04 + 1 | 0; else {
   _SDL_Delay(0);
   $iterations$1 = $iterations$04;
  }
  $1 = HEAP32[$lock >> 2] | 0;
  HEAP32[$lock >> 2] = 1;
  if (!$1) break; else $iterations$04 = $iterations$1;
 }
 return;
}

function _SDL_JoystickQuit() {
 var $0 = 0, $1 = 0;
 if (0) {}
 $0 = HEAP32[4704] | 0;
 if ($0 | 0) {
  $1 = $0;
  do {
   HEAP32[$1 + 88 >> 2] = 1;
   _SDL_JoystickClose($1);
   $1 = HEAP32[4704] | 0;
  } while (($1 | 0) != 0);
 }
 FUNCTION_TABLE_v[HEAP32[3352 >> 2] & 7]();
 if (0) {}
 _SDL_QuitSubSystem(16384);
 _SDL_DelHintCallback(5880, 7, 0);
 if (!0) {
  _SDL_GameControllerQuitMappings();
  return;
 }
 _SDL_DestroyMutex(0);
 _SDL_GameControllerQuitMappings();
 return;
}

function _SDL_QuitQuit() {
 var $action$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $action$i = sp;
 _sigaction(2, 0, $action$i | 0) | 0;
 if ((HEAP32[$action$i >> 2] | 0) == 13) {
  HEAP32[$action$i >> 2] = 0;
  _sigaction(2, $action$i | 0, 0) | 0;
 }
 _sigaction(15, 0, $action$i | 0) | 0;
 if ((HEAP32[$action$i >> 2] | 0) != 13) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$action$i >> 2] = 0;
 _sigaction(15, $action$i | 0, 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (__ZL8is_equalPKSt9type_infoS1_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function ___ftello($f) {
 $f = $f | 0;
 var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $3 = ___ftello_unlocked($f) | 0;
  $4 = getTempRet0() | 0;
  if ($phitmp) {
   $5 = $4;
   $6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;
   $6 = $3;
  }
 } else {
  $1 = ___ftello_unlocked($f) | 0;
  $5 = getTempRet0() | 0;
  $6 = $1;
 }
 setTempRet0($5 | 0);
 return $6 | 0;
}

function _a_ctz_l($x) {
 $x = $x | 0;
 var $inc = 0, $nTrailingZeros$07 = 0, $retval$0 = 0, $x$addr$06 = 0;
 if (!$x) $retval$0 = 32; else if (!($x & 1)) {
  $nTrailingZeros$07 = 0;
  $x$addr$06 = $x;
  while (1) {
   $inc = $nTrailingZeros$07 + 1 | 0;
   if (!($x$addr$06 & 2)) {
    $nTrailingZeros$07 = $inc;
    $x$addr$06 = $x$addr$06 >>> 1;
   } else {
    $retval$0 = $inc;
    break;
   }
  }
 } else $retval$0 = 0;
 return $retval$0 | 0;
}

function ___fseeko($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $4 = 0, $call17 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $4 = ___fseeko_unlocked($f, $0, $1, $whence) | 0;
  if ($phitmp) $call17 = $4; else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else $call17 = ___fseeko_unlocked($f, $0, $1, $whence) | 0;
 return $call17 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $0 = 0, $dec8$in = 0, $retval$0 = 0;
 L1 : do if (!$n) $retval$0 = 0; else {
  $0 = $c & 255;
  $dec8$in = $n;
  while (1) {
   $dec8$in = $dec8$in + -1 | 0;
   if ((HEAP8[$m + $dec8$in >> 0] | 0) == $0 << 24 >> 24) break;
   if (!$dec8$in) {
    $retval$0 = 0;
    break L1;
   }
  }
  $retval$0 = $m + $dec8$in | 0;
 } while (0);
 return $retval$0 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $spec$select = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $spec$select = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $spec$select | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $spec$select;
 return $l | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIsE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 2, -32768 << 16 >> 16 | 0, 32767 << 16 >> 16 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIcE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, -128 << 24 >> 24 | 0, 127 << 24 >> 24 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIaE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, -128 << 24 >> 24 | 0, 127 << 24 >> 24 | 0);
 STACKTOP = sp;
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _SDL_FreeAudioStream($stream) {
 $stream = $stream | 0;
 var $0 = 0;
 if (!$stream) return;
 $0 = HEAP32[$stream + 260 >> 2] | 0;
 if ($0 | 0) FUNCTION_TABLE_vi[$0 & 63]($stream);
 _SDL_FreeDataQueue(HEAP32[$stream + 168 >> 2] | 0);
 _SDL_free(HEAP32[$stream + 176 >> 2] | 0);
 _SDL_free(HEAP32[$stream + 188 >> 2] | 0);
 _SDL_free(HEAP32[$stream + 244 >> 2] | 0);
 _SDL_free($stream);
 return;
}

function ___unlist_locked_file($f) {
 $f = $f | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $4 = 0;
 if (HEAP32[$f + 68 >> 2] | 0) {
  $1 = HEAP32[$f + 132 >> 2] | 0;
  $$pre = $f + 128 | 0;
  if ($1 | 0) HEAP32[$1 + 128 >> 2] = HEAP32[$$pre >> 2];
  $4 = HEAP32[$$pre >> 2] | 0;
  if (!$4) $$sink = (___pthread_self_589() | 0) + 232 | 0; else $$sink = $4 + 132 | 0;
  HEAP32[$$sink >> 2] = $1;
 }
 return;
}

function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIlE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, -2147483648, 2147483647);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIiE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, -2147483648, 2147483647);
 STACKTOP = sp;
 return;
}

function _ferror($f) {
 $f = $f | 0;
 var $and$lobit = 0, $and$lobit9 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $and$lobit = (HEAP32[$f >> 2] | 0) >>> 5 & 1;
  if ($phitmp) $and$lobit9 = $and$lobit; else {
   ___unlockfile($f);
   $and$lobit9 = $and$lobit;
  }
 } else $and$lobit9 = (HEAP32[$f >> 2] | 0) >>> 5 & 1;
 return $and$lobit9 | 0;
}

function _SDL_LockSurface($surface) {
 $surface = $surface | 0;
 var $0 = 0, $3 = 0, $locked = 0;
 $locked = $surface + 28 | 0;
 $0 = HEAP32[$locked >> 2] | 0;
 if (!$0) if (!(HEAP32[$surface >> 2] & 2)) $3 = 0; else {
  _SDL_UnRLESurface($surface, 1);
  HEAP32[$surface >> 2] = HEAP32[$surface >> 2] | 2;
  $3 = HEAP32[$locked >> 2] | 0;
 } else $3 = $0;
 HEAP32[$locked >> 2] = $3 + 1;
 return 0;
}

function _stdio_read($context, $ptr, $size, $maxnum) {
 $context = $context | 0;
 $ptr = $ptr | 0;
 $size = $size | 0;
 $maxnum = $maxnum | 0;
 var $call = 0, $fp = 0;
 $fp = $context + 28 | 0;
 $call = _fread($ptr, $size, $maxnum, HEAP32[$fp >> 2] | 0) | 0;
 if ($call | 0) return $call | 0;
 if (!(_ferror(HEAP32[$fp >> 2] | 0) | 0)) return $call | 0;
 _SDL_Error(1) | 0;
 return $call | 0;
}

function _SDL_JoystickAllowBackgroundEventsChanged($userdata, $name, $oldValue, $hint) {
 $userdata = $userdata | 0;
 $name = $name | 0;
 $oldValue = $oldValue | 0;
 $hint = $hint | 0;
 var $storemerge = 0, label = 0;
 if (!$hint) label = 3; else if ((HEAP8[$hint >> 0] | 0) == 49) $storemerge = 1; else label = 3;
 if ((label | 0) == 3) $storemerge = 0;
 HEAP32[4703] = $storemerge;
 return;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 var $call1 = 0, $this$addr$i = 0, $ti$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $this$addr$i = sp + 4 | 0;
 $ti$addr = sp;
 HEAP32[$ti$addr >> 2] = $ti;
 HEAP32[$this$addr$i >> 2] = HEAP32[$ti$addr >> 2];
 $call1 = ___strdup(HEAP32[(HEAP32[$this$addr$i >> 2] | 0) + 4 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function _stdio_close($context) {
 $context = $context | 0;
 var $status$0 = 0, $status$1 = 0;
 if (!$context) {
  $status$1 = 0;
  return $status$1 | 0;
 }
 if (!(HEAP32[$context + 24 >> 2] | 0)) $status$0 = 0; else if (!(_fclose(HEAP32[$context + 28 >> 2] | 0) | 0)) $status$0 = 0; else $status$0 = _SDL_Error(2) | 0;
 _SDL_free($context);
 $status$1 = $status$0;
 return $status$1 | 0;
}

function _RemovePendingSizeChangedAndResizedEvents($userdata, $event) {
 $userdata = $userdata | 0;
 $event = $event | 0;
 var $retval$0 = 0;
 if ((HEAP32[$event >> 2] | 0) == 512) if (((HEAP8[$event + 12 >> 0] | 0) + -5 & 255) < 2) if ((HEAP32[$event + 8 >> 2] | 0) == (HEAP32[$userdata + 8 >> 2] | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $retval$0 = 1;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_116register_integerItEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDItE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 2, 0, 65535);
 STACKTOP = sp;
 return;
}

function _SDL_strlcpy($dst, $src, $maxlen) {
 $dst = $dst | 0;
 $src = $src | 0;
 $maxlen = $maxlen | 0;
 var $call$i = 0, $cond = 0, $sub = 0;
 $call$i = _strlen($src) | 0;
 $sub = $maxlen + -1 | 0;
 $cond = $call$i >>> 0 < $sub >>> 0 ? $call$i : $sub;
 if (!$maxlen) return $call$i | 0;
 _memcpy($dst | 0, $src | 0, $cond | 0) | 0;
 HEAP8[$dst + $cond >> 0] = 0;
 return $call$i | 0;
}

function _SDL_snprintf($text, $maxlen, $fmt, $varargs) {
 $text = $text | 0;
 $maxlen = $maxlen | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call$i = _vsnprintf($text, $maxlen, ($fmt | 0) == 0 ? 19444 : $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call$i | 0;
}

function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIhE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 1, 0, 255);
 STACKTOP = sp;
 return;
}

function _stdio_write($context, $ptr, $size, $num) {
 $context = $context | 0;
 $ptr = $ptr | 0;
 $size = $size | 0;
 $num = $num | 0;
 var $call = 0, $fp = 0;
 $fp = $context + 28 | 0;
 $call = _fwrite($ptr, $size, $num, HEAP32[$fp >> 2] | 0) | 0;
 if ($call | 0) return $call | 0;
 if (!(_ferror(HEAP32[$fp >> 2] | 0) | 0)) return $call | 0;
 _SDL_Error(2) | 0;
 return $call | 0;
}

function __ZN12_GLOBAL__N_116register_integerImEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDImE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, 0, -1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIjE3getEv() | 0;
 __embind_register_integer($call | 0, HEAP32[$name$addr >> 2] | 0, 4, 0, -1);
 STACKTOP = sp;
 return;
}

function _SDL_TLSGet($id) {
 $id = $id | 0;
 var $call = 0, $retval$0 = 0;
 $call = _SDL_SYS_GetTLSData() | 0;
 if (($id | 0) == 0 | ($call | 0) == 0) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 if ((HEAP32[$call >> 2] | 0) >>> 0 < $id >>> 0) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $retval$0 = HEAP32[$call + 4 + ($id + -1 << 3) >> 2] | 0;
 return $retval$0 | 0;
}

function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIfE3getEv() | 0;
 __embind_register_float($call | 0, HEAP32[$name$addr >> 2] | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($name) {
 $name = $name | 0;
 var $call = 0, $name$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $name$addr = sp;
 HEAP32[$name$addr >> 2] = $name;
 $call = __ZN10emscripten8internal6TypeIDIdE3getEv() | 0;
 __embind_register_float($call | 0, HEAP32[$name$addr >> 2] | 0, 8);
 STACKTOP = sp;
 return;
}

function _SDL_UnlockSurface($surface) {
 $surface = $surface | 0;
 var $0 = 0, $1 = 0, $locked = 0;
 $locked = $surface + 28 | 0;
 $0 = HEAP32[$locked >> 2] | 0;
 if (!$0) return;
 HEAP32[$locked >> 2] = $0 + -1;
 if (($0 | 0) > 1) return;
 $1 = HEAP32[$surface >> 2] | 0;
 if (!($1 & 2)) return;
 HEAP32[$surface >> 2] = $1 & -3;
 _SDL_RLESurface($surface) | 0;
 return;
}

function _RemovePendingExposedEvents($userdata, $event) {
 $userdata = $userdata | 0;
 $event = $event | 0;
 var $retval$0 = 0;
 if ((HEAP32[$event >> 2] | 0) == 512) if ((HEAP8[$event + 12 >> 0] | 0) == 3) if ((HEAP32[$event + 8 >> 2] | 0) == (HEAP32[$userdata + 8 >> 2] | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $retval$0 = 1;
 return $retval$0 | 0;
}

function _RemovePendingMoveEvents($userdata, $event) {
 $userdata = $userdata | 0;
 $event = $event | 0;
 var $retval$0 = 0;
 if ((HEAP32[$event >> 2] | 0) == 512) if ((HEAP8[$event + 12 >> 0] | 0) == 4) if ((HEAP32[$event + 8 >> 2] | 0) == (HEAP32[$userdata + 8 >> 2] | 0)) {
  $retval$0 = 0;
  return $retval$0 | 0;
 }
 $retval$0 = 1;
 return $retval$0 | 0;
}

function _SDL_MouseRelativeSpeedScaleChanged($userdata, $name, $oldValue, $hint) {
 $userdata = $userdata | 0;
 $name = $name | 0;
 $oldValue = $oldValue | 0;
 $hint = $hint | 0;
 var $$sink = 0.0;
 if (!$hint) $$sink = 1.0; else if (!(HEAP8[$hint >> 0] | 0)) $$sink = 1.0; else $$sink = +_SDL_atof($hint);
 HEAPF32[$userdata + 100 >> 2] = $$sink;
 return;
}

function _SDL_MouseNormalSpeedScaleChanged($userdata, $name, $oldValue, $hint) {
 $userdata = $userdata | 0;
 $name = $name | 0;
 $oldValue = $oldValue | 0;
 $hint = $hint | 0;
 var $$sink = 0.0;
 if (!$hint) $$sink = 1.0; else if (!(HEAP8[$hint >> 0] | 0)) $$sink = 1.0; else $$sink = +_SDL_atof($hint);
 HEAPF32[$userdata + 96 >> 2] = $$sink;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(___toread($f) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _SDL_calloc($nmemb, $size) {
 $nmemb = $nmemb | 0;
 $size = $size | 0;
 var $call = 0, $or$cond = 0;
 $or$cond = ($nmemb | 0) != 0 & ($size | 0) != 0;
 $call = FUNCTION_TABLE_iii[HEAP32[3244 >> 2] & 15]($or$cond ? $nmemb : 1, $or$cond ? $size : 1) | 0;
 if (!$call) return $call | 0;
 _SDL_AtomicAdd(3256, 1) | 0;
 return $call | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $call2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_282(HEAP32[$f + 60 >> 2] | 0) | 0;
 $call2 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $call2 | 0;
}

function _SDL_realloc($ptr, $size) {
 $ptr = $ptr | 0;
 $size = $size | 0;
 var $call = 0, $tobool = 0;
 $tobool = ($ptr | 0) != 0;
 $call = FUNCTION_TABLE_iii[HEAP32[3248 >> 2] & 15]($ptr, $tobool | ($size | 0) != 0 ? $size : 1) | 0;
 if ($tobool | ($call | 0) == 0) return $call | 0;
 _SDL_AtomicAdd(3256, 1) | 0;
 return $call | 0;
}

function _emscripten_glCompressedTexSubImage2D__wrapper(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 _emscripten_glCompressedTexSubImage2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0, p8 | 0);
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function _SDL_GameControllerQuit() {
 var $0 = 0, $1 = 0;
 _SDL_LockJoysticks();
 $0 = HEAP32[4706] | 0;
 if (!$0) {
  _SDL_UnlockJoysticks();
  return;
 }
 $1 = $0;
 do {
  HEAP32[$1 + 4 >> 2] = 1;
  _SDL_GameControllerClose($1);
  $1 = HEAP32[4706] | 0;
 } while (($1 | 0) != 0);
 _SDL_UnlockJoysticks();
 return;
}

function _emscripten_glTexSubImage2D__wrapper(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 _emscripten_glTexSubImage2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0, p8 | 0);
}

function _emscripten_glTexImage2D__wrapper(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 _emscripten_glTexImage2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0, p8 | 0);
}

function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
 $x = $x | 0;
 $y = $y | 0;
 $use_strcmp = $use_strcmp | 0;
 var $retval$0 = 0;
 if ($use_strcmp) $retval$0 = (_strcmp(HEAP32[$x + 4 >> 2] | 0, HEAP32[$y + 4 >> 2] | 0) | 0) == 0; else $retval$0 = ($x | 0) == ($y | 0);
 return $retval$0 | 0;
}

function _EMSCRIPTEN_JoystickRumble($joystick, $low_frequency_rumble, $high_frequency_rumble, $duration_ms) {
 $joystick = $joystick | 0;
 $low_frequency_rumble = $low_frequency_rumble | 0;
 $high_frequency_rumble = $high_frequency_rumble | 0;
 $duration_ms = $duration_ms | 0;
 return _SDL_Error(4) | 0;
}

function _SDL_LogDebug($category, $fmt, $varargs) {
 $category = $category | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 _SDL_LogMessageV($category, 2, $fmt, $ap);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}

function _emscripten_glCompressedTexImage2D__wrapper(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 _emscripten_glCompressedTexImage2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0);
}

function _emscripten_glCopyTexSubImage2D__wrapper(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 _emscripten_glCopyTexSubImage2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0);
}

function _fprintf($f, $fmt, $varargs) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vfprintf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _SDL_WaitThread($thread, $status) {
 $thread = $thread | 0;
 $status = $status | 0;
 var $1 = 0;
 if (!$thread) return;
 if ($status | 0) HEAP32[$status >> 2] = HEAP32[$thread + 8 >> 2];
 $1 = HEAP32[$thread + 792 >> 2] | 0;
 if ($1 | 0) _SDL_free($1);
 _SDL_free($thread);
 return;
}

function _emscripten_glCopyTexImage2D__wrapper(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 _emscripten_glCopyTexImage2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0, p7 | 0);
}

function _printf($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vfprintf(HEAP32[839] | 0, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _SDL_TouchQuit() {
 var $0 = 0, $2 = 0;
 $0 = HEAP32[4666] | 0;
 if (!$0) {
  _SDL_free(0);
  _SDL_GestureQuit();
  return;
 }
 $2 = HEAP32[0 + ($0 + -1 << 2) >> 2] | 0;
 _SDL_DelTouch(HEAP32[$2 >> 2] | 0, HEAP32[$2 + 4 >> 2] | 0);
 _SDL_free(0);
 _SDL_GestureQuit();
 return;
}

function _SDL_ReadLE32($src) {
 $src = $src | 0;
 var $value = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $value = sp;
 HEAP32[$value >> 2] = 0;
 FUNCTION_TABLE_iiiii[HEAP32[$src + 8 >> 2] & 7]($src, $value, 4, 1) | 0;
 STACKTOP = sp;
 return HEAP32[$value >> 2] | 0;
}

function _SDL_ReadLE16($src) {
 $src = $src | 0;
 var $value = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $value = sp;
 HEAP16[$value >> 1] = 0;
 FUNCTION_TABLE_iiiii[HEAP32[$src + 8 >> 2] & 7]($src, $value, 2, 1) | 0;
 STACKTOP = sp;
 return HEAP16[$value >> 1] | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function _pntz($p) {
 $p = $p | 0;
 var $call = 0, $call2 = 0;
 $call = _a_ctz_l((HEAP32[$p >> 2] | 0) + -1 | 0) | 0;
 if (!$call) {
  $call2 = _a_ctz_l(HEAP32[$p + 4 >> 2] | 0) | 0;
  return (($call2 | 0) == 0 ? 0 : $call2 + 32 | 0) | 0;
 } else return $call | 0;
 return 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function _SDL_AllocBlitMap() {
 var $call = 0, $retval$0 = 0;
 $call = _SDL_calloc(1, 88) | 0;
 if (!$call) {
  _SDL_Error(0) | 0;
  $retval$0 = 0;
  return $retval$0 | 0;
 } else {
  HEAP32[$call + 76 >> 2] = -1;
  $retval$0 = $call;
  return $retval$0 | 0;
 }
 return 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function _emscripten_glGetActiveUniform__wrapper(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 _emscripten_glGetActiveUniform(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0);
}

function ___ofl_add($f) {
 $f = $f | 0;
 var $1 = 0, $call = 0;
 $call = ___ofl_lock() | 0;
 HEAP32[$f + 56 >> 2] = HEAP32[$call >> 2];
 $1 = HEAP32[$call >> 2] | 0;
 if ($1 | 0) HEAP32[$1 + 52 >> 2] = $f;
 HEAP32[$call >> 2] = $f;
 ___ofl_unlock();
 return $f | 0;
}

function _emscripten_glGetActiveAttrib__wrapper(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 _emscripten_glGetActiveAttrib(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0);
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $this;
 ___embind_register_native_and_builtin_types();
 STACKTOP = sp;
 return;
}

function _SDL_ResetKeyboard() {
 var $scancode$06 = 0;
 $scancode$06 = 0;
 do {
  if ((HEAP8[16102 + $scancode$06 >> 0] | 0) == 1) _SDL_SendKeyboardKey(0, $scancode$06) | 0;
  $scancode$06 = $scancode$06 + 1 | 0;
 } while (($scancode$06 | 0) != 512);
 return;
}

function __Z10load_errorPKc($file) {
 $file = $file | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $file;
 _printf(3961, $vararg_buffer) | 0;
 STACKTOP = sp;
 return;
}

function _SDL_strdup($string) {
 $string = $string | 0;
 var $add = 0, $call1 = 0;
 $add = (_strlen($string) | 0) + 1 | 0;
 $call1 = _SDL_malloc($add) | 0;
 if (!$call1) return $call1 | 0;
 _memcpy($call1 | 0, $string | 0, $add | 0) | 0;
 return $call1 | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $add = 0, $call1 = 0, $retval$0 = 0;
 $add = (_strlen($s) | 0) + 1 | 0;
 $call1 = _malloc($add) | 0;
 if (!$call1) $retval$0 = 0; else $retval$0 = _memcpy($call1 | 0, $s | 0, $add | 0) | 0;
 return $retval$0 | 0;
}

function _debug_print($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 _SDL_LogMessageV(2, 4, $fmt, $ap);
 STACKTOP = sp;
 return;
}

function _emscripten_glReadPixels__wrapper(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 _emscripten_glReadPixels(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0, p6 | 0);
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
}

function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iidiiii[index & 1](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _SDL_Log($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 _SDL_LogMessageV(0, 3, $fmt, $ap);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function _emscripten_glVertexAttribPointer__wrapper(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 _emscripten_glVertexAttribPointer(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0, p5 | 0);
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function _SDL_GameControllerIgnoreDevicesExceptChanged($userdata, $name, $oldValue, $hint) {
 $userdata = $userdata | 0;
 $name = $name | 0;
 $oldValue = $oldValue | 0;
 $hint = $hint | 0;
 _SDL_LoadVIDPIDListFromHint($hint, 18828);
 return;
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $5 = 0, $6 = 0.0;
 $5 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $6 = +HEAPF64[$5 >> 3];
 HEAP32[$ap >> 2] = $5 + 8;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function _SDL_GameControllerIgnoreDevicesChanged($userdata, $name, $oldValue, $hint) {
 $userdata = $userdata | 0;
 $name = $name | 0;
 $oldValue = $oldValue | 0;
 $hint = $hint | 0;
 _SDL_LoadVIDPIDListFromHint($hint, 18840);
 return;
}

function _emscripten_glDrawElementsInstancedANGLE__wrapper(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 _emscripten_glDrawElementsInstancedANGLE(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
}

function _SDL_LogResetPriorities() {
 var $0 = 0, $1 = 0;
 $0 = HEAP32[3970] | 0;
 if (!$0) return;
 $1 = $0;
 do {
  HEAP32[3970] = HEAP32[$1 + 8 >> 2];
  _SDL_free($1);
  $1 = HEAP32[3970] | 0;
 } while (($1 | 0) != 0);
 return;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glGetFramebufferAttachmentParameteriv(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _SDL_malloc($size) {
 $size = $size | 0;
 var $call = 0;
 $call = FUNCTION_TABLE_ii[HEAP32[810] & 63](($size | 0) == 0 ? 1 : $size) | 0;
 if (!$call) return $call | 0;
 _SDL_AtomicAdd(3256, 1) | 0;
 return $call | 0;
}

function _emscripten_glFramebufferTexture2D__wrapper(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 _emscripten_glFramebufferTexture2D(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
}

function _SDL_TimerQuit() {
 var $0 = 0, $1 = 0;
 $0 = HEAP32[4715] | 0;
 if (!$0) return;
 $1 = $0;
 do {
  HEAP32[4715] = HEAP32[$1 + 8 >> 2];
  _SDL_free($1);
  $1 = HEAP32[4715] | 0;
 } while (($1 | 0) != 0);
 return;
}

function _SDL_Quit() {
 HEAP32[4714] = 1;
 _SDL_QuitSubSystem(62001);
 _SDL_TicksQuit();
 _SDL_ClearHints();
 _SDL_AssertionsQuit();
 _SDL_LogResetPriorities();
 _SDL_memset(13728, 0, 32) | 0;
 HEAP32[4714] = 0;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _SDL_getenv($name) {
 $name = $name | 0;
 var $retval$0 = 0;
 if (!$name) $retval$0 = 0; else if (!(HEAP8[$name >> 0] | 0)) $retval$0 = 0; else $retval$0 = _getenv($name | 0) | 0;
 return $retval$0 | 0;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $retval$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $retval$0 = -1;
 } else $retval$0 = $r;
 return $retval$0 | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function _SDL_vsnprintf($text, $maxlen, $fmt, $ap) {
 $text = $text | 0;
 $maxlen = $maxlen | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($text, $maxlen, ($fmt | 0) == 0 ? 19444 : $fmt, $ap) | 0;
}

function _SDL_OnWindowResized($window) {
 $window = $window | 0;
 HEAP32[$window + 112 >> 2] = 0;
 _SDL_SendWindowEvent($window, 6, HEAP32[$window + 24 >> 2] | 0, HEAP32[$window + 28 >> 2] | 0) | 0;
 return;
}

function _emscripten_glShaderBinary__wrapper(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 _emscripten_glShaderBinary(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
}

function ___DOUBLE_BITS_527($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function ___DOUBLE_BITS_126($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function _emscripten_glGetShaderPrecisionFormat__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glGetShaderPrecisionFormat(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glDrawArraysInstancedANGLE__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glDrawArraysInstancedANGLE(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glFramebufferRenderbuffer__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glFramebufferRenderbuffer(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _emscripten_glUniform4i__wrapper(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 _emscripten_glUniform4i(p0 | 0, p1 | 0, p2 | 0, p3 | 0, p4 | 0);
}

function dynCall_vidddd(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 a4 = +a4;
 a5 = +a5;
 FUNCTION_TABLE_vidddd[index & 3](a1 | 0, +a2, +a3, +a4, +a5);
}

function _emscripten_glStencilFuncSeparate__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glStencilFuncSeparate(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glRenderbufferStorage__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glRenderbufferStorage(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glGetAttachedShaders__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glGetAttachedShaders(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _SDL_qsort($base, $nmemb, $size, $compare) {
 $base = $base | 0;
 $nmemb = $nmemb | 0;
 $size = $size | 0;
 $compare = $compare | 0;
 _qsort($base, $nmemb, $size, $compare);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function _emscripten_glStencilOpSeparate__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glStencilOpSeparate(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glGetProgramInfoLog__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glGetProgramInfoLog(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glBlendFuncSeparate__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glBlendFuncSeparate(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function b25(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(25);
}

function _emscripten_glUniformMatrix4fv__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glUniformMatrix4fv(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glUniformMatrix3fv__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glUniformMatrix3fv(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glUniformMatrix2fv__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glUniformMatrix2fv(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glGetShaderInfoLog__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glGetShaderInfoLog(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function _emscripten_glVertexAttrib4f__wrapper(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 p4 = +p4;
 _emscripten_glVertexAttrib4f(p0 | 0, +p1, +p2, +p3, +p4);
}

function _emscripten_glGetShaderSource__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glGetShaderSource(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $call = 0;
 $call = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$call >> 0] | 0) == ($c & 255) << 24 >> 24 ? $call : 0) | 0;
}

function _emscripten_glGetRenderbufferParameteriv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetRenderbufferParameteriv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glBufferSubData__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glBufferSubData(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _SDL_GetMouseState($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 if ($x | 0) HEAP32[$x >> 2] = HEAP32[3983];
 if ($y | 0) HEAP32[$y >> 2] = HEAP32[3984];
 return HEAP32[3991] | 0;
}

function _EMSCRIPTEN_JoystickClose($joystick) {
 $joystick = $joystick | 0;
 var $0 = 0;
 $0 = HEAP32[$joystick + 84 >> 2] | 0;
 if (!$0) return;
 HEAP32[$0 + 16 >> 2] = 0;
 return;
}

function _strtol($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox($s, $p, $base, -2147483648, 0) | 0;
 getTempRet0() | 0;
 return $0 | 0;
}

function _emscripten_glShaderSource__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glShaderSource(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glDrawElements__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glDrawElements(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glUniform4f__wrapper(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 p4 = +p4;
 _emscripten_glUniform4f(p0 | 0, +p1, +p2, +p3, +p4);
}

function _emscripten_glGetVertexAttribPointerv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetVertexAttribPointerv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glBufferData__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glBufferData(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _SDL_OnWindowRestored($window) {
 $window = $window | 0;
 if ((HEAP32[$window + 48 >> 2] & 69 | 0) != 5) return;
 _SDL_UpdateFullscreenMode($window, 1) | 0;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _emscripten_glUniform3i__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glUniform3i(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glGetQueryObjectui64vEXT__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetQueryObjectui64vEXT(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glColorMask__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glColorMask(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function dynCall_viddd(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 a4 = +a4;
 FUNCTION_TABLE_viddd[index & 3](a1 | 0, +a2, +a3, +a4);
}

function _getpix_24($srcbuf) {
 $srcbuf = $srcbuf | 0;
 return (HEAPU8[$srcbuf + 1 >> 0] | 0) << 8 | (HEAPU8[$srcbuf >> 0] | 0) | (HEAPU8[$srcbuf + 2 >> 0] | 0) << 16 | 0;
}

function _emscripten_glViewport__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glViewport(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glGetQueryObjecti64vEXT__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetQueryObjecti64vEXT(p0 | 0, p1 | 0, p2 | 0);
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _SDL_OnWindowShown($window) {
 $window = $window | 0;
 if ((HEAP32[$window + 48 >> 2] & 69 | 0) != 5) return;
 _SDL_UpdateFullscreenMode($window, 1) | 0;
 return;
}

function b24(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(24);
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $call = 0;
 $call = _strlen($s) | 0;
 return ((_fwrite($s, 1, $call, $f) | 0) != ($call | 0)) << 31 >> 31 | 0;
}

function _emscripten_glScissor__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 _emscripten_glScissor(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function _emscripten_glGetQueryObjectuivEXT__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetQueryObjectuivEXT(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetBufferParameteriv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetBufferParameteriv(p0 | 0, p1 | 0, p2 | 0);
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc, 0) | 0;
 return $retval$0 | 0;
}

function _emscripten_glGetQueryObjectivEXT__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetQueryObjectivEXT(p0 | 0, p1 | 0, p2 | 0);
}

function _SDL_OnWindowEnter($window) {
 $window = $window | 0;
 var $0 = 0;
 $0 = HEAP32[37] | 0;
 if (!$0) return;
 FUNCTION_TABLE_vii[$0 & 63](0, $window);
 return;
}

function dynCall_vdddd(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = +a1;
 a2 = +a2;
 a3 = +a3;
 a4 = +a4;
 FUNCTION_TABLE_vdddd[index & 3](+a1, +a2, +a3, +a4);
}

function _emscripten_glVertexAttrib3f__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 _emscripten_glVertexAttrib3f(p0 | 0, +p1, +p2, +p3);
}

function _emscripten_glBindAttribLocation__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glBindAttribLocation(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetVertexAttribiv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetVertexAttribiv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetVertexAttribfv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetVertexAttribfv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetTexParameteriv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetTexParameteriv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetTexParameterfv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetTexParameterfv(p0 | 0, p1 | 0, p2 | 0);
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function _SDL_NumJoysticks() {
 var $call = 0;
 if (0) {}
 $call = FUNCTION_TABLE_i[HEAP32[3312 >> 2] & 7]() | 0;
 if (!0) return $call | 0;
 return $call | 0;
}

function _SDL_memmove($dst, $src, $len) {
 $dst = $dst | 0;
 $src = $src | 0;
 $len = $len | 0;
 _memmove($dst | 0, $src | 0, $len | 0) | 0;
 return $dst | 0;
}

function _emscripten_glTexParameteriv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glTexParameteriv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glTexParameterfv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glTexParameterfv(p0 | 0, p1 | 0, p2 | 0);
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __Z12load_texturePKc($file) {
 $file = $file | 0;
 HEAP32[3915] = __Z12init_texturePKc($file) | 0;
 HEAP32[3916] = (HEAP32[3916] | 0) + 1;
 return;
}

function _SDL_memcpy($dst, $src, $len) {
 $dst = $dst | 0;
 $src = $src | 0;
 $len = $len | 0;
 _memcpy($dst | 0, $src | 0, $len | 0) | 0;
 return $dst | 0;
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 1](a1 | 0, a2 | 0, +a3);
}

function _emscripten_glUniform3f__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 _emscripten_glUniform3f(p0 | 0, +p1, +p2, +p3);
}

function _emscripten_glTexParameteri__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glTexParameteri(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetQueryivEXT__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetQueryivEXT(p0 | 0, p1 | 0, p2 | 0);
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function _SDL_strncmp($str1, $str2, $maxlen) {
 $str1 = $str1 | 0;
 $str2 = $str2 | 0;
 $maxlen = $maxlen | 0;
 return _strncmp($str1, $str2, $maxlen) | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function _SDL_memset($dst, $c, $len) {
 $dst = $dst | 0;
 $c = $c | 0;
 $len = $len | 0;
 _memset($dst | 0, $c & 255 | 0, $len | 0) | 0;
 return $dst | 0;
}

function _SDL_free($ptr) {
 $ptr = $ptr | 0;
 if (!$ptr) return;
 FUNCTION_TABLE_vi[HEAP32[3252 >> 2] & 63]($ptr);
 _SDL_AtomicAdd(3256, -1) | 0;
 return;
}

function _emscripten_glGetUniformiv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetUniformiv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetUniformfv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetUniformfv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetProgramiv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetProgramiv(p0 | 0, p1 | 0, p2 | 0);
}

function _SDL_strtol($string, $endp, $base) {
 $string = $string | 0;
 $endp = $endp | 0;
 $base = $base | 0;
 return _strtol($string, $endp, $base) | 0;
}

function b23(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(23);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _emscripten_glVertexAttribDivisorANGLE__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glVertexAttribDivisorANGLE(p0 | 0, p1 | 0);
}

function _emscripten_glStencilFunc__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glStencilFunc(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetShaderiv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glGetShaderiv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glClearColor__wrapper(p0, p1, p2, p3) {
 p0 = +p0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 _emscripten_glClearColor(+p0, +p1, +p2, +p3);
}

function _emscripten_glBlendColor__wrapper(p0, p1, p2, p3) {
 p0 = +p0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 _emscripten_glBlendColor(+p0, +p1, +p2, +p3);
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function _emscripten_glGetUniformLocation__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _emscripten_glGetUniformLocation(p0 | 0, p1 | 0) | 0;
}

function dynCall_vidd(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 FUNCTION_TABLE_vidd[index & 3](a1 | 0, +a2, +a3);
}

function _emscripten_glUniform4iv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform4iv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform4fv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform4fv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform3iv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform3iv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform3fv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform3fv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform2iv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform2iv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform2fv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform2fv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform1iv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform1iv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glUniform1fv__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform1fv(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glTexParameterf__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 _emscripten_glTexParameterf(p0 | 0, p1 | 0, +p2);
}

function _emscripten_glDrawArrays__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glDrawArrays(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glGetAttribLocation__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _emscripten_glGetAttribLocation(p0 | 0, p1 | 0) | 0;
}

function _emscripten_glUniform2i__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glUniform2i(p0 | 0, p1 | 0, p2 | 0);
}

function _emscripten_glStencilOp__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 _emscripten_glStencilOp(p0 | 0, p1 | 0, p2 | 0);
}

function _SDL_DestroyMutex($mutex) {
 $mutex = $mutex | 0;
 if (!$mutex) return;
 if (HEAP32[$mutex + 8 >> 2] | 0) {}
 _SDL_free($mutex);
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function _emscripten_glVertexAttrib2f__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 _emscripten_glVertexAttrib2f(p0 | 0, +p1, +p2);
}

function _emscripten_glDeleteVertexArraysOES__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDeleteVertexArraysOES(p0 | 0, p1 | 0);
}

function _emscripten_glBlendEquationSeparate__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBlendEquationSeparate(p0 | 0, p1 | 0);
}

function _SDL_AtomicAdd($a, $v) {
 $a = $a | 0;
 $v = $v | 0;
 var $0 = 0;
 $0 = HEAP32[$a >> 2] | 0;
 HEAP32[$a >> 2] = $0 + $v;
 return $0 | 0;
}

function _emscripten_glStencilMaskSeparate__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glStencilMaskSeparate(p0 | 0, p1 | 0);
}

function _emscripten_glDeleteRenderbuffers__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDeleteRenderbuffers(p0 | 0, p1 | 0);
}

function b2(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(2);
 return 0;
}

function _SDL_AtomicSet($a, $v) {
 $a = $a | 0;
 $v = $v | 0;
 var $0 = 0;
 $0 = HEAP32[$a >> 2] | 0;
 HEAP32[$a >> 2] = $v;
 return $0 | 0;
}

function _emscripten_glGenVertexArraysOES__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGenVertexArraysOES(p0 | 0, p1 | 0);
}

function _emscripten_glDeleteFramebuffers__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDeleteFramebuffers(p0 | 0, p1 | 0);
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return ___vfprintf_internal($f, $fmt, $ap, 1, 2) | 0;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 2968;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 3024;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function _fileno($f) {
 $f = $f | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) if (___lockfile($f) | 0) {}
 return HEAP32[$f + 60 >> 2] | 0;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 3e3;
}

function _emscripten_glUniform2f__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 _emscripten_glUniform2f(p0 | 0, +p1, +p2);
}

function _emscripten_glGenRenderbuffers__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGenRenderbuffers(p0 | 0, p1 | 0);
}

function _emscripten_glDrawBuffersWEBGL__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDrawBuffersWEBGL(p0 | 0, p1 | 0);
}

function _emscripten_glDeleteQueriesEXT__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDeleteQueriesEXT(p0 | 0, p1 | 0);
}

function _emscripten_glBindRenderbuffer__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBindRenderbuffer(p0 | 0, p1 | 0);
}

function _SDL_strstr($haystack, $needle) {
 $haystack = $haystack | 0;
 $needle = $needle | 0;
 return _strstr($haystack, $needle) | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}

function b22(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(22);
}

function _emscripten_glVertexAttrib4fv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glVertexAttrib4fv(p0 | 0, p1 | 0);
}

function _emscripten_glVertexAttrib3fv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glVertexAttrib3fv(p0 | 0, p1 | 0);
}

function _emscripten_glVertexAttrib2fv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glVertexAttrib2fv(p0 | 0, p1 | 0);
}

function _emscripten_glVertexAttrib1fv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glVertexAttrib1fv(p0 | 0, p1 | 0);
}

function _emscripten_glQueryCounterEXT__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glQueryCounterEXT(p0 | 0, p1 | 0);
}

function _emscripten_glGenFramebuffers__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGenFramebuffers(p0 | 0, p1 | 0);
}

function _emscripten_glBindFramebuffer__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBindFramebuffer(p0 | 0, p1 | 0);
}

function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glCheckFramebufferStatus(p0 | 0) | 0;
}

function _emscripten_glDeleteTextures__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDeleteTextures(p0 | 0, p1 | 0);
}

function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function _SDL_HasWindows() {
 var $1 = 0;
 if (!0) {
  $1 = 0;
  return $1 | 0;
 }
 $1 = (HEAP32[77] | 0) != 0 & 1;
 return $1 | 0;
}
function globalCtors() {
 __GLOBAL__sub_I_TestEmscripten_cpp();
 ___emscripten_environ_constructor();
 __GLOBAL__sub_I_bind_cpp();
}

function _toupper($c) {
 $c = $c | 0;
 var $tobool = 0;
 $tobool = (_islower($c) | 0) == 0;
 return ($tobool ? $c : $c & 95) | 0;
}

function _tolower($c) {
 $c = $c | 0;
 var $tobool = 0;
 $tobool = (_isupper($c) | 0) == 0;
 return ($tobool ? $c : $c | 32) | 0;
}

function _emscripten_glGenQueriesEXT__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGenQueriesEXT(p0 | 0, p1 | 0);
}

function _emscripten_glDeleteBuffers__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDeleteBuffers(p0 | 0, p1 | 0);
}

function _emscripten_glBeginQueryEXT__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBeginQueryEXT(p0 | 0, p1 | 0);
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 3](a1 | 0, +a2);
}

function dynCall_vdi(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = a2 | 0;
 FUNCTION_TABLE_vdi[index & 1](+a1, a2 | 0);
}

function _emscripten_glDetachShader__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glDetachShader(p0 | 0, p1 | 0);
}

function _emscripten_glAttachShader__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glAttachShader(p0 | 0, p1 | 0);
}

function b6(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(6);
 return 0;
}

function _emscripten_glVertexAttrib1f__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 _emscripten_glVertexAttrib1f(p0 | 0, +p1);
}

function _emscripten_glSampleCoverage__wrapper(p0, p1) {
 p0 = +p0;
 p1 = p1 | 0;
 _emscripten_glSampleCoverage(+p0, p1 | 0);
}

function _emscripten_glPixelStorei__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glPixelStorei(p0 | 0, p1 | 0);
}

function _emscripten_glGetIntegerv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGetIntegerv(p0 | 0, p1 | 0);
}

function _emscripten_glGetBooleanv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGetBooleanv(p0 | 0, p1 | 0);
}

function _emscripten_glGenTextures__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGenTextures(p0 | 0, p1 | 0);
}

function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glDisableVertexAttribArray(p0 | 0);
}

function _emscripten_glBindTexture__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBindTexture(p0 | 0, p1 | 0);
}

function _SDL_memcmp($s1, $s2, $len) {
 $s1 = $s1 | 0;
 $s2 = $s2 | 0;
 $len = $len | 0;
 return _memcmp($s1, $s2, $len) | 0;
}

function _emscripten_glGenBuffers__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGenBuffers(p0 | 0, p1 | 0);
}

function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glEnableVertexAttribArray(p0 | 0);
}

function _emscripten_glBindBuffer__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBindBuffer(p0 | 0, p1 | 0);
}

function dynCall_vdd(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = +a2;
 FUNCTION_TABLE_vdd[index & 3](+a1, +a2);
}

function _emscripten_glUniform1i__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glUniform1i(p0 | 0, p1 | 0);
}

function _emscripten_glGetFloatv__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glGetFloatv(p0 | 0, p1 | 0);
}

function _emscripten_glBlendFunc__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glBlendFunc(p0 | 0, p1 | 0);
}

function _emscripten_glIsVertexArrayOES__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsVertexArrayOES(p0 | 0) | 0;
}

function _SDL_strcasecmp($str1, $str2) {
 $str1 = $str1 | 0;
 $str2 = $str2 | 0;
 return _strcasecmp($str1, $str2) | 0;
}

function _SDL_OnWindowMinimized($window) {
 $window = $window | 0;
 _SDL_UpdateFullscreenMode($window, 0) | 0;
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function _emscripten_glPolygonOffset__wrapper(p0, p1) {
 p0 = +p0;
 p1 = +p1;
 _emscripten_glPolygonOffset(+p0, +p1);
}

function ___cxx_global_var_init() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(19453);
 return;
}

function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function b21(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(21);
}

function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsRenderbuffer(p0 | 0) | 0;
}

function _SDL_SensorQuit() {
 if (0) {}
 _SDL_QuitSubSystem(16384);
 if (!0) return;
 _SDL_DestroyMutex(0);
 return;
}

function _SDL_OnWindowHidden($window) {
 $window = $window | 0;
 _SDL_UpdateFullscreenMode($window, 0) | 0;
 return;
}

function _emscripten_glUniform1f__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 _emscripten_glUniform1f(p0 | 0, +p1);
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s) | 0) + 1 | 0) | 0;
}

function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsFramebuffer(p0 | 0) | 0;
}

function _EMSCRIPTEN_JoystickGetDevicePlayerIndex($device_index) {
 $device_index = $device_index | 0;
 return -1;
}

function _emscripten_glDepthRangef__wrapper(p0, p1) {
 p0 = +p0;
 p1 = +p1;
 _emscripten_glDepthRangef(+p0, +p1);
}

function _emscripten_glBindVertexArrayOES__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glBindVertexArrayOES(p0 | 0);
}

function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glCreateShader(p0 | 0) | 0;
}

function _emscripten_glHint__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 _emscripten_glHint(p0 | 0, p1 | 0);
}

function _SDL_strcmp($str1, $str2) {
 $str1 = $str1 | 0;
 $str2 = $str2 | 0;
 return _strcmp($str1, $str2) | 0;
}

function _emscripten_glIsQueryEXT__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsQueryEXT(p0 | 0) | 0;
}

function _SDL_IsJoystickHIDAPI($guid) {
 $guid = $guid | 0;
 return (HEAP8[$guid + 14 >> 0] | 0) == 104 | 0;
}

function b5(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(5);
 return 0;
}

function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glValidateProgram(p0 | 0);
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 63](a1 | 0);
}

function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsTexture(p0 | 0) | 0;
}

function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsProgram(p0 | 0) | 0;
}

function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsEnabled(p0 | 0) | 0;
}

function _emscripten_glGetString__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glGetString(p0 | 0) | 0;
}

function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glGenerateMipmap(p0 | 0);
}

function _SDL_FreeResampleFilter() {
 _SDL_free(HEAP32[4713] | 0);
 _SDL_free(HEAP32[4713] | 0);
 return;
}

function b16(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 p4 = +p4;
 abort(16);
}

function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsShader(p0 | 0) | 0;
}

function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0 | 0;
 return _emscripten_glIsBuffer(p0 | 0) | 0;
}

function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glDeleteProgram(p0 | 0);
}

function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glCompileShader(p0 | 0);
}

function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glBlendEquation(p0 | 0);
}

function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glActiveTexture(p0 | 0);
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glDeleteShader(p0 | 0);
}

function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glClearStencil(p0 | 0);
}

function _SDL_SYS_SetTLSData($data) {
 $data = $data | 0;
 return _SDL_Generic_SetTLSData($data) | 0;
}

function dynCall_vd(index, a1) {
 index = index | 0;
 a1 = +a1;
 FUNCTION_TABLE_vd[index & 3](+a1);
}

function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glStencilMask(p0 | 0);
}

function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glLinkProgram(p0 | 0);
}

function _emscripten_glEndQueryEXT__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glEndQueryEXT(p0 | 0);
}

function b20(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(20);
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glUseProgram(p0 | 0);
}

function _emscripten_glReleaseShaderCompiler__wrapper() {
 _emscripten_glReleaseShaderCompiler();
}

function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glFrontFace(p0 | 0);
}

function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glDepthMask(p0 | 0);
}

function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glDepthFunc(p0 | 0);
}

function _SDL_FlushEvent($type) {
 $type = $type | 0;
 _SDL_FlushEvents($type, $type);
 return;
}

function _getpix_16($srcbuf) {
 $srcbuf = $srcbuf | 0;
 return HEAPU16[$srcbuf >> 1] | 0 | 0;
}

function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glCullFace(p0 | 0);
}

function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0;
 _emscripten_glClearDepthf(+p0);
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 2920;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 2928;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 2888;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 2896;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 2904;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 2912;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 2936;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 2880;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 2864;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 2872;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 2952;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 2944;
}

function _emscripten_glCreateProgram__wrapper() {
 return _emscripten_glCreateProgram() | 0;
}

function _getpix_8($srcbuf) {
 $srcbuf = $srcbuf | 0;
 return HEAPU8[$srcbuf >> 0] | 0 | 0;
}

function _emscripten_glDisable__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glDisable(p0 | 0);
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0;
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 return +(+_strtox_317($s, $p, 1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(4);
 return 0;
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 abort(15);
}

function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0;
 _emscripten_glLineWidth(+p0);
}

function _emscripten_glEnable__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glEnable(p0 | 0);
}

function _SDL_AtomicUnlock($lock) {
 $lock = $lock | 0;
 HEAP32[$lock >> 2] = 0;
 return;
}

function _getpix_32($srcbuf) {
 $srcbuf = $srcbuf | 0;
 return HEAP32[$srcbuf >> 2] | 0;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 return 3;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 return 2;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 return 1;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 return 6;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 return 0;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 return 0;
}

function _emscripten_glClear__wrapper(p0) {
 p0 = p0 | 0;
 _emscripten_glClear(p0 | 0);
}

function _IMG_LoadICO_RW($src) {
 $src = $src | 0;
 return _LoadICOCUR_RW($src, 1) | 0;
}

function _IMG_LoadCUR_RW($src) {
 $src = $src | 0;
 return _LoadICOCUR_RW($src, 2) | 0;
}

function b10(p0, p1, p2, p3) {
 p0 = +p0;
 p1 = +p1;
 p2 = +p2;
 p3 = +p3;
 abort(10);
}

function _SDL_HandleSIG($sig) {
 $sig = $sig | 0;
 _signal($sig | 0, 13) | 0;
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function _SDL_strlen($string) {
 $string = $string | 0;
 return _strlen($string) | 0;
}

function _SDL_atan2($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+Math_atan2(+$x, +$y));
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(18944);
 return;
}

function _SDL_abs($x) {
 $x = $x | 0;
 return (($x | 0) > -1 ? $x : 0 - $x | 0) | 0;
}

function _emscripten_glGetError__wrapper() {
 return _emscripten_glGetError() | 0;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 2960;
}

function _SDL_atoi($string) {
 $string = $string | 0;
 return _atoi($string) | 0;
}

function _SDL_atof($string) {
 $string = $string | 0;
 return +(+_atof($string));
}

function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(19);
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function b18(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 abort(18);
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function _islower($c) {
 $c = $c | 0;
 return ($c + -97 | 0) >>> 0 < 26 | 0;
}

function _isdigit($c) {
 $c = $c | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function b14(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 abort(14);
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 3120;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 3168;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 3160;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 3200;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 3192;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 3184;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 3176;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 3144;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 3208;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 3216;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 3136;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 3128;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 3152;
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init();
 return;
}

function _SDL_SYS_WaitThread($thread) {
 $thread = $thread | 0;
 return;
}

function _SDL_AtomicGet($a) {
 $a = $a | 0;
 return HEAP32[$a >> 2] | 0;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(3);
 return 0;
}

function _SDL_SYS_GetTLSData() {
 return _SDL_Generic_GetTLSData() | 0;
}

function _SDL_OnWindowLeave($window) {
 $window = $window | 0;
 return;
}

function _SDL_UnlockMutex($mutex) {
 $mutex = $mutex | 0;
 return 0;
}

function _SDL_GestureQuit() {
 _SDL_free(HEAP32[4016] | 0);
 return;
}

function _emscripten_glFinish__wrapper() {
 _emscripten_glFinish();
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function _EMSCRIPTEN_JoystickGetCount() {
 return HEAP32[4701] | 0;
}

function _SDL_LockMutex($mutex) {
 $mutex = $mutex | 0;
 return 0;
}

function _emscripten_glFlush__wrapper() {
 _emscripten_glFlush();
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function _SDL_floor($x) {
 $x = +$x;
 return +(+Math_floor(+$x));
}

function _SDL_DestroySemaphore($sem) {
 $sem = $sem | 0;
 return;
}

function _SDL_GetRelativeMouseMode() {
 return HEAP32[3993] | 0;
}

function _SDL_sqrt($x) {
 $x = +$x;
 return +(+Math_sqrt(+$x));
}

function _SDL_ceil($x) {
 $x = +$x;
 return +(+Math_ceil(+$x));
}

function _SDL_GetError() {
 return _SDL_GetErrorMsg(11680) | 0;
}

function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(17);
}

function _atof($s) {
 $s = $s | 0;
 return +(+_strtod($s, 0));
}

function _SDL_fabs($x) {
 $x = +$x;
 return +(+Math_abs(+$x));
}

function _SDL_SendQuit() {
 return _SDL_SendAppEvent(256) | 0;
}

function _IMG_LoadWEBP_RW($src) {
 $src = $src | 0;
 return 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function ___pthread_self_589() {
 return _pthread_self() | 0;
}

function ___pthread_self_180() {
 return _pthread_self() | 0;
}

function _SDL_sin($x) {
 $x = +$x;
 return +(+Math_sin(+$x));
}

function _SDL_cos($x) {
 $x = +$x;
 return +(+Math_cos(+$x));
}

function _IMG_LoadXPM_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadXCF_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadTIF_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadTGA_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadPNM_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadPNG_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadPCX_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadLBM_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadJPG_RW($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_LoadGIF_RW($src) {
 $src = $src | 0;
 return 0;
}

function _SDL_GetKeyboardFocus() {
 return HEAP32[4024] | 0;
}

function _IMG_LoadXV_RW($src) {
 $src = $src | 0;
 return 0;
}

function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 abort(13);
}

function b11(p0, p1) {
 p0 = +p0;
 p1 = p1 | 0;
 abort(11);
}

function _dummy_282($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function _SDL_GetMouseFocus() {
 return HEAP32[3982] | 0;
}

function _IMG_isWEBP($src) {
 $src = $src | 0;
 return 0;
}

function ___ofl_lock() {
 ___lock(18932);
 return 18940;
}

function _SDL_ClearError() {
 HEAP32[3716] = 0;
 return;
}

function _IMG_isXPM($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isXCF($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isTIF($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isPNM($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isPNG($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isPCX($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isLBM($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isJPG($src) {
 $src = $src | 0;
 return 0;
}

function _IMG_isGIF($src) {
 $src = $src | 0;
 return 0;
}

function _SDL_TicksQuit() {
 HEAP32[4017] = 0;
 return;
}

function _IMG_isXV($src) {
 $src = $src | 0;
 return 0;
}

function b9(p0, p1) {
 p0 = +p0;
 p1 = +p1;
 abort(9);
}

function ___ofl_unlock() {
 ___unlock(18932);
 return;
}

function b1(p0) {
 p0 = p0 | 0;
 abort(1);
 return 0;
}

function _SDL_UnlockJoysticks() {
 if (0) {}
 return;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 1;
}

function _SDL_LockJoysticks() {
 if (0) {}
 return;
}

function _EMSCRIPTEN_JoystickDetect() {
 return;
}

function ___errno_location() {
 return 18928;
}

function stackSave() {
 return STACKTOP | 0;
}

function b12(p0) {
 p0 = p0 | 0;
 abort(12);
}

function _SDL_GetVideoDevice() {
 return 0;
}

function __get_environ() {
 return 18944;
}

function _SDL_GetMouse() {
 return 15884;
}

function _pthread_self() {
 return 3368;
}

function b8(p0) {
 p0 = +p0;
 abort(8);
}

function _SDL_KeyboardQuit() {
 return;
}

function b0() {
 abort(0);
 return 0;
}

function _SDL_ThreadID() {
 return 0;
}

function b7() {
 abort(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,_EMSCRIPTEN_JoystickInit,_EMSCRIPTEN_JoystickGetCount,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,_IMG_LoadTGA_RW,_IMG_isCUR,_IMG_LoadCUR_RW,_IMG_isICO,_IMG_LoadICO_RW,_IMG_isBMP,_IMG_LoadBMP_RW,_IMG_isGIF,_IMG_LoadGIF_RW,_IMG_isJPG,_IMG_LoadJPG_RW,_IMG_isLBM,_IMG_LoadLBM_RW,_IMG_isPCX,_IMG_LoadPCX_RW,_IMG_isPNG,_IMG_LoadPNG_RW,_IMG_isPNM,_IMG_LoadPNM_RW,_IMG_isTIF,_IMG_LoadTIF_RW,_IMG_isXCF,_IMG_LoadXCF_RW,_IMG_isXPM,_IMG_LoadXPM_RW,_IMG_isXV,_IMG_LoadXV_RW,_IMG_isWEBP
,_IMG_LoadWEBP_RW,_malloc,_getpix_8,_getpix_16,_getpix_24,_getpix_32,_EMSCRIPTEN_JoystickGetDeviceName,_EMSCRIPTEN_JoystickGetDevicePlayerIndex,_EMSCRIPTEN_JoystickGetDeviceInstanceID,___stdio_close,_stdio_size,_stdio_close,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glGetString__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsEnabled__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsQueryEXT__wrapper,_emscripten_glIsVertexArrayOES__wrapper,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,_fmt_fp];
var FUNCTION_TABLE_iii = [b3,_calloc,_realloc,_EMSCRIPTEN_JoystickOpen,_RemovePendingSizeChangedAndResizedEvents,_RemovePendingMoveEvents,_RemovePendingExposedEvents,_cmpmodes,_SDL_GameControllerEventWatcher,_SDL_PromptAssertion,_emscripten_glGetAttribLocation__wrapper,_emscripten_glGetUniformLocation__wrapper,b3,b3,b3,b3];
var FUNCTION_TABLE_iiii = [b4,___stdout_write,___stdio_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,_Emscripten_JoyStickConnected,_Emscripten_JoyStickDisconnected,___stdio_read,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,_EMSCRIPTEN_JoystickRumble,___stdio_seek,_SDL_RLEBlit,_SDL_RLEAlphaBlit,_stdio_seek,_stdio_read,_stdio_write];
var FUNCTION_TABLE_iiiiii = [b6,_uncopy_opaque_16,_uncopy_32,_uncopy_transl_16,_copy_transl_565,_copy_transl_555,_copy_opaque_16,_copy_32];
var FUNCTION_TABLE_v = [b7,_EMSCRIPTEN_JoystickDetect,_EMSCRIPTEN_JoystickQuit,__Z6renderv,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,b7];
var FUNCTION_TABLE_vd = [b8,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper,b8];
var FUNCTION_TABLE_vdd = [b9,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper,b9];
var FUNCTION_TABLE_vdddd = [b10,_emscripten_glBlendColor__wrapper,_emscripten_glClearColor__wrapper,b10];
var FUNCTION_TABLE_vdi = [b11,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_vi = [b12,_free,_EMSCRIPTEN_JoystickUpdate,_EMSCRIPTEN_JoystickClose,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__Z12load_texturePKc,__Z10load_errorPKc,_SDL_HandleSIG,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glDeleteShader__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glDisable__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glEnable__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glEndQueryEXT__wrapper,_emscripten_glBindVertexArrayOES__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_vid = [b13,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b13];
var FUNCTION_TABLE_vidd = [b14,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper,b14];
var FUNCTION_TABLE_viddd = [b15,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b15];
var FUNCTION_TABLE_vidddd = [b16,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b16];
var FUNCTION_TABLE_vii = [b17,_EMSCRIPTEN_JoystickGetDeviceGUID,_pop_arg_long_double,_emscripten_glVertexAttribDivisorANGLE__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glHint__wrapper,_emscripten_glPixelStorei__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glGenQueriesEXT__wrapper,_emscripten_glDeleteQueriesEXT__wrapper,_emscripten_glBeginQueryEXT__wrapper,_emscripten_glQueryCounterEXT__wrapper,_emscripten_glDeleteVertexArraysOES__wrapper,_emscripten_glGenVertexArraysOES__wrapper,_emscripten_glDrawBuffersWEBGL__wrapper,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viid = [b18,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_viii = [b19,_emscripten_glBindAttribLocation__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glGetQueryivEXT__wrapper,_emscripten_glGetQueryObjectivEXT__wrapper,_emscripten_glGetQueryObjectuivEXT__wrapper,_emscripten_glGetQueryObjecti64vEXT__wrapper,_emscripten_glGetQueryObjectui64vEXT__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_viiii = [b20,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,_SDL_LogOutput,_SDL_MouseNormalSpeedScaleChanged,_SDL_MouseRelativeSpeedScaleChanged,_SDL_JoystickAllowBackgroundEventsChanged,_SDL_GameControllerIgnoreDevicesChanged,_SDL_GameControllerIgnoreDevicesExceptChanged,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glScissor__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glViewport__wrapper,_emscripten_glDrawArraysInstancedANGLE__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_viiiii = [b21,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glUniform4i__wrapper,_emscripten_glDrawElementsInstancedANGLE__wrapper];
var FUNCTION_TABLE_viiiiii = [b22,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_emscripten_glVertexAttribPointer__wrapper,b22,b22,b22];
var FUNCTION_TABLE_viiiiiii = [b23,_emscripten_glGetActiveAttrib__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glReadPixels__wrapper];
var FUNCTION_TABLE_viiiiiiii = [b24,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiiiiii = [b25,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];

  return { ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_environ: __get_environ, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _fileno: _fileno, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, _strstr: _strstr, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_v: dynCall_v, dynCall_vd: dynCall_vd, dynCall_vdd: dynCall_vdd, dynCall_vdddd: dynCall_vdddd, dynCall_vdi: dynCall_vdi, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vidd: dynCall_vidd, dynCall_viddd: dynCall_viddd, dynCall_vidddd: dynCall_vidddd, dynCall_vii: dynCall_vii, dynCall_viid: dynCall_viid, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = asm["___embind_register_native_and_builtin_types"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var _fileno = Module["_fileno"] = asm["_fileno"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;











































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

Module['callMain'] = function callMain(args) {

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}






